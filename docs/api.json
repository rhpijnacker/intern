{
	"id": 0,
	"name": "intern",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 387,
			"name": "\"common/index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/common/index.ts",
			"sources": [
				{
					"fileName": "src/common/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 187,
			"name": "\"common/lib/Evented\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/common/lib/Evented.ts",
			"children": [
				{
					"id": 188,
					"name": "Evented",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An event emitter"
					},
					"typeParameter": [
						{
							"id": 189,
							"name": "M",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "CustomEventTypes",
								"id": 215
							}
						},
						{
							"id": 190,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 191,
							"name": "O",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 194,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 195,
									"name": "new Evented",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Evented",
										"id": 188
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 27,
									"character": 28
								}
							]
						},
						{
							"id": 192,
							"name": "__typeMap__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 20,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "M",
								"id": 189
							}
						},
						{
							"id": 193,
							"name": "listenersMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "map of listeners keyed by event type"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 24,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "typeParameter",
													"name": "M",
													"constraint": {
														"type": "reference",
														"name": "CustomEventTypes",
														"id": 215
													}
												}
											}
										]
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EventedCallback",
											"id": 223,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "T"
												},
												{
													"type": "typeParameter",
													"name": "O",
													"constraint": {
														"type": "reference",
														"name": "EventObject",
														"id": 219,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												}
											]
										}
									}
								]
							},
							"defaultValue": " new Map()"
						},
						{
							"id": 213,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 214,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Destrpys all handers registered for the instance",
										"text": "Returns a promise that resolves once all handles have been destroyed\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 113,
									"character": 9
								}
							]
						},
						{
							"id": 196,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 197,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the event object for the specified type"
									},
									"typeParameter": [
										{
											"id": 198,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "typeParameter",
													"name": "M",
													"constraint": {
														"type": "reference",
														"name": "CustomEventTypes",
														"id": 215
													}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 199,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the event to emit\n"
											},
											"type": {
												"type": "unknown",
												"name": "M[K]"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 200,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 201,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "O",
												"constraint": {
													"type": "reference",
													"name": "EventObject",
													"id": 219,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 38,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 39,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 40,
									"character": 6
								}
							]
						},
						{
							"id": 202,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 203,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catch all handler for various call signatures. The signatures are defined in\n`BaseEventedEvents`.  You can add your own event type -> handler types by extending\n`BaseEventedEvents`.  See example for details."
									},
									"typeParameter": [
										{
											"id": 204,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "typeParameter",
													"name": "M",
													"constraint": {
														"type": "reference",
														"name": "CustomEventTypes",
														"id": 215
													}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 205,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "K",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "typeParameter",
														"name": "M",
														"constraint": {
															"type": "reference",
															"name": "CustomEventTypes",
															"id": 215
														}
													}
												}
											}
										},
										{
											"id": 206,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "typeParameter",
																"name": "M",
																"constraint": {
																	"type": "reference",
																	"name": "CustomEventTypes",
																	"id": 215
																}
															}
														}
													},
													{
														"type": "unknown",
														"name": "M[K]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									}
								},
								{
									"id": 207,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 208,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										},
										{
											"id": 209,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													},
													{
														"type": "typeParameter",
														"name": "O",
														"constraint": {
															"type": "reference",
															"name": "EventObject",
															"id": 219,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "T"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 66,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 70,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 71,
									"character": 4
								}
							]
						},
						{
							"id": 210,
							"name": "own",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 211,
									"name": "own",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register handles for the instance that will be destroyed when\n`this.destroy` is called",
										"text": "Returns a handle for the handle, removes the handle for the instance and\ncalls destroy\n"
									},
									"parameters": [
										{
											"id": 212,
											"name": "handles",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Handle",
														"id": 133
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Handle",
															"id": 133
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 94,
									"character": 5
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								194
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								192,
								193
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								213,
								196,
								202,
								210
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Evented.ts",
							"line": 11,
							"character": 28
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "ResponseClass",
							"id": 306
						},
						{
							"type": "reference",
							"name": "Tunnel",
							"id": 2303
						}
					]
				},
				{
					"id": 215,
					"name": "CustomEventTypes",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 216,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"indexSignature": [
						{
							"id": 217,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 218,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T",
								"constraint": {
									"type": "reference",
									"name": "EventObject",
									"id": 219,
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Evented.ts",
							"line": 148,
							"character": 33
						}
					]
				},
				{
					"id": 219,
					"name": "EventObject",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The base event object, which provides a `type` property"
					},
					"typeParameter": [
						{
							"id": 220,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 221,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The type of the event"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 171,
									"character": 15
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								221
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Evented.ts",
							"line": 169,
							"character": 28
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "TunnelEventObject",
							"id": 2405
						}
					]
				},
				{
					"id": 232,
					"name": "EventType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/common/lib/Evented.ts",
							"line": 164,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "symbol"
							}
						]
					}
				},
				{
					"id": 223,
					"name": "EventedCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 224,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 225,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Evented.ts",
							"line": 136,
							"character": 27
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 226,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 227,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A callback that takes an `event` argument"
									},
									"parameters": [
										{
											"id": 228,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The event object\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "E",
												"constraint": {
													"type": "reference",
													"name": "EventObject",
													"id": 219,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 139,
									"character": 3
								}
							]
						}
					}
				},
				{
					"id": 229,
					"name": "EventedCallbackOrArray",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type which is either a targeted event listener or an array of listeners",
						"tags": [
							{
								"tag": "template",
								"text": "T The type of target for the events"
							},
							{
								"tag": "template",
								"text": "E The event type for the events\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 230,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 231,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Evented.ts",
							"line": 159,
							"character": 34
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "EventedCallback",
								"id": 223,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									},
									{
										"type": "typeParameter",
										"name": "E",
										"constraint": {
											"type": "reference",
											"name": "EventObject",
											"id": 219,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "T"
												}
											]
										}
									}
								]
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "EventedCallback",
									"id": 223,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T"
										},
										{
											"type": "typeParameter",
											"name": "E",
											"constraint": {
												"type": "reference",
												"name": "EventObject",
												"id": 219,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 222,
					"name": "regexMap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Map of computed regular expressions, keyed by string"
					},
					"sources": [
						{
							"fileName": "src/common/lib/Evented.ts",
							"line": 6,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "Map",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "RegExp"
							}
						]
					},
					"defaultValue": " new Map<string, RegExp>()"
				},
				{
					"id": 233,
					"name": "destroyed",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 234,
							"name": "destroyed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "No op function used to replace own, once instance has been destoryed"
							},
							"parameters": [
								{
									"id": 235,
									"name": "_handles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Handle",
												"id": 133
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Handle",
													"id": 133
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Handle",
								"id": 133
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Evented.ts",
							"line": 177,
							"character": 18
						}
					]
				},
				{
					"id": 236,
					"name": "isGlobMatch",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 237,
							"name": "isGlobMatch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Determines is the event type glob has been matched",
								"text": "Returns a boolean that indicates if the glob is matched\n"
							},
							"parameters": [
								{
									"id": 238,
									"name": "globString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 239,
									"name": "targetString",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Evented.ts",
							"line": 186,
							"character": 20
						}
					]
				},
				{
					"id": 240,
					"name": "noop",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 241,
							"name": "noop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "No operation function to replace own once instance is destoryed"
							},
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Evented.ts",
							"line": 211,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						188
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						215,
						219
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						232,
						223,
						229
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						222
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						233,
						236,
						240
					]
				}
			],
			"sources": [
				{
					"fileName": "src/common/lib/Evented.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"common/lib/Task\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/common/lib/Task.ts",
			"children": [
				{
					"id": 106,
					"name": "State",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "The internal state of a task"
					},
					"children": [
						{
							"id": 110,
							"name": "Canceled",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 560,
									"character": 10
								}
							],
							"defaultValue": "3"
						},
						{
							"id": 107,
							"name": "Fulfilled",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 557,
									"character": 11
								}
							],
							"defaultValue": "0"
						},
						{
							"id": 108,
							"name": "Pending",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 558,
									"character": 9
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 109,
							"name": "Rejected",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 559,
									"character": 10
								}
							],
							"defaultValue": "2"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								110,
								107,
								108,
								109
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Task.ts",
							"line": 556,
							"character": 16
						}
					]
				},
				{
					"id": 32,
					"name": "Task",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Task is an implementation of CancellablePromise."
					},
					"typeParameter": [
						{
							"id": 33,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 64,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Create a new task. Executor is run immediately. The canceler will be\ncalled when the task is canceled."
							},
							"signatures": [
								{
									"id": 65,
									"name": "new Task",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new task. Executor is run immediately. The canceler will be\ncalled when the task is canceled."
									},
									"parameters": [
										{
											"id": 66,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Method that initiates some task"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 67,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 68,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 69,
																	"name": "resolve",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 70,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"signatures": [
																				{
																					"id": 71,
																					"name": "__call",
																					"kind": 4096,
																					"kindString": "Call signature",
																					"flags": {},
																					"parameters": [
																						{
																							"id": 72,
																							"name": "value",
																							"kind": 32768,
																							"kindString": "Parameter",
																							"flags": {
																								"isOptional": true
																							},
																							"type": {
																								"type": "union",
																								"types": [
																									{
																										"type": "typeParameter",
																										"name": "T"
																									},
																									{
																										"type": "reference",
																										"name": "PromiseLike",
																										"typeArguments": [
																											{
																												"type": "typeParameter",
																												"name": "T"
																											}
																										]
																									}
																								]
																							}
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "void"
																					}
																				}
																			],
																			"sources": [
																				{
																					"fileName": "src/common/lib/Task.ts",
																					"line": 297,
																					"character": 14
																				}
																			]
																		}
																	}
																},
																{
																	"id": 73,
																	"name": "reject",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 74,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"signatures": [
																				{
																					"id": 75,
																					"name": "__call",
																					"kind": 4096,
																					"kindString": "Call signature",
																					"flags": {},
																					"parameters": [
																						{
																							"id": 76,
																							"name": "reason",
																							"kind": 32768,
																							"kindString": "Parameter",
																							"flags": {
																								"isOptional": true
																							},
																							"type": {
																								"type": "intrinsic",
																								"name": "any"
																							}
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "void"
																					}
																				}
																			],
																			"sources": [
																				{
																					"fileName": "src/common/lib/Task.ts",
																					"line": 298,
																					"character": 13
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/common/lib/Task.ts",
															"line": 296,
															"character": 13
														}
													]
												}
											}
										},
										{
											"id": 77,
											"name": "canceler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Method to call when the task is canceled\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 78,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 79,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 286,
									"character": 24
								}
							]
						},
						{
							"id": 34,
							"name": "__@toStringTag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Set for compatibility with Promise"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 41,
									"character": 31
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "Promise"
							},
							"implementationOf": {
								"type": "reference",
								"name": "CancellablePromise.__@toStringTag",
								"id": 31
							}
						},
						{
							"id": 80,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 81,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Immediately cancels this task if it has not already resolved. This Task\nand any descendants are synchronously set to the Canceled state and any\n`finally` added downstream from the canceled Task are invoked."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"implementationOf": {
										"type": "reference",
										"name": "CancellablePromise.cancel",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 384,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "CancellablePromise.cancel",
								"id": 4
							}
						},
						{
							"id": 82,
							"name": "catch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 83,
									"name": "catch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a callback to be invoked when the wrapped Promise is rejected."
									},
									"typeParameter": [
										{
											"id": 84,
											"name": "TResult",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 85,
											"name": "onRejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A function to call to handle the error. The parameter\nto the function will be the caught error.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 86,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 87,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 88,
																			"name": "reason",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "TResult"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "TResult"
																					}
																				]
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/common/lib/Task.ts",
																	"line": 397,
																	"character": 16
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "typeParameter",
														"name": "T"
													},
													{
														"type": "typeParameter",
														"name": "TResult"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 396,
									"character": 7
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "CancellablePromise.catch",
								"id": 6
							}
						},
						{
							"id": 89,
							"name": "finally",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 90,
									"name": "finally",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Allows for cleanup actions to be performed after resolution of a Promise."
									},
									"parameters": [
										{
											"id": 91,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 92,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 93,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/common/lib/Task.ts",
																	"line": 405,
																	"character": 20
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 405,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "CancellablePromise.finally",
								"id": 13
							}
						},
						{
							"id": 94,
							"name": "then",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 95,
									"name": "then",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a callback to be invoked when the Task resolves or is rejected."
									},
									"typeParameter": [
										{
											"id": 96,
											"name": "TResult1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 97,
											"name": "TResult2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 98,
											"name": "onFulfilled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A function to call to handle the resolution. The\nparamter to the function will be the resolved value, if any."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 99,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 100,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 101,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "typeParameter",
																				"name": "T"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "TResult1"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "TResult1"
																					}
																				]
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/common/lib/Task.ts",
																	"line": 437,
																	"character": 7
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 102,
											"name": "onRejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A function to call to handle the error. The parameter\nto the function will be the caught error.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 103,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 104,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 105,
																			"name": "reason",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "TResult2"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "TResult2"
																					}
																				]
																			},
																			{
																				"type": "intrinsic",
																				"name": "undefined"
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/common/lib/Task.ts",
																	"line": 441,
																	"character": 7
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "typeParameter",
														"name": "TResult1"
													},
													{
														"type": "typeParameter",
														"name": "TResult2"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 435,
									"character": 6
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "CancellablePromise.then",
								"id": 18
							}
						},
						{
							"id": 48,
							"name": "all",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"comment": {
								"shortText": "Return a Task that resolves when all of the passed in objects have\nresolved. When used with a key/value pair, the returned promise's\nargument is a key/value pair of the original keys with their resolved\nvalues.",
								"text": "```ts\nTask.all({ one: 1, two: 2 }).then(results => console.log(results));\n// { one: 1, two: 2 }\n```\n"
							},
							"signatures": [
								{
									"id": 49,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a Task that resolves when all of the passed in objects have\nresolved. When used with a key/value pair, the returned promise's\nargument is a key/value pair of the original keys with their resolved\nvalues.",
										"text": "```ts\nExtensiblePromise.all({ one: 1, two: 2 }).then(results => console.log(results));\n// { one: 1, two: 2 }\n```\n"
									},
									"typeParameter": [
										{
											"id": 50,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 51,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "An iterable of values to resolve, or a key/value pair of\nvalues to resolve. These can be Promises, ExtensiblePromises, or other\nobjects\n"
											},
											"type": {
												"type": "reference",
												"name": "DictionaryOfPromises",
												"id": 115,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 52,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 53,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 54,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/common/lib/Task.ts",
															"line": 103,
															"character": 57
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 55,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a Task that resolves when all of the passed in objects have\nresolved. When used with a key/value pair, the returned promise's\nargument is a key/value pair of the original keys with their resolved\nvalues.",
										"text": "```ts\nTask.all({ one: 1, two: 2 }).then(results => console.log(results));\n// { one: 1, two: 2 }\n```\n"
									},
									"typeParameter": [
										{
											"id": 56,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 57,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "An iterable of values to resolve, or a key/value pair of\nvalues to resolve. These can be Promises, ExtensiblePromises, or other\nobjects\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "unknown",
															"name": "T"
														},
														{
															"type": "reference",
															"name": "PromiseLike",
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "T"
																}
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										]
									}
								},
								{
									"id": 58,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a Task that resolves when all of the passed in objects have\nresolved. When used with a key/value pair, the returned promise's\nargument is a key/value pair of the original keys with their resolved\nvalues.",
										"text": "```ts\nTask.all({ one: 1, two: 2 }).then(results => console.log(results));\n// { one: 1, two: 2 }\n```\n"
									},
									"typeParameter": [
										{
											"id": 59,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 60,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "An iterable of values to resolve, or a key/value pair of\nvalues to resolve. These can be Promises, ExtensiblePromises, or other\nobjects\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "typeParameter",
														"name": "T"
													},
													{
														"type": "reference",
														"name": "PromiseLike",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										]
									}
								},
								{
									"id": 61,
									"name": "all",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a Task that resolves when all of the passed in objects have\nresolved. When used with a key/value pair, the returned promise's\nargument is a key/value pair of the original keys with their resolved\nvalues.",
										"text": "```ts\nTask.all({ one: 1, two: 2 }).then(results => console.log(results));\n// { one: 1, two: 2 }\n```\n"
									},
									"typeParameter": [
										{
											"id": 62,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 63,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "An iterable of values to resolve, or a key/value pair of\nvalues to resolve. These can be Promises, ExtensiblePromises, or other\nobjects\n"
											},
											"type": {
												"type": "reference",
												"name": "ListOfPromises",
												"id": 120,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 103,
									"character": 12
								},
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 120,
									"character": 12
								},
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 137,
									"character": 12
								},
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 154,
									"character": 12
								},
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 171,
									"character": 12
								}
							]
						},
						{
							"id": 35,
							"name": "race",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 36,
									"name": "race",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a Task that resolves when one of the passed in objects have\nresolved"
									},
									"typeParameter": [
										{
											"id": 37,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 38,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An iterable of values to resolve. These can be Promises,\nTasks, or other objects\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Iterable",
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	},
																	{
																		"type": "reference",
																		"name": "PromiseLike",
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T"
																			}
																		]
																	}
																]
															}
														]
													},
													{
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "unknown",
																	"name": "T"
																},
																{
																	"type": "reference",
																	"name": "PromiseLike",
																	"typeArguments": [
																		{
																			"type": "unknown",
																			"name": "T"
																		}
																	]
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 50,
									"character": 13
								}
							]
						},
						{
							"id": 39,
							"name": "reject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 40,
									"name": "reject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a rejected promise wrapped in a Task"
									},
									"typeParameter": [
										{
											"id": 41,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 42,
											"name": "reason",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The reason for the rejection\n"
											},
											"type": {
												"type": "reference",
												"name": "Error",
												"id": 690
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 63,
									"character": 15
								}
							]
						},
						{
							"id": 43,
							"name": "resolve",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isStatic": true,
								"isExported": true
							},
							"comment": {
								"shortText": "Return a resolved task."
							},
							"signatures": [
								{
									"id": 44,
									"name": "resolve",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a resolved task."
									},
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								},
								{
									"id": 45,
									"name": "resolve",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a resolved task."
									},
									"typeParameter": [
										{
											"id": 46,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 47,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The value to resolve with\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "typeParameter",
														"name": "T"
													},
													{
														"type": "reference",
														"name": "PromiseLike",
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 70,
									"character": 23
								},
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 77,
									"character": 23
								},
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 84,
									"character": 23
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								64
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								34
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								80,
								82,
								89,
								94,
								48,
								35,
								39,
								43
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Task.ts",
							"line": 39,
							"character": 25
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "CancellablePromise",
							"id": 2,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				},
				{
					"id": 2,
					"name": "CancellablePromise",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 3,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 30,
							"name": "Promise",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.promise.d.ts",
									"line": 152,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "PromiseConstructor"
							}
						},
						{
							"id": 31,
							"name": "__@toStringTag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
									"line": 169,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Promise.[Symbol.toStringTag]"
							}
						},
						{
							"id": 4,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Immediately cancels this promise if it has not already resolved. This\npromise and any descendants are synchronously stopped and any `finally`\ncallbacks added downstream from the canceled promise are invoked."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 6,
							"name": "catch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7,
									"name": "catch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a callback for only the rejection of the Promise.",
										"returns": "A CancellablePromise for the completion of the callback.\n"
									},
									"typeParameter": [
										{
											"id": 8,
											"name": "E",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 9,
											"name": "onrejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The callback to execute when the Promise is rejected."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 10,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 11,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 12,
																			"name": "reason",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "E"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "E"
																					}
																				]
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/common/lib/Task.ts",
																	"line": 15,
																	"character": 16
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "typeParameter",
														"name": "T"
													},
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Promise.catch"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 14,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Promise.catch"
							}
						},
						{
							"id": 13,
							"name": "finally",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 14,
									"name": "finally",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Allows for cleanup actions to be performed after resolution of this\npromise."
									},
									"parameters": [
										{
											"id": 15,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 16,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 17,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/common/lib/Task.ts",
																	"line": 22,
																	"character": 20
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Promise.finally"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 22,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Promise.finally"
							}
						},
						{
							"id": 18,
							"name": "then",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 19,
									"name": "then",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches callbacks for the resolution and/or rejection of the Promise.",
										"returns": "A CancellablePromise for the completion of which ever callback is executed.\n"
									},
									"typeParameter": [
										{
											"id": 20,
											"name": "V",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 21,
											"name": "E",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 22,
											"name": "onfulfilled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The callback to execute when the Promise is resolved."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 23,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 24,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 25,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "typeParameter",
																				"name": "T"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "V"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "V"
																					}
																				]
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/common/lib/Task.ts",
																	"line": 31,
																	"character": 17
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 26,
											"name": "onrejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The callback to execute when the Promise is rejected."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 27,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 28,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 29,
																			"name": "reason",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "E"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "E"
																					}
																				]
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/common/lib/Task.ts",
																	"line": 32,
																	"character": 16
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "typeParameter",
														"name": "V"
													},
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Promise.then"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 30,
									"character": 6
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Promise.then"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								30,
								31
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4,
								6,
								13,
								18
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Task.ts",
							"line": 1,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Promise",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "Task",
							"id": 32
						}
					]
				},
				{
					"id": 115,
					"name": "DictionaryOfPromises",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An object mapping keys to Promises or resolved values"
					},
					"typeParameter": [
						{
							"id": 116,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Task.ts",
							"line": 530,
							"character": 32
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 117,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": [
								{
									"id": 118,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 119,
											"name": "_",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "reference",
												"name": "PromiseLike",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Task.ts",
									"line": 530,
									"character": 43
								}
							]
						}
					}
				},
				{
					"id": 120,
					"name": "ListOfPromises",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A list of Promises or resolved values"
					},
					"typeParameter": [
						{
							"id": 121,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Task.ts",
							"line": 537,
							"character": 26
						}
					],
					"type": {
						"type": "reference",
						"name": "Iterable",
						"typeArguments": [
							{
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "T"
									},
									{
										"type": "reference",
										"name": "PromiseLike",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								]
							}
						]
					}
				},
				{
					"id": 126,
					"name": "isArrayLike",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 127,
							"name": "isArrayLike",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A type guard for checking if something is ArrayLike"
							},
							"parameters": [
								{
									"id": 128,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The value to type guard against\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "ArrayLike",
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Task.ts",
							"line": 568,
							"character": 20
						}
					]
				},
				{
					"id": 129,
					"name": "isIterable",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 130,
							"name": "isIterable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A type guard for checking if something has an Iterable interface"
							},
							"parameters": [
								{
									"id": 131,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The value to type guard against\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Iterable",
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Task.ts",
							"line": 577,
							"character": 19
						}
					]
				},
				{
					"id": 122,
					"name": "isPromiseLike",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 123,
							"name": "isPromiseLike",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if a given value has a `then` method."
							},
							"typeParameter": [
								{
									"id": 124,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 125,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The value to check if is PromiseLike\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "PromiseLike",
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T"
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Task.ts",
							"line": 544,
							"character": 29
						}
					]
				},
				{
					"id": 111,
					"name": "isTask",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 112,
							"name": "isTask",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A type guard that determines if `value` is a `Task`"
							},
							"typeParameter": [
								{
									"id": 113,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 114,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The value to guard\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Task",
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T"
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/Task.ts",
							"line": 503,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						106
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						32
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						115,
						120
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						126,
						129,
						122,
						111
					]
				}
			],
			"sources": [
				{
					"fileName": "src/common/lib/Task.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 242,
			"name": "\"common/lib/global\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/common/lib/global.ts",
			"children": [
				{
					"id": 243,
					"name": "globalObject",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/common/lib/global.ts",
							"line": 1,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " (function(): any {\n  if (typeof window !== 'undefined') {\n    // window is defined in browsers\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    // global spec defines a reference to the global object called 'global'\n    // https://github.com/tc39/proposal-global\n    // `global` is also defined in NodeJS\n    return global;\n  }\n  if (typeof self !== 'undefined') {\n    // self is defined in WebWorkers\n    return self;\n  }\n})()"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						243
					]
				}
			],
			"sources": [
				{
					"fileName": "src/common/lib/global.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 244,
			"name": "\"common/lib/request\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/common/lib/request.ts",
			"children": [
				{
					"id": 291,
					"name": "HeadersClass",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 292,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 293,
									"name": "new HeadersClass",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 294,
											"name": "headers",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 295,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 296,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 297,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/common/lib/request.ts",
															"line": 146,
															"character": 22
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HeadersClass",
										"id": 291
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 144,
									"character": 42
								}
							]
						},
						{
							"id": 298,
							"name": "all",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 299,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 300,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 301,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 302,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 150,
									"character": 9
								}
							]
						},
						{
							"id": 303,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 304,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 305,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 161,
									"character": 5
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								292
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								298
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								303
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 143,
							"character": 18
						}
					]
				},
				{
					"id": 306,
					"name": "ResponseClass",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"typeParameter": [
						{
							"id": 307,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 326,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 327,
							"name": "O",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 308,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 309,
									"name": "new ResponseClass",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 310,
											"name": "response",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AxiosResponse",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponseClass",
										"id": 306
									},
									"overwrites": {
										"type": "reference",
										"name": "Evented.__constructor",
										"id": 194
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 170,
									"character": 64
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Evented.__constructor",
								"id": 194
							}
						},
						{
							"id": 328,
							"name": "__typeMap__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 20,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "M",
								"id": 189
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.__typeMap__",
								"id": 192
							}
						},
						{
							"id": 329,
							"name": "listenersMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"comment": {
								"shortText": "map of listeners keyed by event type"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 24,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "ProgressEvent"
												}
											}
										]
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EventedCallback",
											"id": 223,
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "T"
												},
												{
													"type": "typeParameter",
													"name": "O",
													"constraint": {
														"type": "reference",
														"name": "EventObject",
														"id": 219,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												}
											]
										}
									}
								]
							},
							"defaultValue": " new Map()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.listenersMap",
								"id": 193
							}
						},
						{
							"id": 311,
							"name": "headers",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"comment": {
								"shortText": "Header keys will always be lowercase"
							},
							"getSignature": [
								{
									"id": 312,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Header keys will always be lowercase"
									},
									"type": {
										"type": "reference",
										"name": "Headers",
										"id": 271
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 179,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Response.headers",
								"id": 280
							}
						},
						{
							"id": 313,
							"name": "ok",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 314,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 183,
									"character": 8
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Response.ok",
								"id": 281
							}
						},
						{
							"id": 315,
							"name": "status",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 316,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 188,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Response.status",
								"id": 282
							}
						},
						{
							"id": 317,
							"name": "statusText",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 318,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 192,
									"character": 16
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Response.statusText",
								"id": 283
							}
						},
						{
							"id": 319,
							"name": "arrayBuffer",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 320,
									"name": "arrayBuffer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "ArrayBuffer"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "Response.arrayBuffer",
										"id": 285
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 196,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Response.arrayBuffer",
								"id": 284
							}
						},
						{
							"id": 347,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 348,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Destrpys all handers registered for the instance",
										"text": "Returns a promise that resolves once all handles have been destroyed\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.destroy",
										"id": 213
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 113,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.destroy",
								"id": 213
							}
						},
						{
							"id": 330,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 331,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the event object for the specified type"
									},
									"typeParameter": [
										{
											"id": 332,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "ProgressEvent"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 333,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the event to emit\n"
											},
											"type": {
												"type": "unknown",
												"name": "M[K]"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								},
								{
									"id": 334,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 335,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "O",
												"constraint": {
													"type": "reference",
													"name": "EventObject",
													"id": 219,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 38,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 39,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 40,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.emit",
								"id": 196
							}
						},
						{
							"id": 321,
							"name": "json",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 322,
									"name": "json",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 323,
											"name": "R",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "R"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "Response.json",
										"id": 287
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 215,
									"character": 6
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Response.json",
								"id": 286
							}
						},
						{
							"id": 336,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 337,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catch all handler for various call signatures. The signatures are defined in\n`BaseEventedEvents`.  You can add your own event type -> handler types by extending\n`BaseEventedEvents`.  See example for details."
									},
									"typeParameter": [
										{
											"id": 338,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "ProgressEvent"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 339,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "K",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "ProgressEvent"
													}
												}
											}
										},
										{
											"id": 340,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"name": "ProgressEvent"
															}
														}
													},
													{
														"type": "unknown",
														"name": "M[K]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								},
								{
									"id": 341,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 342,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										},
										{
											"id": 343,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													},
													{
														"type": "typeParameter",
														"name": "O",
														"constraint": {
															"type": "reference",
															"name": "EventObject",
															"id": 219,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "T"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 66,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 70,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 71,
									"character": 4
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.on",
								"id": 202
							}
						},
						{
							"id": 344,
							"name": "own",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 345,
									"name": "own",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register handles for the instance that will be destroyed when\n`this.destroy` is called",
										"text": "Returns a handle for the handle, removes the handle for the instance and\ncalls destroy\n"
									},
									"parameters": [
										{
											"id": 346,
											"name": "handles",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Handle",
														"id": 133
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Handle",
															"id": 133
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.own",
										"id": 210
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 94,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.own",
								"id": 210
							}
						},
						{
							"id": 324,
							"name": "text",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 325,
									"name": "text",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "Response.text",
										"id": 290
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 219,
									"character": 6
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Response.text",
								"id": 289
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								308
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								328,
								329
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								311,
								313,
								315,
								317
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								319,
								347,
								330,
								321,
								336,
								344,
								324
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 166,
							"character": 19
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Evented",
							"id": 188,
							"typeArguments": [
								{
									"type": "reference",
									"name": "ProgressEvent",
									"id": 266
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Response",
							"id": 279
						}
					]
				},
				{
					"id": 271,
					"name": "Headers",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 272,
							"name": "all",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 50,
									"character": 5
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 273,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 274,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 275,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/common/lib/request.ts",
											"line": 50,
											"character": 6
										}
									]
								}
							}
						},
						{
							"id": 276,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 277,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 278,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 51,
									"character": 5
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								272
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								276
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 49,
							"character": 24
						}
					]
				},
				{
					"id": 266,
					"name": "ProgressEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 269,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 270,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 268,
							"name": "bytes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 45,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 267,
							"name": "total",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 44,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								268,
								267
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 43,
							"character": 30
						}
					]
				},
				{
					"id": 245,
					"name": "RequestOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 246,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 30,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 247,
							"name": "followRedirects",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 31,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 248,
							"name": "handleAs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 32,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "text"
									},
									{
										"type": "stringLiteral",
										"value": "json"
									}
								]
							}
						},
						{
							"id": 249,
							"name": "headers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 33,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 250,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 251,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 252,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 253,
							"name": "method",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 34,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "RequestMethod",
								"id": 349
							}
						},
						{
							"id": 262,
							"name": "onDownloadProgress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 40,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 263,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 264,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 265,
															"name": "progressEvent",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 254,
							"name": "password",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 35,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 259,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 37,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 255,
							"name": "query",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 36,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 256,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 257,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 258,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/common/lib/request.ts",
													"line": 36,
													"character": 18
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 260,
							"name": "user",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 38,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 261,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 39,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								246,
								247,
								248,
								249,
								253,
								262,
								254,
								259,
								255,
								260,
								261
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 29,
							"character": 31
						}
					]
				},
				{
					"id": 279,
					"name": "Response",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 280,
							"name": "headers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 55,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Headers",
								"id": 271
							}
						},
						{
							"id": 281,
							"name": "ok",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 56,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 282,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 57,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 283,
							"name": "statusText",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 58,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 284,
							"name": "arrayBuffer",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 285,
									"name": "arrayBuffer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "ArrayBuffer"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 59,
									"character": 13
								}
							]
						},
						{
							"id": 286,
							"name": "json",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 287,
									"name": "json",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 288,
											"name": "R",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "R"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 60,
									"character": 6
								}
							]
						},
						{
							"id": 289,
							"name": "text",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 290,
									"name": "text",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/request.ts",
									"line": 61,
									"character": 6
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								280,
								281,
								282,
								283
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								284,
								286,
								289
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 54,
							"character": 25
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "ResponseClass",
							"id": 306
						}
					]
				},
				{
					"id": 349,
					"name": "RequestMethod",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 15,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "delete"
							},
							{
								"type": "stringLiteral",
								"value": "DELETE"
							},
							{
								"type": "stringLiteral",
								"value": "get"
							},
							{
								"type": "stringLiteral",
								"value": "GET"
							},
							{
								"type": "stringLiteral",
								"value": "head"
							},
							{
								"type": "stringLiteral",
								"value": "HEAD"
							},
							{
								"type": "stringLiteral",
								"value": "options"
							},
							{
								"type": "stringLiteral",
								"value": "OPTIONS"
							},
							{
								"type": "stringLiteral",
								"value": "post"
							},
							{
								"type": "stringLiteral",
								"value": "POST"
							},
							{
								"type": "stringLiteral",
								"value": "put"
							},
							{
								"type": "stringLiteral",
								"value": "PUT"
							}
						]
					}
				},
				{
					"id": 363,
					"name": "getArrayBufferFromBlob",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 364,
							"name": "getArrayBufferFromBlob",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 365,
									"name": "blob",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Blob"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ArrayBuffer"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 266,
							"character": 31
						}
					]
				},
				{
					"id": 366,
					"name": "getArrayBufferFromText",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 367,
							"name": "getArrayBufferFromText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 368,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ArrayBuffer"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 273,
							"character": 31
						}
					]
				},
				{
					"id": 356,
					"name": "getFileReaderPromise",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 357,
							"name": "getFileReaderPromise",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 358,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "ArrayBuffer"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 359,
									"name": "reader",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FileReader"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "reference",
													"name": "ArrayBuffer"
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 246,
							"character": 29
						}
					]
				},
				{
					"id": 369,
					"name": "getTextFromArrayBuffer",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 370,
							"name": "getTextFromArrayBuffer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 371,
									"name": "buffer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ArrayBuffer"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 277,
							"character": 31
						}
					]
				},
				{
					"id": 360,
					"name": "getTextFromBlob",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 361,
							"name": "getTextFromBlob",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 362,
									"name": "blob",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Blob"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 259,
							"character": 24
						}
					]
				},
				{
					"id": 372,
					"name": "isArrayBuffer",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 373,
							"name": "isArrayBuffer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 374,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "ArrayBuffer"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 288,
							"character": 22
						}
					]
				},
				{
					"id": 375,
					"name": "isBlob",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 376,
							"name": "isBlob",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 377,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Blob"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 294,
							"character": 15
						}
					]
				},
				{
					"id": 378,
					"name": "isBuffer",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 379,
							"name": "isBuffer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 380,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Buffer"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 301,
							"character": 17
						}
					]
				},
				{
					"id": 354,
					"name": "noValidation",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 355,
							"name": "noValidation",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 242,
							"character": 21
						}
					]
				},
				{
					"id": 350,
					"name": "request",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 351,
							"name": "request",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 352,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 353,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RequestOptions",
										"id": 245
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Response",
										"id": 279
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 64,
							"character": 31
						}
					]
				},
				{
					"id": 381,
					"name": "serializeParams",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 382,
							"name": "serializeParams",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 383,
									"name": "params",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 384,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 385,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 386,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/common/lib/request.ts",
													"line": 305,
													"character": 32
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/request.ts",
							"line": 305,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						291,
						306
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						271,
						266,
						245,
						279
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						349
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						363,
						366,
						356,
						369,
						360,
						372,
						375,
						378,
						354,
						350,
						381
					]
				}
			],
			"sources": [
				{
					"fileName": "src/common/lib/request.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 132,
			"name": "\"common/lib/util\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/common/lib/util.ts",
			"children": [
				{
					"id": 133,
					"name": "Handle",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A consistent API to manage how callers can cleanup when doing a function."
					},
					"children": [
						{
							"id": 134,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 135,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perform the destruction/cleanup logic associated with this handle"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/util.ts",
									"line": 8,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								134
							]
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/util.ts",
							"line": 4,
							"character": 23
						}
					]
				},
				{
					"id": 178,
					"name": "_deepMixin",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 179,
							"name": "_deepMixin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 180,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__type"
									}
								},
								{
									"id": 181,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__type"
									}
								}
							],
							"parameters": [
								{
									"id": 182,
									"name": "kwArgs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 183,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 186,
													"name": "copied",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/common/lib/util.ts",
															"line": 117,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												},
												{
													"id": 184,
													"name": "sources",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/common/lib/util.ts",
															"line": 115,
															"character": 9
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "intrinsic",
																	"name": "undefined"
																},
																{
																	"type": "intrinsic",
																	"name": "null"
																},
																{
																	"type": "unknown",
																	"name": "U"
																}
															]
														}
													}
												},
												{
													"id": 185,
													"name": "target",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/common/lib/util.ts",
															"line": 116,
															"character": 8
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"name": "__type"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														186,
														184,
														185
													]
												}
											],
											"sources": [
												{
													"fileName": "src/common/lib/util.ts",
													"line": 114,
													"character": 55
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "__type"
										}
									},
									{
										"type": "typeParameter",
										"name": "U",
										"constraint": {
											"type": "reference",
											"name": "__type"
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/util.ts",
							"line": 114,
							"character": 19
						}
					]
				},
				{
					"id": 171,
					"name": "copyArray",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 172,
							"name": "copyArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 173,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 174,
									"name": "array",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "T"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/util.ts",
							"line": 98,
							"character": 18
						}
					]
				},
				{
					"id": 141,
					"name": "createCompositeHandle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 142,
							"name": "createCompositeHandle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a single handle that can be used to destroy multiple handles\nsimultaneously."
							},
							"parameters": [
								{
									"id": 143,
									"name": "handles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"comment": {
										"text": "An array of handles with `destroy` methods\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Handle",
								"id": 133
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/util.ts",
							"line": 37,
							"character": 37
						}
					]
				},
				{
					"id": 136,
					"name": "createHandle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 137,
							"name": "createHandle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an object with a destroy method that, when called, calls the\npassed-in destructor. This is intended to provide a unified interface for\ncreating \"remove\" / \"destroy\" handlers for event listeners, timers, etc."
							},
							"parameters": [
								{
									"id": 138,
									"name": "destructor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A function that will be called when the handle's `destroy`\nmethod is invoked\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 139,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 140,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/common/lib/util.ts",
													"line": 19,
													"character": 40
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Handle",
								"id": 133
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/util.ts",
							"line": 19,
							"character": 28
						}
					]
				},
				{
					"id": 144,
					"name": "deepMixin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 145,
							"name": "deepMixin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deeply mix the properties of two objects"
							},
							"typeParameter": [
								{
									"id": 146,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 147,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"parameters": [
								{
									"id": 148,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								},
								{
									"id": 149,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "U",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									},
									{
										"type": "typeParameter",
										"name": "U",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								]
							}
						},
						{
							"id": 150,
							"name": "deepMixin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 151,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 152,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 153,
									"name": "V",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"parameters": [
								{
									"id": 154,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								},
								{
									"id": 155,
									"name": "source1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "U",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								},
								{
									"id": 156,
									"name": "source2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "V",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									},
									{
										"type": "typeParameter",
										"name": "U",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									},
									{
										"type": "typeParameter",
										"name": "V",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/util.ts",
							"line": 46,
							"character": 25
						},
						{
							"fileName": "src/common/lib/util.ts",
							"line": 50,
							"character": 25
						},
						{
							"fileName": "src/common/lib/util.ts",
							"line": 55,
							"character": 25
						}
					]
				},
				{
					"id": 157,
					"name": "duplicate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 158,
							"name": "duplicate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new object using the provided source's prototype as the prototype\nfor the new object, and then deep copies the provided source's values into\nthe new target."
							},
							"typeParameter": [
								{
									"id": 159,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"parameters": [
								{
									"id": 160,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the object to duplicate\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T",
								"constraint": {
									"type": "intrinsic",
									"name": "object"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/util.ts",
							"line": 69,
							"character": 25
						}
					]
				},
				{
					"id": 161,
					"name": "partial",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 162,
							"name": "partial",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function which invokes the given function with the given arguments\nprepended to its argument list. Like `Function.prototype.bind`, but does not\nalter execution context."
							},
							"parameters": [
								{
									"id": 163,
									"name": "targetFunction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The function that needs to be bound"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 164,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 165,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 166,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/common/lib/util.ts",
													"line": 84,
													"character": 17
												}
											]
										}
									}
								},
								{
									"id": 167,
									"name": "suppliedArgs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"comment": {
										"text": "An optional array of arguments to prepend to the\n`targetFunction` arguments list\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 168,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 169,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 170,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/common/lib/util.ts",
											"line": 86,
											"character": 2
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/util.ts",
							"line": 83,
							"character": 23
						}
					]
				},
				{
					"id": 175,
					"name": "shouldDeepCopyObject",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 176,
							"name": "shouldDeepCopyObject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 177,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Object"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/common/lib/util.ts",
							"line": 110,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						133
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						178,
						171,
						141,
						136,
						144,
						157,
						161,
						175
					]
				}
			],
			"sources": [
				{
					"fileName": "src/common/lib/util.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7794,
			"name": "\"core/bin/intern\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/bin/intern.ts",
			"children": [
				{
					"id": 7795,
					"name": "printHelp",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 7796,
							"name": "printHelp",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 7797,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 7798,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/bin/intern.ts",
							"line": 58,
							"character": 18
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						7795
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/bin/intern.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7790,
			"name": "\"core/index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/index.ts",
			"comment": {
				"shortText": "This is the default public API for Intern. Since most of Intern's public API\nis accessible through the [[lib/executors/Executor.Executor]] classes, this\nmodule simply exports a reference to the global executor instance."
			},
			"children": [
				{
					"id": 7792,
					"name": "__global",
					"kind": 2,
					"kindString": "Module",
					"flags": {},
					"children": [
						{
							"id": 7793,
							"name": "intern",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true,
								"isConst": true
							},
							"comment": {
								"shortText": "Intern installs an instance of an Executor subclass (Node in Node.js, or\nBrowser in a browser environment) on a global `intern` constant."
							},
							"sources": [
								{
									"fileName": "src/core/index.ts",
									"line": 18,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "NodeExecutor"
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								7793
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/index.ts",
							"line": 13,
							"character": 14
						}
					]
				},
				{
					"id": 7791,
					"name": "intern",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/index.ts",
							"line": 10,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Node",
						"id": 7070
					},
					"defaultValue": " (global.intern = new NodeExecutor())"
				}
			],
			"groups": [
				{
					"title": "Modules",
					"kind": 2,
					"children": [
						7792
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						7791
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4437,
			"name": "\"core/lib/BenchmarkSuite\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/BenchmarkSuite.ts",
			"children": [
				{
					"id": 4438,
					"name": "BenchmarkSuite",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "BenchmarkSuite is a specialization of [[lib/Suite]] that manages\n[[lib/BenchmarkTest|BenchmarkTests]]."
					},
					"children": [
						{
							"id": 4442,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4443,
									"name": "new BenchmarkSuite",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 4444,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BenchmarkSuiteOptions",
												"id": 4522
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkSuite",
										"id": 4438
									},
									"overwrites": {
										"type": "reference",
										"name": "Suite.__constructor",
										"id": 3581
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkSuite.ts",
									"line": 20,
									"character": 45
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Suite.__constructor",
								"id": 3581
							}
						},
						{
							"id": 4445,
							"name": "after",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run after all the suite's tests have completed"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 15,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SuiteLifecycleFunction",
										"id": 3636
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.after",
								"id": 3567
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.after",
								"id": 4513
							}
						},
						{
							"id": 4446,
							"name": "afterEach",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run after each test has completed"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 20,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.afterEach",
								"id": 3568
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.afterEach",
								"id": 4514
							}
						},
						{
							"id": 4439,
							"name": "afterEachLoop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A function that is run after each test call by benchmark.js"
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkSuite.ts",
									"line": 15,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.afterEachLoop",
								"id": 4512
							}
						},
						{
							"id": 4447,
							"name": "async",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A convenience function that generates and returns a special\n[[lib/Deferred.Deferred]] that can be used for asynchronous testing"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 26,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4448,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 4449,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 4450,
															"name": "timeout",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Deferred",
														"id": 3453,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "void"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/Suite.ts",
													"line": 26,
													"character": 8
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.async",
								"id": 3569
							}
						},
						{
							"id": 4451,
							"name": "before",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run before any of this suite's tests are\nstarted"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 32,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SuiteLifecycleFunction",
										"id": 3636
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.before",
								"id": 3573
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.before",
								"id": 4516
							}
						},
						{
							"id": 4452,
							"name": "beforeEach",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run before each test"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 37,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.beforeEach",
								"id": 3574
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.beforeEach",
								"id": 4517
							}
						},
						{
							"id": 4440,
							"name": "beforeEachLoop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A function that is run before each test call by benchmark.js"
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkSuite.ts",
									"line": 18,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.beforeEachLoop",
								"id": 4511
							}
						},
						{
							"id": 4453,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The error that caused this suite to fail"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 40,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "InternError",
										"id": 3473
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.error",
								"id": 3575
							}
						},
						{
							"id": 4454,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This suite's parent Suite"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 43,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Suite",
										"id": 3566
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.parent",
								"id": 3576
							}
						},
						{
							"id": 4455,
							"name": "publishAfterSetup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, the suite will emit a suiteStart event after the `before`\ncallback has finished, and will emit a suiteEnd event before the `after`\ncallback has finished."
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 50,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.publishAfterSetup",
								"id": 3577
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.publishAfterSetup",
								"id": 4520
							}
						},
						{
							"id": 4456,
							"name": "skipped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The reason why this suite was skipped"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 53,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.skipped",
								"id": 3578
							}
						},
						{
							"id": 4441,
							"name": "tests",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkSuite.ts",
									"line": 20,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "reference",
											"name": "BenchmarkTest",
											"id": 3979
										},
										{
											"type": "reference",
											"name": "BenchmarkSuite",
											"id": 4438
										}
									]
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "Suite.tests",
								"id": 3579
							}
						},
						{
							"id": 4457,
							"name": "timeElapsed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The time required to run all the tests in this suite"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 59,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.timeElapsed",
								"id": 3580
							}
						},
						{
							"id": 4458,
							"name": "bail",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A flag used to indicate whether a test run should stop after a failed\ntest."
							},
							"getSignature": [
								{
									"id": 4459,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "A flag used to indicate whether a test run should stop after a failed\ntest."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.bail",
										"id": 3584
									}
								}
							],
							"setSignature": [
								{
									"id": 4460,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "A flag used to indicate whether a test run should stop after a failed\ntest."
									},
									"parameters": [
										{
											"id": 4461,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.bail",
										"id": 3584
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 95,
									"character": 10
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 99,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.bail",
								"id": 3584
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.bail",
								"id": 4515
							}
						},
						{
							"id": 4462,
							"name": "executor",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The executor used to run this Suite."
							},
							"getSignature": [
								{
									"id": 4463,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The executor used to run this Suite."
									},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.executor",
										"id": 3588
									}
								}
							],
							"setSignature": [
								{
									"id": 4464,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The executor used to run this Suite."
									},
									"parameters": [
										{
											"id": 4465,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.executor",
										"id": 3588
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 106,
									"character": 14
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 111,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.executor",
								"id": 3588
							}
						},
						{
							"id": 4466,
							"name": "grep",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A regular expression used to filter, by test ID, which tests are run."
							},
							"getSignature": [
								{
									"id": 4467,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "A regular expression used to filter, by test ID, which tests are run."
									},
									"type": {
										"type": "reference",
										"name": "RegExp"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.grep",
										"id": 3592
									}
								}
							],
							"setSignature": [
								{
									"id": 4468,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "A regular expression used to filter, by test ID, which tests are run."
									},
									"parameters": [
										{
											"id": 4469,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegExp"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.grep",
										"id": 3592
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 123,
									"character": 10
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 127,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.grep",
								"id": 3592
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.grep",
								"id": 4518
							}
						},
						{
							"id": 4494,
							"name": "hasParent",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not this suite has a parent (for parity with serialized\nSuites)."
							},
							"getSignature": [
								{
									"id": 4495,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not this suite has a parent (for parity with serialized\nSuites)."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.hasParent",
										"id": 3620
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 271,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.hasParent",
								"id": 3620
							}
						},
						{
							"id": 4474,
							"name": "id",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The unique identifier of the suite, assuming all combinations of suite +\ntest are unique."
							},
							"getSignature": [
								{
									"id": 4475,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of the suite, assuming all combinations of suite +\ntest are unique."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.id",
										"id": 3600
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 150,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.id",
								"id": 3600
							}
						},
						{
							"id": 4470,
							"name": "name",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This suite's name"
							},
							"getSignature": [
								{
									"id": 4471,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "This suite's name"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.name",
										"id": 3596
									}
								}
							],
							"setSignature": [
								{
									"id": 4472,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "This suite's name"
									},
									"parameters": [
										{
											"id": 4473,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.name",
										"id": 3596
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 135,
									"character": 10
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 139,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.name",
								"id": 3596
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.name",
								"id": 4519
							}
						},
						{
							"id": 4490,
							"name": "numFailedTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this test suite and any sub-suites that\nfailed."
							},
							"getSignature": [
								{
									"id": 4491,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this test suite and any sub-suites that\nfailed."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.numFailedTests",
										"id": 3616
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 241,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.numFailedTests",
								"id": 3616
							}
						},
						{
							"id": 4488,
							"name": "numPassedTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this test suite that passed."
							},
							"getSignature": [
								{
									"id": 4489,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this test suite that passed."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.numPassedTests",
										"id": 3614
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 226,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.numPassedTests",
								"id": 3614
							}
						},
						{
							"id": 4492,
							"name": "numSkippedTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this test suite and any sub-suites that were\nskipped."
							},
							"getSignature": [
								{
									"id": 4493,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this test suite and any sub-suites that were\nskipped."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.numSkippedTests",
										"id": 3618
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 256,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.numSkippedTests",
								"id": 3618
							}
						},
						{
							"id": 4486,
							"name": "numTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this suite and any sub-suites. To get only\nthe number of tests for this suite, look at `this.tests.length`."
							},
							"getSignature": [
								{
									"id": 4487,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this suite and any sub-suites. To get only\nthe number of tests for this suite, look at `this.tests.length`."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.numTests",
										"id": 3612
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 214,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.numTests",
								"id": 3612
							}
						},
						{
							"id": 4476,
							"name": "parentId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The unique identifier of the suite's parent."
							},
							"getSignature": [
								{
									"id": 4477,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of the suite's parent."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.parentId",
										"id": 3602
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 164,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.parentId",
								"id": 3602
							}
						},
						{
							"id": 4478,
							"name": "remote",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The WebDriver interface for driving a remote environment. This value is\nonly guaranteed to exist from the before/beforeEach/afterEach/after and\ntest methods, since environments are not instantiated until they are\nactually ready to be tested against."
							},
							"getSignature": [
								{
									"id": 4479,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The WebDriver interface for driving a remote environment. This value is\nonly guaranteed to exist from the before/beforeEach/afterEach/after and\ntest methods, since environments are not instantiated until they are\nactually ready to be tested against."
									},
									"type": {
										"type": "reference",
										"name": "Remote",
										"id": 7283
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.remote",
										"id": 3604
									}
								}
							],
							"setSignature": [
								{
									"id": 4480,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The WebDriver interface for driving a remote environment. This value is\nonly guaranteed to exist from the before/beforeEach/afterEach/after and\ntest methods, since environments are not instantiated until they are\nactually ready to be tested against."
									},
									"parameters": [
										{
											"id": 4481,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Remote",
												"id": 7283
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.remote",
										"id": 3604
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 177,
									"character": 12
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 183,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.remote",
								"id": 3604
							}
						},
						{
							"id": 4482,
							"name": "sessionId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The sessionId of the environment in which the suite executed."
							},
							"getSignature": [
								{
									"id": 4483,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The sessionId of the environment in which the suite executed."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.sessionId",
										"id": 3608
									}
								}
							],
							"setSignature": [
								{
									"id": 4484,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The sessionId of the environment in which the suite executed."
									},
									"parameters": [
										{
											"id": 4485,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.sessionId",
										"id": 3608
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 193,
									"character": 15
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 206,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.sessionId",
								"id": 3608
							}
						},
						{
							"id": 4496,
							"name": "timeout",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 4497,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.timeout",
										"id": 3622
									}
								}
							],
							"setSignature": [
								{
									"id": 4498,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 4499,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.timeout",
										"id": 3622
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 275,
									"character": 13
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 285,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.timeout",
								"id": 3622
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkSuiteProperties.timeout",
								"id": 4521
							}
						},
						{
							"id": 4500,
							"name": "add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4501,
									"name": "add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a test or suite to this suite."
									},
									"parameters": [
										{
											"id": 4502,
											"name": "suiteOrTest",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Suite",
														"id": 3566
													},
													{
														"type": "reference",
														"name": "Test",
														"id": 3484
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.add",
										"id": 3626
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 292,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.add",
								"id": 3626
							}
						},
						{
							"id": 4503,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4504,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs test suite in order:",
										"text": "* before\n* (for each test)\n  * beforeEach\n  * test\n  * afterEach\n* after\n\nIf before, beforeEach, afterEach, or after throw, the suite itself will\nbe marked as failed and no further tests in the suite will be executed.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.run",
										"id": 3629
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 356,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.run",
								"id": 3629
							}
						},
						{
							"id": 4505,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4506,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips this suite.",
										"text": "Calling this function will cause all remaining tests in the suite to be\nskipped. If a message was provided, a reporter may report the suite’s\ntests as skipped. Skipped tests are not treated as passing or failing.\n\nIf this method is called from a test function (as this.parent.skip()),\nthe test will be immediately halted, just as if the test’s own skip\nmethod were called.\n"
									},
									"parameters": [
										{
											"id": 4507,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If provided, will be stored in this suite's `skipped`\nproperty.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"suite skipped\""
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.skip",
										"id": 3631
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 728,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.skip",
								"id": 3631
							}
						},
						{
							"id": 4508,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4509,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.toJSON",
										"id": 3634
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 735,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.toJSON",
								"id": 3634
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								4442
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4445,
								4446,
								4439,
								4447,
								4451,
								4452,
								4440,
								4453,
								4454,
								4455,
								4456,
								4441,
								4457
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								4458,
								4462,
								4466,
								4494,
								4474,
								4470,
								4490,
								4488,
								4492,
								4486,
								4476,
								4478,
								4482,
								4496
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4500,
								4503,
								4505,
								4508
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkSuite.ts",
							"line": 12,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Suite",
							"id": 3566
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "SuiteProperties",
							"id": 3645
						},
						{
							"type": "reference",
							"name": "BenchmarkSuiteProperties",
							"id": 4510
						}
					]
				},
				{
					"id": 4510,
					"name": "BenchmarkSuiteProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4513,
							"name": "after",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 800,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SuiteLifecycleFunction",
										"id": 3636
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SuiteProperties.after",
								"id": 3646
							}
						},
						{
							"id": 4514,
							"name": "afterEach",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 801,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SuiteProperties.afterEach",
								"id": 3647
							}
						},
						{
							"id": 4512,
							"name": "afterEachLoop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkSuite.ts",
									"line": 29,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4515,
							"name": "bail",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 802,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SuiteProperties.bail",
								"id": 3648
							}
						},
						{
							"id": 4516,
							"name": "before",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 803,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SuiteLifecycleFunction",
										"id": 3636
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SuiteProperties.before",
								"id": 3649
							}
						},
						{
							"id": 4517,
							"name": "beforeEach",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 804,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SuiteProperties.beforeEach",
								"id": 3650
							}
						},
						{
							"id": 4511,
							"name": "beforeEachLoop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkSuite.ts",
									"line": 28,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4518,
							"name": "grep",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 805,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "RegExp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SuiteProperties.grep",
								"id": 3651
							}
						},
						{
							"id": 4519,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 806,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SuiteProperties.name",
								"id": 3652
							}
						},
						{
							"id": 4520,
							"name": "publishAfterSetup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 807,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SuiteProperties.publishAfterSetup",
								"id": 3653
							}
						},
						{
							"id": 4521,
							"name": "timeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 808,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SuiteProperties.timeout",
								"id": 3654
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4513,
								4514,
								4512,
								4515,
								4516,
								4517,
								4511,
								4518,
								4519,
								4520,
								4521
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkSuite.ts",
							"line": 27,
							"character": 41
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "SuiteProperties",
							"id": 3645
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "BenchmarkSuite",
							"id": 4438
						}
					]
				},
				{
					"id": 4522,
					"name": "BenchmarkSuiteOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkSuite.ts",
							"line": 32,
							"character": 33
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Partial",
								"typeArguments": [
									{
										"type": "reference",
										"name": "BenchmarkSuiteProperties",
										"id": 4510
									}
								]
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 4523,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 4524,
											"name": "name",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/BenchmarkSuite.ts",
													"line": 33,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4525,
											"name": "parent",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/BenchmarkSuite.ts",
													"line": 34,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										},
										{
											"id": 4526,
											"name": "tests",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/BenchmarkSuite.ts",
													"line": 35,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "BenchmarkTest",
															"id": 3979
														},
														{
															"type": "reference",
															"name": "BenchmarkSuite",
															"id": 4438
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												4524,
												4525,
												4526
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/BenchmarkSuite.ts",
											"line": 32,
											"character": 71
										}
									]
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						4438
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						4510
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						4522
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/BenchmarkSuite.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3978,
			"name": "\"core/lib/BenchmarkTest\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/BenchmarkTest.ts",
			"children": [
				{
					"id": 3979,
					"name": "BenchmarkTest",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "BenchmarkTest wraps a Benchmark.js Benchmark, mapping its API to that used by\n[[lib/Test]]."
					},
					"children": [
						{
							"id": 3982,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3983,
									"name": "new BenchmarkTest",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3984,
											"name": "descriptor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BenchmarkTestOptions",
												"id": 4421
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkTest",
										"id": 3979
									},
									"overwrites": {
										"type": "reference",
										"name": "Test.__constructor",
										"id": 3497
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 31,
									"character": 29
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Test.__constructor",
								"id": 3497
							}
						},
						{
							"id": 4008,
							"name": "_hasPassed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 27,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Test._hasPassed",
								"id": 3490
							}
						},
						{
							"id": 4009,
							"name": "_isAsync",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 29,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Test._isAsync",
								"id": 3491
							}
						},
						{
							"id": 4011,
							"name": "_runTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 33,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Test._runTask",
								"id": 3493
							}
						},
						{
							"id": 4012,
							"name": "_timeElapsed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 35,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Test._timeElapsed",
								"id": 3494
							}
						},
						{
							"id": 4010,
							"name": "_timeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 31,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Test._timeout",
								"id": 3492
							}
						},
						{
							"id": 4013,
							"name": "_timer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 39,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Test._timer",
								"id": 3495
							}
						},
						{
							"id": 4014,
							"name": "_usesRemote",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 41,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Test._usesRemote",
								"id": 3496
							}
						},
						{
							"id": 3981,
							"name": "benchmark",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Benchmark.js test that actually performs benchmarking"
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 31,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "InternBenchmark",
								"id": 4087
							}
						},
						{
							"id": 4007,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The error that caused this Test to fail"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 25,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "InternError",
										"id": 3473
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.error",
								"id": 3489
							}
						},
						{
							"id": 4004,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of this test"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 13,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.name",
								"id": 3485
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.name",
								"id": 3546
							}
						},
						{
							"id": 4005,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This test's parent Suite"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 16,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.parent",
								"id": 3486
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.parent",
								"id": 3547
							}
						},
						{
							"id": 4006,
							"name": "skipped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If this test was skipped, this will contain a message indicating why"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 19,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.skipped",
								"id": 3487
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.skipped",
								"id": 3548
							}
						},
						{
							"id": 3980,
							"name": "test",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The test function managed by this test"
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 28,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkTestFunction",
								"id": 4039
							},
							"overwrites": {
								"type": "reference",
								"name": "Test.test",
								"id": 3488
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.test",
								"id": 3549
							}
						},
						{
							"id": 4015,
							"name": "executor",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The executor running this test."
							},
							"getSignature": [
								{
									"id": 4016,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The executor running this test."
									},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.executor",
										"id": 3503
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 64,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.executor",
								"id": 3503
							}
						},
						{
							"id": 4017,
							"name": "hasPassed",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "True if the test function completed successfully"
							},
							"getSignature": [
								{
									"id": 4018,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "True if the test function completed successfully"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.hasPassed",
										"id": 3505
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 71,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.hasPassed",
								"id": 3505
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.hasPassed",
								"id": 3545
							}
						},
						{
							"id": 4019,
							"name": "id",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The unique identifier of the test, assuming all combinations of suite +\ntest are unique."
							},
							"getSignature": [
								{
									"id": 4020,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of the test, assuming all combinations of suite +\ntest are unique."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.id",
										"id": 3507
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 79,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.id",
								"id": 3507
							}
						},
						{
							"id": 4021,
							"name": "isAsync",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, this Test's test function is async"
							},
							"getSignature": [
								{
									"id": 4022,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "If true, this Test's test function is async"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.isAsync",
										"id": 3509
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 93,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.isAsync",
								"id": 3509
							}
						},
						{
							"id": 4023,
							"name": "parentId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The unique identifier of the test's parent."
							},
							"getSignature": [
								{
									"id": 4024,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of the test's parent."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.parentId",
										"id": 3511
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 100,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.parentId",
								"id": 3511
							}
						},
						{
							"id": 4025,
							"name": "remote",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The WebDriver interface for driving a remote environment.",
								"tags": [
									{
										"tag": "see",
										"text": "Suite#remote\n"
									}
								]
							},
							"getSignature": [
								{
									"id": 4026,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The WebDriver interface for driving a remote environment.",
										"tags": [
											{
												"tag": "see",
												"text": "Suite#remote\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Remote",
										"id": 7283
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.remote",
										"id": 3513
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 108,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.remote",
								"id": 3513
							}
						},
						{
							"id": 4027,
							"name": "sessionId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An identifier for the test session this Test is running in."
							},
							"getSignature": [
								{
									"id": 4028,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "An identifier for the test session this Test is running in."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.sessionId",
										"id": 3515
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 116,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.sessionId",
								"id": 3515
							}
						},
						{
							"id": 3985,
							"name": "timeElapsed",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of milliseconds the test function took to complete."
							},
							"getSignature": [
								{
									"id": 3986,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The number of milliseconds the test function took to complete."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"overwrites": {
										"type": "reference",
										"name": "Test.timeElapsed",
										"id": 3517
									}
								}
							],
							"setSignature": [
								{
									"id": 3987,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The number of milliseconds the test function took to complete."
									},
									"parameters": [
										{
											"id": 3988,
											"name": "_value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "Test.timeElapsed",
										"id": 3517
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 99,
									"character": 17
								},
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 106,
									"character": 17
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Test.timeElapsed",
								"id": 3517
							}
						},
						{
							"id": 4029,
							"name": "timeout",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of milliseconds this test can run before it will be canceled."
							},
							"getSignature": [
								{
									"id": 4030,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The number of milliseconds this test can run before it will be canceled."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.timeout",
										"id": 3519
									}
								}
							],
							"setSignature": [
								{
									"id": 4031,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The number of milliseconds this test can run before it will be canceled."
									},
									"parameters": [
										{
											"id": 4032,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.timeout",
										"id": 3519
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 130,
									"character": 13
								},
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 140,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.timeout",
								"id": 3519
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.timeout",
								"id": 3550
							}
						},
						{
							"id": 3989,
							"name": "async",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3990,
									"name": "async",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3991,
											"name": "_timeout",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 3992,
											"name": "_numCallsUntilResolution",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Deferred",
										"id": 3453,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Test.async",
										"id": 3523
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 110,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Test.async",
								"id": 3523
							}
						},
						{
							"id": 4033,
							"name": "restartTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4034,
									"name": "restartTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "During an asynchronous test run, restarts the timeout timer."
									},
									"parameters": [
										{
											"id": 4035,
											"name": "timeout",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.restartTimeout",
										"id": 3527
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 203,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.restartTimeout",
								"id": 3527
							}
						},
						{
							"id": 3993,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3994,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Test.run",
										"id": 3530
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 117,
									"character": 5
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Test.run",
								"id": 3530
							}
						},
						{
							"id": 4036,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4037,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips this test.",
										"text": "Calling this function will cause a test to halt immediately. If a message\nwas provided, a reporter may report the test as skipped. Skipped tests\nare not treated as passing or failing.\n"
									},
									"parameters": [
										{
											"id": 4038,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If provided, will be stored in this test's `skipped`\nproperty.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"skipped\""
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Test.skip",
										"id": 3532
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 388,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Test.skip",
								"id": 3532
							}
						},
						{
							"id": 3995,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3996,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 3997,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 3998,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 3999,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Test.toJSON",
										"id": 3535
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 165,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Test.toJSON",
								"id": 3535
							}
						},
						{
							"id": 4000,
							"name": "async",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4001,
									"name": "async",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4002,
											"name": "testFunction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BenchmarkDeferredTestFunction",
												"id": 4046
											}
										},
										{
											"id": 4003,
											"name": "numCallsUntilResolution",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkTestFunction",
										"id": 4039
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 178,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3982
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4008,
								4009,
								4011,
								4012,
								4010,
								4013,
								4014,
								3981,
								4007,
								4004,
								4005,
								4006,
								3980
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								4015,
								4017,
								4019,
								4021,
								4023,
								4025,
								4027,
								3985,
								4029
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3989,
								4033,
								3993,
								4036,
								3995,
								4000
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkTest.ts",
							"line": 26,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Test",
							"id": 3484
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "TestProperties",
							"id": 3544
						}
					]
				},
				{
					"id": 4046,
					"name": "BenchmarkDeferredTestFunction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4047,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4048,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BenchmarkTest",
										"id": 3979
									}
								},
								{
									"id": 4049,
									"name": "deferred",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Deferred",
										"id": 3453,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						},
						{
							"id": 4051,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4052,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BenchmarkTest",
										"id": 3979
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						},
						{
							"id": 4053,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4054,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Test",
										"id": 3484
									}
								},
								{
									"id": 4055,
									"name": "test",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Test",
										"id": 3484
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"name": "PromiseLike",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 4050,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 198,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkOptions",
								"id": 4065
							},
							"overwrites": {
								"type": "reference",
								"name": "BenchmarkTestFunction.options",
								"id": 4042
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4050
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkTest.ts",
							"line": 196,
							"character": 46
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BenchmarkTestFunction",
							"id": 4039
						}
					]
				},
				{
					"id": 4065,
					"name": "BenchmarkOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4068,
							"name": "async",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 65,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.async"
							}
						},
						{
							"id": 4069,
							"name": "defer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 66,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.defer"
							}
						},
						{
							"id": 4070,
							"name": "delay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 67,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.delay"
							}
						},
						{
							"id": 4085,
							"name": "fn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 82,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Function"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.fn"
							}
						},
						{
							"id": 4071,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 68,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.id"
							}
						},
						{
							"id": 4072,
							"name": "initCount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 69,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.initCount"
							}
						},
						{
							"id": 4073,
							"name": "maxTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 70,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.maxTime"
							}
						},
						{
							"id": 4074,
							"name": "minSamples",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 71,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.minSamples"
							}
						},
						{
							"id": 4075,
							"name": "minTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 72,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.minTime"
							}
						},
						{
							"id": 4076,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 73,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.name"
							}
						},
						{
							"id": 4067,
							"name": "numCallsUntilResolution",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 215,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 4077,
							"name": "onAbort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 74,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.onAbort"
							}
						},
						{
							"id": 4078,
							"name": "onComplete",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 75,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.onComplete"
							}
						},
						{
							"id": 4079,
							"name": "onCycle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 76,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.onCycle"
							}
						},
						{
							"id": 4080,
							"name": "onError",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 77,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.onError"
							}
						},
						{
							"id": 4081,
							"name": "onReset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 78,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.onReset"
							}
						},
						{
							"id": 4082,
							"name": "onStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 79,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.onStart"
							}
						},
						{
							"id": 4086,
							"name": "queued",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 83,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.queued"
							}
						},
						{
							"id": 4083,
							"name": "setup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 80,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Function"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.setup"
							}
						},
						{
							"id": 4066,
							"name": "skip",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 214,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 4084,
							"name": "teardown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 81,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Function"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Options.teardown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4068,
								4069,
								4070,
								4085,
								4071,
								4072,
								4073,
								4074,
								4075,
								4076,
								4067,
								4077,
								4078,
								4079,
								4080,
								4081,
								4082,
								4086,
								4083,
								4066,
								4084
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkTest.ts",
							"line": 213,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Options"
						}
					]
				},
				{
					"id": 4039,
					"name": "BenchmarkTestFunction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4040,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4041,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BenchmarkTest",
										"id": 3979
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						},
						{
							"id": 4043,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4044,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Test",
										"id": 3484
									}
								},
								{
									"id": 4045,
									"name": "test",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Test",
										"id": 3484
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"name": "PromiseLike",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 4042,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 193,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkOptions",
								"id": 4065
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4042
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkTest.ts",
							"line": 191,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TestFunction",
							"id": 3540
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "BenchmarkDeferredTestFunction",
							"id": 4046
						}
					]
				},
				{
					"id": 4056,
					"name": "BenchmarkTestProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4060,
							"name": "hasPassed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 460,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TestProperties.hasPassed",
								"id": 3545
							}
						},
						{
							"id": 4061,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 461,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TestProperties.name",
								"id": 3546
							}
						},
						{
							"id": 4059,
							"name": "numCallsUntilResolution",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 204,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 4062,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 462,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TestProperties.parent",
								"id": 3547
							}
						},
						{
							"id": 4058,
							"name": "skip",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 203,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4063,
							"name": "skipped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 463,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TestProperties.skipped",
								"id": 3548
							}
						},
						{
							"id": 4057,
							"name": "test",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 202,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkTestFunction",
								"id": 4039
							},
							"overwrites": {
								"type": "reference",
								"name": "TestProperties.test",
								"id": 3549
							}
						},
						{
							"id": 4064,
							"name": "timeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 465,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TestProperties.timeout",
								"id": 3550
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4060,
								4061,
								4059,
								4062,
								4058,
								4063,
								4057,
								4064
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkTest.ts",
							"line": 201,
							"character": 40
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TestProperties",
							"id": 3544
						}
					]
				},
				{
					"id": 4087,
					"name": "InternBenchmark",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4303,
							"name": "Deferred",
							"kind": 128,
							"kindString": "Class",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 4304,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4305,
											"name": "new Deferred",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 4306,
													"name": "clone",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Benchmark"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Deferred",
												"id": 4303
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 130,
											"character": 27
										}
									]
								},
								{
									"id": 4307,
									"name": "benchmark",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 133,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "Benchmark"
									}
								},
								{
									"id": 4308,
									"name": "cycles",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 134,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4309,
									"name": "elapsed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 135,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4310,
									"name": "timeStamp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 136,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										4304
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4307,
										4308,
										4309,
										4310
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 130,
									"character": 25
								}
							]
						},
						{
							"id": 4311,
							"name": "Event",
							"kind": 128,
							"kindString": "Class",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 4312,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4313,
											"name": "new Event",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 4314,
													"name": "type",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"name": "Object"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Event",
												"id": 4311
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 139,
											"character": 24
										}
									]
								},
								{
									"id": 4315,
									"name": "aborted",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 142,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4316,
									"name": "cancelled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 143,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4317,
									"name": "currentTarget",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 144,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "Object"
									}
								},
								{
									"id": 4318,
									"name": "result",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 145,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 4319,
									"name": "target",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 146,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Object"
									}
								},
								{
									"id": 4320,
									"name": "timeStamp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 147,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4321,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 148,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										4312
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4315,
										4316,
										4317,
										4318,
										4319,
										4320,
										4321
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 139,
									"character": 22
								}
							]
						},
						{
							"id": 4322,
							"name": "Suite",
							"kind": 128,
							"kindString": "Class",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 4326,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4327,
											"name": "new Suite",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 4328,
													"name": "name",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 4329,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Options",
														"id": 4246
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 4322
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 152,
											"character": 41
										}
									]
								},
								{
									"id": 4330,
									"name": "aborted",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 156,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4331,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 157,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4332,
									"name": "running",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 158,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4323,
									"name": "options",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isStatic": true,
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 152,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4324,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 4325,
													"name": "name",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "node_modules/@types/benchmark/index.d.ts",
															"line": 152,
															"character": 30
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														4325
													]
												}
											],
											"sources": [
												{
													"fileName": "node_modules/@types/benchmark/index.d.ts",
													"line": 152,
													"character": 23
												}
											]
										}
									}
								},
								{
									"id": 4333,
									"name": "abort",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4334,
											"name": "abort",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 159,
											"character": 13
										}
									]
								},
								{
									"id": 4335,
									"name": "add",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4336,
											"name": "add",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4337,
													"name": "name",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4338,
													"name": "fn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Function"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 4339,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Options",
														"id": 4246
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										},
										{
											"id": 4340,
											"name": "add",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4341,
													"name": "fn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Function"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 4342,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Options",
														"id": 4246
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										},
										{
											"id": 4343,
											"name": "add",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4344,
													"name": "name",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4345,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Options",
														"id": 4246
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										},
										{
											"id": 4346,
											"name": "add",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4347,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Options"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 160,
											"character": 11
										},
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 161,
											"character": 11
										},
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 162,
											"character": 11
										},
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 163,
											"character": 11
										}
									]
								},
								{
									"id": 4348,
									"name": "clone",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4349,
											"name": "clone",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4350,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Options"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 164,
											"character": 13
										}
									]
								},
								{
									"id": 4351,
									"name": "emit",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4352,
											"name": "emit",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4353,
													"name": "type",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"name": "Object"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 165,
											"character": 12
										}
									]
								},
								{
									"id": 4354,
									"name": "filter",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4355,
											"name": "filter",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4356,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Function"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 166,
											"character": 14
										}
									]
								},
								{
									"id": 4357,
									"name": "forEach",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4358,
											"name": "forEach",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4359,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Function"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 167,
											"character": 15
										}
									]
								},
								{
									"id": 4360,
									"name": "indexOf",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4361,
											"name": "indexOf",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4362,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 168,
											"character": 15
										}
									]
								},
								{
									"id": 4363,
									"name": "invoke",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4364,
											"name": "invoke",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4365,
													"name": "name",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 4366,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 169,
											"character": 14
										}
									]
								},
								{
									"id": 4367,
									"name": "join",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4368,
											"name": "join",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4369,
													"name": "separator",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 170,
											"character": 12
										}
									]
								},
								{
									"id": 4370,
									"name": "listeners",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4371,
											"name": "listeners",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4372,
													"name": "type",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Function"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 171,
											"character": 17
										}
									]
								},
								{
									"id": 4373,
									"name": "map",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4374,
											"name": "map",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4375,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Function"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 172,
											"character": 11
										}
									]
								},
								{
									"id": 4376,
									"name": "off",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4377,
											"name": "off",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4378,
													"name": "type",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 4379,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Function"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										},
										{
											"id": 4380,
											"name": "off",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4381,
													"name": "types",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 173,
											"character": 11
										},
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 174,
											"character": 11
										}
									]
								},
								{
									"id": 4382,
									"name": "on",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4383,
											"name": "on",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4384,
													"name": "type",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 4385,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Function"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										},
										{
											"id": 4386,
											"name": "on",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4387,
													"name": "types",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 175,
											"character": 10
										},
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 176,
											"character": 10
										}
									]
								},
								{
									"id": 4388,
									"name": "pluck",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4389,
											"name": "pluck",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4390,
													"name": "property",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 177,
											"character": 13
										}
									]
								},
								{
									"id": 4391,
									"name": "pop",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4392,
											"name": "pop",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 178,
											"character": 11
										}
									]
								},
								{
									"id": 4393,
									"name": "push",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4394,
											"name": "push",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4395,
													"name": "benchmark",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Benchmark"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 179,
											"character": 12
										}
									]
								},
								{
									"id": 4396,
									"name": "reduce",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4397,
											"name": "reduce",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"typeParameter": [
												{
													"id": 4398,
													"name": "T",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {}
												}
											],
											"parameters": [
												{
													"id": 4399,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Function"
													}
												},
												{
													"id": 4400,
													"name": "accumulator",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "T"
													}
												}
											],
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 180,
											"character": 14
										}
									]
								},
								{
									"id": 4401,
									"name": "reset",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4402,
											"name": "reset",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 181,
											"character": 13
										}
									]
								},
								{
									"id": 4403,
									"name": "reverse",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4404,
											"name": "reverse",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 182,
											"character": 15
										}
									]
								},
								{
									"id": 4405,
									"name": "run",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4406,
											"name": "run",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4407,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Options",
														"id": 4246
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 183,
											"character": 11
										}
									]
								},
								{
									"id": 4408,
									"name": "shift",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4409,
											"name": "shift",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Benchmark"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 184,
											"character": 13
										}
									]
								},
								{
									"id": 4410,
									"name": "slice",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4411,
											"name": "slice",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4412,
													"name": "start",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 4413,
													"name": "end",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 4414,
											"name": "slice",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4415,
													"name": "start",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 4416,
													"name": "deleteCount",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 4417,
													"name": "values",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 185,
											"character": 13
										},
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 186,
											"character": 13
										}
									]
								},
								{
									"id": 4418,
									"name": "unshift",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4419,
											"name": "unshift",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4420,
													"name": "benchmark",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Benchmark"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 187,
											"character": 15
										}
									]
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										4326
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4330,
										4331,
										4332,
										4323
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										4333,
										4335,
										4348,
										4351,
										4354,
										4357,
										4360,
										4363,
										4367,
										4370,
										4373,
										4376,
										4382,
										4388,
										4391,
										4393,
										4396,
										4401,
										4403,
										4405,
										4408,
										4410,
										4418
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 151,
									"character": 22
								}
							]
						},
						{
							"id": 4246,
							"name": "Options",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 4247,
									"name": "async",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 65,
											"character": 13
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 4248,
									"name": "defer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 66,
											"character": 13
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 4249,
									"name": "delay",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 67,
											"character": 13
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 4264,
									"name": "fn",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 82,
											"character": 10
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Function"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 4250,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 68,
											"character": 10
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 4251,
									"name": "initCount",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 69,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 4252,
									"name": "maxTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 70,
											"character": 15
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 4253,
									"name": "minSamples",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 71,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 4254,
									"name": "minTime",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 72,
											"character": 15
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 4255,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 73,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 4256,
									"name": "onAbort",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 74,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 4257,
									"name": "onComplete",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 75,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 4258,
									"name": "onCycle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 76,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 4259,
									"name": "onError",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 77,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 4260,
									"name": "onReset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 78,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 4261,
									"name": "onStart",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 79,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 4265,
									"name": "queued",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 83,
											"character": 14
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 4262,
									"name": "setup",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 80,
											"character": 13
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Function"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 4263,
									"name": "teardown",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 81,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Function"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4247,
										4248,
										4249,
										4264,
										4250,
										4251,
										4252,
										4253,
										4254,
										4255,
										4256,
										4257,
										4258,
										4259,
										4260,
										4261,
										4265,
										4262,
										4263
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 64,
									"character": 28
								}
							]
						},
						{
							"id": 4266,
							"name": "Platform",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 4267,
									"name": "description",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 87,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4268,
									"name": "layout",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 88,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4269,
									"name": "manufacturer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 89,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4270,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 90,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4271,
									"name": "os",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 91,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4272,
									"name": "prerelease",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 92,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4273,
									"name": "product",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 93,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4274,
									"name": "version",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 94,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4275,
									"name": "toString",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 4276,
											"name": "toString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 95,
											"character": 16
										}
									]
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4267,
										4268,
										4269,
										4270,
										4271,
										4272,
										4273,
										4274
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										4275
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 86,
									"character": 29
								}
							]
						},
						{
							"id": 4290,
							"name": "Stats",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 4291,
									"name": "deviation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 114,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4292,
									"name": "mean",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 115,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4293,
									"name": "moe",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 116,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4294,
									"name": "rme",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 117,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4295,
									"name": "sample",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 118,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 4296,
									"name": "sem",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 119,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4297,
									"name": "variance",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 120,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4291,
										4292,
										4293,
										4294,
										4295,
										4296,
										4297
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 113,
									"character": 26
								}
							]
						},
						{
							"id": 4277,
							"name": "Support",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 4278,
									"name": "air",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 99,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4279,
									"name": "argumentsClass",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 100,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4280,
									"name": "browser",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 101,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4281,
									"name": "charByIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 102,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4282,
									"name": "charByOwnIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 103,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4283,
									"name": "decompilation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 104,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4284,
									"name": "descriptors",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 105,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4285,
									"name": "getAllKeys",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 106,
											"character": 18
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4286,
									"name": "iteratesOwnFirst",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 107,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4287,
									"name": "java",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 108,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4288,
									"name": "nodeClass",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 109,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 4289,
									"name": "timeout",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 110,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4278,
										4279,
										4280,
										4281,
										4282,
										4283,
										4284,
										4285,
										4286,
										4287,
										4288,
										4289
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 98,
									"character": 28
								}
							]
						},
						{
							"id": 4298,
							"name": "Times",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 4299,
									"name": "cycle",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 124,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4300,
									"name": "elapsed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 125,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4301,
									"name": "period",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 126,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 4302,
									"name": "timeStamp",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/benchmark/index.d.ts",
											"line": 127,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										4299,
										4300,
										4301,
										4302
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 123,
									"character": 26
								}
							]
						},
						{
							"id": 4188,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4189,
									"name": "new InternBenchmark",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 4190,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Function"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 4191,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Benchmark.Options"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InternBenchmark",
										"id": 4087
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.__constructor"
									}
								},
								{
									"id": 4192,
									"name": "new InternBenchmark",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 4193,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4194,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Function"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 4195,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Benchmark.Options"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InternBenchmark",
										"id": 4087
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.__constructor"
									}
								},
								{
									"id": 4196,
									"name": "new InternBenchmark",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 4197,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4198,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Benchmark.Options"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InternBenchmark",
										"id": 4087
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.__constructor"
									}
								},
								{
									"id": 4199,
									"name": "new InternBenchmark",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 4200,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Options"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InternBenchmark",
										"id": 4087
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 28,
									"character": 27
								},
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 30,
									"character": 68
								},
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 31,
									"character": 82
								},
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 32,
									"character": 59
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.__constructor"
							}
						},
						{
							"id": 4201,
							"name": "aborted",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 35,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.aborted"
							}
						},
						{
							"id": 4202,
							"name": "compiled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 36,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Function"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.compiled"
							}
						},
						{
							"id": 4203,
							"name": "count",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 37,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.count"
							}
						},
						{
							"id": 4204,
							"name": "cycles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.cycles"
							}
						},
						{
							"id": 4205,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 39,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Error"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.error"
							}
						},
						{
							"id": 4206,
							"name": "fn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 40,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Function"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.fn"
							}
						},
						{
							"id": 4207,
							"name": "hz",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 41,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.hz"
							}
						},
						{
							"id": 4088,
							"name": "internTest",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/BenchmarkTest.ts",
									"line": 219,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkTest",
								"id": 3979
							}
						},
						{
							"id": 4208,
							"name": "running",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 42,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.running"
							}
						},
						{
							"id": 4209,
							"name": "setup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 43,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Function"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.setup"
							}
						},
						{
							"id": 4211,
							"name": "stats",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 46,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Stats"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.stats"
							}
						},
						{
							"id": 4210,
							"name": "teardown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 44,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Function"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.teardown"
							}
						},
						{
							"id": 4212,
							"name": "times",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 47,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Times"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.times"
							}
						},
						{
							"id": 4184,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 25,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Options"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.options"
							}
						},
						{
							"id": 4185,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 26,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Platform"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.platform"
							}
						},
						{
							"id": 4186,
							"name": "support",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 27,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Support"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.support"
							}
						},
						{
							"id": 4187,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 28,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.version"
							}
						},
						{
							"id": 4213,
							"name": "abort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4214,
									"name": "abort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Benchmark"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.abort"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 49,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.abort"
							}
						},
						{
							"id": 4215,
							"name": "clone",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4216,
									"name": "clone",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4217,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Options"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Benchmark"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.clone"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 50,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.clone"
							}
						},
						{
							"id": 4218,
							"name": "compare",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4219,
									"name": "compare",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4220,
											"name": "benchmark",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Benchmark"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.compare"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 51,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.compare"
							}
						},
						{
							"id": 4221,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4222,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4223,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Object"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.emit"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 52,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.emit"
							}
						},
						{
							"id": 4224,
							"name": "listeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4225,
									"name": "listeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4226,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Function"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.listeners"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 53,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.listeners"
							}
						},
						{
							"id": 4227,
							"name": "off",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4228,
									"name": "off",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4229,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 4230,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Benchmark"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.off"
									}
								},
								{
									"id": 4231,
									"name": "off",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4232,
											"name": "types",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Benchmark"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.off"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 54,
									"character": 7
								},
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 55,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.off"
							}
						},
						{
							"id": 4233,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4234,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4235,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 4236,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Benchmark"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.on"
									}
								},
								{
									"id": 4237,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4238,
											"name": "types",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Benchmark"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.on"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 56,
									"character": 6
								},
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 57,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.on"
							}
						},
						{
							"id": 4239,
							"name": "reset",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4240,
									"name": "reset",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Benchmark"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.reset"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 58,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.reset"
							}
						},
						{
							"id": 4241,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4242,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4243,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Benchmark.Options"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Benchmark"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.run"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 59,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.run"
							}
						},
						{
							"id": 4244,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4245,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.toString"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 60,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.toString"
							}
						},
						{
							"id": 4089,
							"name": "deepClone",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4090,
									"name": "deepClone",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4091,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4092,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.deepClone"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 8,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.deepClone"
							}
						},
						{
							"id": 4093,
							"name": "each",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4094,
									"name": "each",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4095,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Object"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												]
											}
										},
										{
											"id": 4096,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 4097,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.each"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 9,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.each"
							}
						},
						{
							"id": 4098,
							"name": "extend",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4099,
									"name": "extend",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4100,
											"name": "destination",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										},
										{
											"id": 4101,
											"name": "sources",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Object"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Object"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.extend"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 10,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.extend"
							}
						},
						{
							"id": 4102,
							"name": "filter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4103,
									"name": "filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4104,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4105,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										},
										{
											"id": 4106,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4107,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4108,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4109,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/benchmark/index.d.ts",
															"line": 11,
															"character": 40
														}
													]
												}
											}
										},
										{
											"id": 4110,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.filter"
									}
								},
								{
									"id": 4111,
									"name": "filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4112,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4113,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										},
										{
											"id": 4114,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4115,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.filter"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 11,
									"character": 17
								},
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 12,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.filter"
							}
						},
						{
							"id": 4116,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4117,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4118,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4119,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										},
										{
											"id": 4120,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4121,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4122,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4123,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/benchmark/index.d.ts",
															"line": 13,
															"character": 41
														}
													]
												}
											}
										},
										{
											"id": 4124,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.forEach"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 13,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.forEach"
							}
						},
						{
							"id": 4128,
							"name": "forOwn",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4129,
									"name": "forOwn",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4130,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										},
										{
											"id": 4131,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 4132,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.forOwn"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 15,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.forOwn"
							}
						},
						{
							"id": 4125,
							"name": "formatNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4126,
									"name": "formatNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4127,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.formatNumber"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 14,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.formatNumber"
							}
						},
						{
							"id": 4133,
							"name": "hasKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4134,
									"name": "hasKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4135,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										},
										{
											"id": 4136,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.hasKey"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 16,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.hasKey"
							}
						},
						{
							"id": 4137,
							"name": "indexOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4138,
									"name": "indexOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4139,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4140,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										},
										{
											"id": 4141,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										},
										{
											"id": 4142,
											"name": "fromIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.indexOf"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 17,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.indexOf"
							}
						},
						{
							"id": 4143,
							"name": "interpolate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4144,
									"name": "interpolate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4145,
											"name": "template",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4146,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.interpolate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 18,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.interpolate"
							}
						},
						{
							"id": 4147,
							"name": "invoke",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4148,
									"name": "invoke",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4149,
											"name": "benches",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Benchmark"
												}
											}
										},
										{
											"id": 4150,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Object"
													}
												]
											}
										},
										{
											"id": 4151,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.invoke"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 19,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.invoke"
							}
						},
						{
							"id": 4152,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4153,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4154,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										},
										{
											"id": 4155,
											"name": "separator1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 4156,
											"name": "separator2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.join"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 20,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.join"
							}
						},
						{
							"id": 4157,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4158,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4159,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4160,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4161,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										},
										{
											"id": 4162,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4163,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4164,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4165,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/benchmark/index.d.ts",
															"line": 21,
															"character": 40
														}
													]
												}
											}
										},
										{
											"id": 4166,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "K"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.map"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 21,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.map"
							}
						},
						{
							"id": 4167,
							"name": "pluck",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4168,
									"name": "pluck",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4169,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4170,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4171,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										},
										{
											"id": 4172,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "K"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.pluck"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 22,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.pluck"
							}
						},
						{
							"id": 4173,
							"name": "reduce",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4174,
									"name": "reduce",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4175,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 4176,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4177,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										},
										{
											"id": 4178,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4179,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4180,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4181,
																	"name": "accumulator",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "K"
																	}
																},
																{
																	"id": 4182,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/benchmark/index.d.ts",
															"line": 23,
															"character": 43
														}
													]
												}
											}
										},
										{
											"id": 4183,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "K"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Benchmark.reduce"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/benchmark/index.d.ts",
									"line": 23,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Benchmark.reduce"
							}
						}
					],
					"groups": [
						{
							"title": "Classes",
							"kind": 128,
							"children": [
								4303,
								4311,
								4322
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								4246,
								4266,
								4290,
								4277,
								4298
							]
						},
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								4188
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4201,
								4202,
								4203,
								4204,
								4205,
								4206,
								4207,
								4088,
								4208,
								4209,
								4211,
								4210,
								4212,
								4184,
								4185,
								4186,
								4187
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4213,
								4215,
								4218,
								4221,
								4224,
								4227,
								4233,
								4239,
								4241,
								4244,
								4089,
								4093,
								4098,
								4102,
								4116,
								4128,
								4125,
								4133,
								4137,
								4143,
								4147,
								4152,
								4157,
								4167,
								4173
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkTest.ts",
							"line": 218,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Benchmark"
						}
					]
				},
				{
					"id": 4421,
					"name": "BenchmarkTestOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkTest.ts",
							"line": 207,
							"character": 32
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Partial",
								"typeArguments": [
									{
										"type": "reference",
										"name": "BenchmarkTestProperties",
										"id": 4056
									}
								]
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 4422,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 4423,
											"name": "name",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/BenchmarkTest.ts",
													"line": 208,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4425,
											"name": "options",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/BenchmarkTest.ts",
													"line": 210,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "BenchmarkOptions",
												"id": 4065
											}
										},
										{
											"id": 4424,
											"name": "test",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/BenchmarkTest.ts",
													"line": 209,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BenchmarkTestFunction",
												"id": 4039
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												4423,
												4425,
												4424
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/BenchmarkTest.ts",
											"line": 207,
											"character": 69
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 4432,
					"name": "createDeferred",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 4433,
							"name": "createDeferred",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4434,
									"name": "benchmark",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Benchmark"
									}
								},
								{
									"id": 4435,
									"name": "deferred",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Deferred",
										"id": 3453,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								},
								{
									"id": 4436,
									"name": "numCallsUntilResolution",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Deferred",
								"id": 3453,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkTest.ts",
							"line": 251,
							"character": 23
						}
					]
				},
				{
					"id": 4429,
					"name": "createLifecycle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"signatures": [
						{
							"id": 4430,
							"name": "createLifecycle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4431,
									"name": "before",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkTest.ts",
							"line": 226,
							"character": 21
						}
					]
				},
				{
					"id": 4426,
					"name": "isBenchmarkTest",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4427,
							"name": "isBenchmarkTest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4428,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "BenchmarkTest"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/BenchmarkTest.ts",
							"line": 222,
							"character": 31
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3979
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						4046,
						4065,
						4039,
						4056,
						4087
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						4421
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						4432,
						4429,
						4426
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/BenchmarkTest.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7875,
			"name": "\"core/lib/Channel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/Channel.ts",
			"children": [
				{
					"id": 7876,
					"name": "Channel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 7878,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7879,
									"name": "new Channel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 7880,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChannelOptions",
												"id": 6240
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Channel",
										"id": 7876
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Channel.ts",
									"line": 12,
									"character": 39
								}
							]
						},
						{
							"id": 7877,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Channel.ts",
									"line": 9,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "ChannelOptions",
								"id": 6240
							}
						},
						{
							"id": 7885,
							"name": "_initialize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7886,
									"name": "_initialize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Channel.ts",
									"line": 24,
									"character": 23
								}
							]
						},
						{
							"id": 7881,
							"name": "sendMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7882,
									"name": "sendMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7883,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "RemoteEvents"
												}
											}
										},
										{
											"id": 7884,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Channel.ts",
									"line": 18,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								7878
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7877
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								7885,
								7881
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Channel.ts",
							"line": 8,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						7876
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/Channel.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3452,
			"name": "\"core/lib/Deferred\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/Deferred.ts",
			"children": [
				{
					"id": 3453,
					"name": "Deferred",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 3454,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 3456,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3457,
									"name": "new Deferred",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Deferred",
										"id": 3453
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Deferred.ts",
									"line": 4,
									"character": 31
								}
							]
						},
						{
							"id": 3455,
							"name": "promise",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Deferred.ts",
									"line": 4,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 3470,
							"name": "_finalize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3471,
									"name": "_finalize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Deferred.ts",
									"line": 52,
									"character": 21
								}
							]
						},
						{
							"id": 3458,
							"name": "callback",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3459,
									"name": "callback",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Wraps any callback to resolve the deferred so long as the callback\nexecutes without throwing any Errors."
									},
									"parameters": [
										{
											"id": 3460,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Deferred.ts",
									"line": 21,
									"character": 10
								}
							]
						},
						{
							"id": 3467,
							"name": "reject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3468,
									"name": "reject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3469,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Error",
												"id": 690
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Deferred.ts",
									"line": 48,
									"character": 8
								}
							]
						},
						{
							"id": 3461,
							"name": "rejectOnError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3462,
									"name": "rejectOnError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Wraps a callback to reject the deferred if the callback throws an Error."
									},
									"parameters": [
										{
											"id": 3463,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Deferred.ts",
									"line": 33,
									"character": 15
								}
							]
						},
						{
							"id": 3464,
							"name": "resolve",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3465,
									"name": "resolve",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3466,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "T",
												"id": 3454
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Deferred.ts",
									"line": 44,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3456
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3455
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3470,
								3458,
								3467,
								3461,
								3464
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Deferred.ts",
							"line": 1,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3453
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/Deferred.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5579,
			"name": "\"core/lib/Environment\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/Environment.ts",
			"children": [
				{
					"id": 5580,
					"name": "Environment",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 5589,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5590,
									"name": "new Environment",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 5591,
											"name": "kwArgs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5592,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 5593,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5594,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/Environment.ts",
															"line": 11,
															"character": 21
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Environment",
										"id": 5580
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Environment.ts",
									"line": 9,
									"character": 18
								}
							]
						},
						{
							"id": 5581,
							"name": "browser",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Environment.ts",
									"line": 2,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 5582,
							"name": "browserName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Environment.ts",
									"line": 3,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 5583,
							"name": "browserVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Environment.ts",
									"line": 4,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 5588,
							"name": "device",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Environment.ts",
									"line": 9,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 5585,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Environment.ts",
									"line": 6,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 5586,
							"name": "platformName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Environment.ts",
									"line": 7,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 5587,
							"name": "platformVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Environment.ts",
									"line": 8,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 5584,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Environment.ts",
									"line": 5,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 5595,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5596,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Environment.ts",
									"line": 18,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								5589
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5581,
								5582,
								5583,
								5588,
								5585,
								5586,
								5587,
								5584
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								5595
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Environment.ts",
							"line": 1,
							"character": 32
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						5580
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/Environment.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5172,
			"name": "\"core/lib/ProxiedSession\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/ProxiedSession.ts",
			"children": [
				{
					"id": 5173,
					"name": "ProxiedSession",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A ProxiedSession object represents a WebDriver session that interacts with\nthe Intern instrumenting server. It collects code instrumentation data from\npages and converts local filesystem paths into URLs for use with\n`leadfoot/Session#get`."
					},
					"children": [
						{
							"id": 5189,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A Session represents a connection to a remote environment that can be\ndriven programmatically."
							},
							"signatures": [
								{
									"id": 5190,
									"name": "new ProxiedSession",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "A Session represents a connection to a remote environment that can be\ndriven programmatically."
									},
									"parameters": [
										{
											"id": 5191,
											"name": "sessionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ID of the session, as provided by the remote."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5192,
											"name": "server",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The server that the session belongs to."
											},
											"type": {
												"type": "reference",
												"name": "Server",
												"id": 694
											}
										},
										{
											"id": 5193,
											"name": "capabilities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A map of bugs and features that the remote\nenvironment exposes.\n"
											},
											"type": {
												"type": "reference",
												"name": "Capabilities",
												"id": 561
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ProxiedSession",
										"id": 5173
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.__constructor",
										"id": 951
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 42,
									"character": 60
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.__constructor",
								"id": 951
							}
						},
						{
							"id": 5174,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The base URL for relative URLs."
							},
							"sources": [
								{
									"fileName": "src/core/lib/ProxiedSession.ts",
									"line": 23,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 5175,
							"name": "coverageVariable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the global variable used to store coverage data."
							},
							"sources": [
								{
									"fileName": "src/core/lib/ProxiedSession.ts",
									"line": 28,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 5176,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Executor hosting this session."
							},
							"sources": [
								{
									"fileName": "src/core/lib/ProxiedSession.ts",
									"line": 33,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							}
						},
						{
							"id": 5194,
							"name": "capabilities",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Information about the available features and bugs in the remote\nenvironment."
							},
							"getSignature": [
								{
									"id": 5195,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Information about the available features and bugs in the remote\nenvironment."
									},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.capabilities",
										"id": 956
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 71,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.capabilities",
								"id": 956
							}
						},
						{
							"id": 5177,
							"name": "coverageEnabled",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 5178,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/ProxiedSession.ts",
									"line": 37,
									"character": 21
								}
							]
						},
						{
							"id": 5198,
							"name": "server",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Server that the session runs on."
							},
							"getSignature": [
								{
									"id": 5199,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The Server that the session runs on."
									},
									"type": {
										"type": "reference",
										"name": "Server",
										"id": 694
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.server",
										"id": 960
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 85,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.server",
								"id": 960
							}
						},
						{
							"id": 5196,
							"name": "sessionId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The current session ID."
							},
							"getSignature": [
								{
									"id": 5197,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The current session ID."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.sessionId",
										"id": 958
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 78,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.sessionId",
								"id": 958
							}
						},
						{
							"id": 5187,
							"name": "_getCoverage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5188,
									"name": "_getCoverage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/ProxiedSession.ts",
									"line": 127,
									"character": 24
								}
							]
						},
						{
							"id": 5353,
							"name": "acceptAlert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5354,
									"name": "acceptAlert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Accepts an alert, prompt, or confirmation pop-up. Equivalent to clicking\nthe 'OK' button."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.acceptAlert",
										"id": 1118
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1465,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.acceptAlert",
								"id": 1118
							}
						},
						{
							"id": 5257,
							"name": "activateIme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5258,
									"name": "activateIme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Activates an input method editor in the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"parameters": [
										{
											"id": 5259,
											"name": "engine",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of IME to activate.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.activateIme",
										"id": 1022
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 569,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.activateIme",
								"id": 1022
							}
						},
						{
							"id": 5321,
							"name": "clearCookies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5322,
									"name": "clearCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all cookies for the current page."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.clearCookies",
										"id": 1086
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1124,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.clearCookies",
								"id": 1086
							}
						},
						{
							"id": 5434,
							"name": "clearLocalStorage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5435,
									"name": "clearLocalStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all data in local storage for the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.clearLocalStorage",
										"id": 1201
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2008,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.clearLocalStorage",
								"id": 1201
							}
						},
						{
							"id": 5450,
							"name": "clearSessionStorage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5451,
									"name": "clearSessionStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all data in session storage for the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.clearSessionStorage",
										"id": 1217
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2059,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.clearSessionStorage",
								"id": 1217
							}
						},
						{
							"id": 5366,
							"name": "clickMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5367,
									"name": "clickMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clicks a mouse button at the point where the mouse cursor is currently\npositioned. This method may fail to execute with an error if the mouse\nhas not been moved anywhere since the page was loaded."
									},
									"parameters": [
										{
											"id": 5368,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to click. 0 corresponds to the primary mouse\nbutton, 1 to the middle mouse button, 2 to the secondary mouse button.\nNumbers above 2 correspond to any additional buttons a mouse might\nprovide.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.clickMouseButton",
										"id": 1131
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1586,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.clickMouseButton",
								"id": 1131
							}
						},
						{
							"id": 5268,
							"name": "closeCurrentWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5269,
									"name": "closeCurrentWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes the currently focused window. In most environments, after the\nwindow has been closed, it is necessary to explicitly switch to whatever\nwindow is now focused."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.closeCurrentWindow",
										"id": 1033
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 670,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.closeCurrentWindow",
								"id": 1033
							}
						},
						{
							"id": 5255,
							"name": "deactivateIme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5256,
									"name": "deactivateIme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deactivates any active input method editor in the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.deactivateIme",
										"id": 1020
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 559,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.deactivateIme",
								"id": 1020
							}
						},
						{
							"id": 5323,
							"name": "deleteCookie",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5324,
									"name": "deleteCookie",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a cookie on the current page."
									},
									"parameters": [
										{
											"id": 5325,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the cookie to delete.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.deleteCookie",
										"id": 1088
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1159,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.deleteCookie",
								"id": 1088
							}
						},
						{
							"id": 5439,
							"name": "deleteLocalStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5440,
									"name": "deleteLocalStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a value from local storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 5441,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key of the data to delete.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.deleteLocalStorageItem",
										"id": 1206
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2026,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.deleteLocalStorageItem",
								"id": 1206
							}
						},
						{
							"id": 5455,
							"name": "deleteSessionStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5456,
									"name": "deleteSessionStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a value from session storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 5457,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key of the data to delete.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.deleteSessionStorageItem",
										"id": 1222
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2077,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.deleteSessionStorageItem",
								"id": 1222
							}
						},
						{
							"id": 5355,
							"name": "dismissAlert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5356,
									"name": "dismissAlert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dismisses an alert, prompt, or confirmation pop-up. Equivalent to\nclicking the 'OK' button of an alert pop-up or the 'Cancel' button of a\nprompt or confirmation pop-up."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.dismissAlert",
										"id": 1120
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1474,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.dismissAlert",
								"id": 1120
							}
						},
						{
							"id": 5375,
							"name": "doubleClick",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5376,
									"name": "doubleClick",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Double-clicks the primary mouse button."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.doubleClick",
										"id": 1140
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1655,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.doubleClick",
								"id": 1140
							}
						},
						{
							"id": 5400,
							"name": "doubleTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5401,
									"name": "doubleTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a double-tap gesture on an element."
									},
									"parameters": [
										{
											"id": 5402,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The element to double-tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.doubleTap",
										"id": 1165
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1802,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.doubleTap",
								"id": 1165
							}
						},
						{
							"id": 5237,
							"name": "execute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5238,
									"name": "execute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes JavaScript code within the focused window/frame. The code\nshould return a value synchronously.",
										"text": "See [[Session.Session.executeAsync]] to execute code that returns values\nasynchronously.\n",
										"returns": "The value returned by the remote code. Only values that can be\nserialised to JSON, plus DOM elements, can be returned.\n"
									},
									"typeParameter": [
										{
											"id": 5239,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 5240,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code to execute. This function will always be\nconverted to a string, sent to the remote environment, and reassembled\nas a new anonymous function on the remote end. This means that you\ncannot access any variables through closure. If your code needs to get\ndata from variables on the local end, they should be passed using\n`args`.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Function"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 5241,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An array of arguments that will be passed to the executed\ncode. Only values that can be serialised to JSON, plus\n[[Element.Element]] objects, can be specified as arguments.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.execute",
										"id": 1002
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 414,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.execute",
								"id": 1002
							}
						},
						{
							"id": 5242,
							"name": "executeAsync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5243,
									"name": "executeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes JavaScript code within the focused window/frame. The code must\ninvoke the provided callback in order to signal that it has completed\nexecution.",
										"text": "See [[Session.Session.execute]] to execute code that returns values\nsynchronously.\n\nSee [[Session.Session.setExecuteAsyncTimeout]] to set the time until an\nasynchronous script is considered timed out.\n",
										"returns": "The value returned by the remote code. Only values that can be\nserialised to JSON, plus DOM elements, can be returned.\n"
									},
									"typeParameter": [
										{
											"id": 5244,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 5245,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code to execute. This function will always be\nconverted to a string, sent to the remote environment, and reassembled\nas a new anonymous function on the remote end. This means that you\ncannot access any variables through closure. If your code needs to get\ndata from variables on the local end, they should be passed using\n`args`.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Function"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 5246,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An array of arguments that will be passed to the executed\ncode. Only values that can be serialised to JSON, plus\n[[Element.Element]] objects, can be specified as arguments. In addition\nto these arguments, a callback function will always be passed as the\nfinal argument to the function specified in `script`. This callback\nfunction must be invoked in order to signal that execution has\ncompleted. The return value of the execution, if any, should be passed\nto this callback function.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.executeAsync",
										"id": 1007
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 479,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.executeAsync",
								"id": 1007
							}
						},
						{
							"id": 5330,
							"name": "find",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5331,
									"name": "find",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element from the focused window/frame that matches the\ngiven query.",
										"text": "See [[Session.Session.setFindTimeout]] to set the amount of time it the\nremote environment should spend waiting for an element that does not\nexist at the time of the `find` call before timing out.\n"
									},
									"parameters": [
										{
											"id": 5332,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. One of 'class name',\n'css selector', 'id', 'name', 'link text', 'partial link text', 'tag\nname', 'xpath'.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 5333,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. For example, if\n`using` is 'id', `value` should be the ID of the element to retrieve.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.find",
										"id": 802
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.find",
										"id": 1095
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1237,
									"character": 6
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.find",
								"id": 802
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.find",
								"id": 1095
							}
						},
						{
							"id": 5334,
							"name": "findAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5335,
									"name": "findAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets an array of elements from the focused window/frame that match the\ngiven query."
									},
									"parameters": [
										{
											"id": 5336,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Session.Session.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 5337,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Session.Session.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Element",
													"id": 1415
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.findAll",
										"id": 806
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.findAll",
										"id": 1099
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1293,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.findAll",
								"id": 806
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.findAll",
								"id": 1099
							}
						},
						{
							"id": 5507,
							"name": "findAllByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5508,
									"name": "findAllByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS class name."
									},
									"parameters": [
										{
											"id": 5509,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByClassName",
										"id": 842
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 106,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByClassName",
								"id": 842
							}
						},
						{
							"id": 5510,
							"name": "findAllByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5511,
									"name": "findAllByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS selector."
									},
									"parameters": [
										{
											"id": 5512,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByCssSelector",
										"id": 845
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 115,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByCssSelector",
								"id": 845
							}
						},
						{
							"id": 5516,
							"name": "findAllByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5517,
									"name": "findAllByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 5518,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByLinkText",
										"id": 851
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 134,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByLinkText",
								"id": 851
							}
						},
						{
							"id": 5513,
							"name": "findAllByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5514,
									"name": "findAllByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given name attribute."
									},
									"parameters": [
										{
											"id": 5515,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByName",
										"id": 848
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 124,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByName",
								"id": 848
							}
						},
						{
							"id": 5519,
							"name": "findAllByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5520,
									"name": "findAllByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 5521,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByPartialLinkText",
										"id": 854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 144,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByPartialLinkText",
								"id": 854
							}
						},
						{
							"id": 5522,
							"name": "findAllByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5523,
									"name": "findAllByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given HTML tag name."
									},
									"parameters": [
										{
											"id": 5524,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByTagName",
										"id": 857
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 153,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByTagName",
								"id": 857
							}
						},
						{
							"id": 5525,
							"name": "findAllByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5526,
									"name": "findAllByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given XPath selector."
									},
									"parameters": [
										{
											"id": 5527,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByXpath",
										"id": 860
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 162,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByXpath",
								"id": 860
							}
						},
						{
							"id": 5483,
							"name": "findByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5484,
									"name": "findByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS class\nname."
									},
									"parameters": [
										{
											"id": 5485,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByClassName",
										"id": 818
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 28,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByClassName",
								"id": 818
							}
						},
						{
							"id": 5486,
							"name": "findByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5487,
									"name": "findByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS\nselector."
									},
									"parameters": [
										{
											"id": 5488,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByCssSelector",
										"id": 821
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 38,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByCssSelector",
								"id": 821
							}
						},
						{
							"id": 5489,
							"name": "findById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5490,
									"name": "findById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given ID."
									},
									"parameters": [
										{
											"id": 5491,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findById",
										"id": 824
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 47,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findById",
								"id": 824
							}
						},
						{
							"id": 5495,
							"name": "findByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5496,
									"name": "findByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 5497,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByLinkText",
										"id": 830
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 67,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByLinkText",
								"id": 830
							}
						},
						{
							"id": 5492,
							"name": "findByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5493,
									"name": "findByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given name\nattribute."
									},
									"parameters": [
										{
											"id": 5494,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByName",
										"id": 827
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 57,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByName",
								"id": 827
							}
						},
						{
							"id": 5498,
							"name": "findByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5499,
									"name": "findByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 5500,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByPartialLinkText",
										"id": 833
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 77,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByPartialLinkText",
								"id": 833
							}
						},
						{
							"id": 5501,
							"name": "findByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5502,
									"name": "findByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given HTML tag\nname."
									},
									"parameters": [
										{
											"id": 5503,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByTagName",
										"id": 836
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 87,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByTagName",
								"id": 836
							}
						},
						{
							"id": 5504,
							"name": "findByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5505,
									"name": "findByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given XPath\nselector."
									},
									"parameters": [
										{
											"id": 5506,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByXpath",
										"id": 839
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 97,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByXpath",
								"id": 839
							}
						},
						{
							"id": 5460,
							"name": "findDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5461,
									"name": "findDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.Element.isDisplayed|displayed]] element in the\ncurrently active window/frame matching the given query. This is\ninherently slower than [[Session.Session.find]], so should only be used\nin cases where the visibility of an element cannot be ensured in\nadvance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6\n"
											}
										]
									},
									"parameters": [
										{
											"id": 5462,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Session.Session.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 5463,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Session.Session.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.findDisplayed",
										"id": 810
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.findDisplayed",
										"id": 1227
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2104,
									"character": 15
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.findDisplayed",
								"id": 810
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.findDisplayed",
								"id": 1227
							}
						},
						{
							"id": 5528,
							"name": "findDisplayedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5529,
									"name": "findDisplayedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS class name. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 5530,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByClassName",
										"id": 863
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 175,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByClassName",
								"id": 863
							}
						},
						{
							"id": 5531,
							"name": "findDisplayedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5532,
									"name": "findDisplayedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS selector. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 5533,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByCssSelector",
										"id": 866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 188,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByCssSelector",
								"id": 866
							}
						},
						{
							"id": 5534,
							"name": "findDisplayedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5535,
									"name": "findDisplayedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given ID. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 5536,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedById",
										"id": 869
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 201,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedById",
								"id": 869
							}
						},
						{
							"id": 5540,
							"name": "findDisplayedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5541,
									"name": "findDisplayedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 5542,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByLinkText",
										"id": 875
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 227,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByLinkText",
								"id": 875
							}
						},
						{
							"id": 5537,
							"name": "findDisplayedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5538,
									"name": "findDisplayedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given name attribute. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 5539,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByName",
										"id": 872
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 214,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByName",
								"id": 872
							}
						},
						{
							"id": 5543,
							"name": "findDisplayedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5544,
									"name": "findDisplayedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement partially matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 5545,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByPartialLinkText",
										"id": 878
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 240,
									"character": 32
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByPartialLinkText",
								"id": 878
							}
						},
						{
							"id": 5546,
							"name": "findDisplayedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5547,
									"name": "findDisplayedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given HTML tag name. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 5548,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByTagName",
										"id": 881
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 253,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByTagName",
								"id": 881
							}
						},
						{
							"id": 5549,
							"name": "findDisplayedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5550,
									"name": "findDisplayedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given XPath selector. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 5551,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByXpath",
										"id": 884
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 266,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByXpath",
								"id": 884
							}
						},
						{
							"id": 5406,
							"name": "flickFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5407,
									"name": "flickFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Flicks a finger. Note that this method is currently badly specified and\nhighly dysfunctional and is only provided for the sake of completeness."
									},
									"parameters": [
										{
											"id": 5408,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element where the flick should start."
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 5409,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The x-offset in pixels to flick by."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5410,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The x-offset in pixels to flick by."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5411,
											"name": "speed",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The speed of the flick, in pixels per *second*. Most human\nflicks are 100–200ms, so this value will be higher than expected.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.flickFinger",
										"id": 1171
									}
								},
								{
									"id": 5412,
									"name": "flickFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5413,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5414,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5415,
											"name": "speed",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.flickFinger",
										"id": 1171
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1830,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1836,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1842,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.flickFinger",
								"id": 1171
							}
						},
						{
							"id": 5179,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5180,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the browser to a new URL like `leadfoot/Session#get`, but\nretrieves any code coverage data recorded by the browser prior to\nnavigation."
									},
									"parameters": [
										{
											"id": 5181,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Session.get",
										"id": 993
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/ProxiedSession.ts",
									"line": 46,
									"character": 5
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Session.get",
								"id": 993
							}
						},
						{
							"id": 5338,
							"name": "getActiveElement",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ createsContext: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5339,
									"name": "getActiveElement",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the currently focused element from the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getActiveElement",
										"id": 1103
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1344,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getActiveElement",
								"id": 1103
							}
						},
						{
							"id": 5251,
							"name": "getActiveImeEngine",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5252,
									"name": "getActiveImeEngine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the currently active input method editor for the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getActiveImeEngine",
										"id": 1016
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 542,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getActiveImeEngine",
								"id": 1016
							}
						},
						{
							"id": 5348,
							"name": "getAlertText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5349,
									"name": "getAlertText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the text displayed in the currently active alert pop-up."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getAlertText",
										"id": 1113
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1442,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getAlertText",
								"id": 1113
							}
						},
						{
							"id": 5227,
							"name": "getAllWindowHandles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5228,
									"name": "getAllWindowHandles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of identifiers for all currently open windows."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getAllWindowHandles",
										"id": 989
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 315,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getAllWindowHandles",
								"id": 989
							}
						},
						{
							"id": 5426,
							"name": "getApplicationCacheStatus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5427,
									"name": "getApplicationCacheStatus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current state of the HTML5 application cache for the current\npage.",
										"returns": "The cache status. One of 0 (uncached), 1 (cached/idle), 2\n(checking), 3 (downloading), 4 (update ready), 5 (obsolete).\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getApplicationCacheStatus",
										"id": 1191
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1976,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getApplicationCacheStatus",
								"id": 1191
							}
						},
						{
							"id": 5249,
							"name": "getAvailableImeEngines",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5250,
									"name": "getAvailableImeEngines",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of input method editor engines available to the remote\nenvironment. As of April 2014, no known remote environments support IME\nfunctions."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getAvailableImeEngines",
										"id": 1014
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 534,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getAvailableImeEngines",
								"id": 1014
							}
						},
						{
							"id": 5424,
							"name": "getAvailableLogTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5425,
									"name": "getAvailableLogTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the types of logs that are currently available for retrieval from\nthe remote environment."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getAvailableLogTypes",
										"id": 1189
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1961,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getAvailableLogTypes",
								"id": 1189
							}
						},
						{
							"id": 5316,
							"name": "getCookies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5317,
									"name": "getCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all cookies set on the current page."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getCookies",
										"id": 1081
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1032,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getCookies",
								"id": 1081
							}
						},
						{
							"id": 5229,
							"name": "getCurrentUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5230,
									"name": "getCurrentUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the URL that is loaded in the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getCurrentUrl",
										"id": 991
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 345,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getCurrentUrl",
								"id": 991
							}
						},
						{
							"id": 5225,
							"name": "getCurrentWindowHandle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5226,
									"name": "getCurrentWindowHandle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the identifier for the window that is currently focused.",
										"returns": "A window handle identifier that can be used with other window\nhandling functions.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getCurrentWindowHandle",
										"id": 987
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 277,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getCurrentWindowHandle",
								"id": 987
							}
						},
						{
							"id": 5468,
							"name": "getExecuteAsyncTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5469,
									"name": "getExecuteAsyncTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Session.Session.executeAsync]] calls."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getExecuteAsyncTimeout",
										"id": 1235
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2125,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getExecuteAsyncTimeout",
								"id": 1235
							}
						},
						{
							"id": 5473,
							"name": "getFindTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5474,
									"name": "getFindTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Session.Session.find]] calls."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getFindTimeout",
										"id": 1240
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2141,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getFindTimeout",
								"id": 1240
							}
						},
						{
							"id": 5416,
							"name": "getGeolocation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5417,
									"name": "getGeolocation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current geographical location of the remote environment.",
										"returns": "Latitude and longitude are specified using standard WGS84\ndecimal latitude/longitude. Altitude is specified as meters above the\nWGS84 ellipsoid. Not all environments support altitude.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Geolocation",
												"id": 652
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getGeolocation",
										"id": 1181
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1874,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getGeolocation",
								"id": 1181
							}
						},
						{
							"id": 5436,
							"name": "getLocalStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5437,
									"name": "getLocalStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a value from local storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 5438,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key of the data to get.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getLocalStorageItem",
										"id": 1203
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2017,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getLocalStorageItem",
								"id": 1203
							}
						},
						{
							"id": 5428,
							"name": "getLocalStorageKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5429,
									"name": "getLocalStorageKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the list of keys set in local storage for the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getLocalStorageKeys",
										"id": 1195
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1991,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getLocalStorageKeys",
								"id": 1195
							}
						},
						{
							"id": 5442,
							"name": "getLocalStorageLength",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5443,
									"name": "getLocalStorageLength",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the number of keys set in local storage for the focused\nwindow/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getLocalStorageLength",
										"id": 1209
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2034,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getLocalStorageLength",
								"id": 1209
							}
						},
						{
							"id": 5421,
							"name": "getLogsFor",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5422,
									"name": "getLogsFor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all logs from the remote environment of the given type. The logs in\nthe remote environment are cleared once they have been retrieved.",
										"returns": "An array of log entry objects. Timestamps in log entries are\nUnix timestamps, in seconds.\n"
									},
									"parameters": [
										{
											"id": 5423,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of log entries to retrieve. Available log types\ndiffer between remote environments. Use\n[[Session.Session.getAvailableLogTypes]] to learn what log types are\ncurrently available. Not all environments support all possible log\ntypes.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogEntry",
													"id": 656
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getLogsFor",
										"id": 1186
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1919,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getLogsFor",
								"id": 1186
							}
						},
						{
							"id": 5343,
							"name": "getOrientation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5344,
									"name": "getOrientation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current screen orientation.",
										"returns": "Either 'portrait' or 'landscape'.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getOrientation",
										"id": 1108
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1418,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getOrientation",
								"id": 1108
							}
						},
						{
							"id": 5478,
							"name": "getPageLoadTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5479,
									"name": "getPageLoadTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Session.Session.get]] calls."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getPageLoadTimeout",
										"id": 1245
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2157,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getPageLoadTimeout",
								"id": 1245
							}
						},
						{
							"id": 5326,
							"name": "getPageSource",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5327,
									"name": "getPageSource",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the HTML loaded in the focused window/frame. This markup is\nserialised by the remote environment so may not exactly match the HTML\nprovided by the Web server."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getPageSource",
										"id": 1091
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1202,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getPageSource",
								"id": 1091
							}
						},
						{
							"id": 5328,
							"name": "getPageTitle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5329,
									"name": "getPageTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the title of the top-level browsing context of the current window\nor tab."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getPageTitle",
										"id": 1093
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1218,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getPageTitle",
								"id": 1093
							}
						},
						{
							"id": 5452,
							"name": "getSessionStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5453,
									"name": "getSessionStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a value from session storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 5454,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key of the data to get.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getSessionStorageItem",
										"id": 1219
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2068,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getSessionStorageItem",
								"id": 1219
							}
						},
						{
							"id": 5444,
							"name": "getSessionStorageKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5445,
									"name": "getSessionStorageKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the list of keys set in session storage for the focused\nwindow/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getSessionStorageKeys",
										"id": 1211
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2042,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getSessionStorageKeys",
								"id": 1211
							}
						},
						{
							"id": 5458,
							"name": "getSessionStorageLength",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5459,
									"name": "getSessionStorageLength",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the number of keys set in session storage for the focused\nwindow/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getSessionStorageLength",
										"id": 1225
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2085,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getSessionStorageLength",
								"id": 1225
							}
						},
						{
							"id": 5218,
							"name": "getTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5219,
									"name": "getTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current value of a timeout for the session.",
										"returns": "The timeout, in milliseconds.\n"
									},
									"parameters": [
										{
											"id": 5220,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of timeout to retrieve. One of 'script',\n'implicit', or 'page load'."
											},
											"type": {
												"type": "reference",
												"name": "Timeout",
												"id": 1380
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getTimeout",
										"id": 980
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 193,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getTimeout",
								"id": 980
							}
						},
						{
							"id": 5307,
							"name": "getWindowPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5308,
									"name": "getWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the position of a window.",
										"text": "Note that this method is not part of the W3C WebDriver standard.\n",
										"returns": "An object describing the position of the window, in CSS pixels,\nrelative to the top-left corner of the primary monitor. If a secondary\nmonitor exists above or to the left of the primary monitor, these values\nwill be negative.\n"
									},
									"parameters": [
										{
											"id": 5309,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the window to query. See\n[[Session.Session.switchToWindow]] to learn about valid window names.\nOmit this argument to query the currently focused window.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 5310,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5311,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 940,
																	"character": 20
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5312,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 940,
																	"character": 23
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																5311,
																5312
															]
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getWindowPosition",
										"id": 1072
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 936,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getWindowPosition",
								"id": 1072
							}
						},
						{
							"id": 5284,
							"name": "getWindowRect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5285,
									"name": "getWindowRect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return the current window's rectangle (size and position)."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 5286,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5288,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 834,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5287,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 833,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5289,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 835,
																	"character": 7
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5290,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 836,
																	"character": 7
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																5288,
																5287,
																5289,
																5290
															]
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getWindowRect",
										"id": 1049
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 831,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getWindowRect",
								"id": 1049
							}
						},
						{
							"id": 5278,
							"name": "getWindowSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5279,
									"name": "getWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the dimensions of a window.",
										"returns": "An object describing the width and height of the window, in CSS\npixels.\n"
									},
									"parameters": [
										{
											"id": 5280,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the window to query. See\n[[Session.Session.switchToWindow]] to learn about valid window names.\nOmit this argument to query the currently focused window.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 5281,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5283,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 786,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															},
															"defaultValue": " rect.height"
														},
														{
															"id": 5282,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 785,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															},
															"defaultValue": " rect.width"
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																5283,
																5282
															]
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.getWindowSize",
										"id": 1043
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 781,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.getWindowSize",
								"id": 1043
							}
						},
						{
							"id": 5233,
							"name": "goBack",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5234,
									"name": "goBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame back one page using the browser’s\nnavigation history."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.goBack",
										"id": 998
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 376,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.goBack",
								"id": 998
							}
						},
						{
							"id": 5231,
							"name": "goForward",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5232,
									"name": "goForward",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame forward one page using the browser’s\nnavigation history."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.goForward",
										"id": 996
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 366,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.goForward",
								"id": 996
							}
						},
						{
							"id": 5253,
							"name": "isImeActivated",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5254,
									"name": "isImeActivated",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not an input method editor is currently active in the\nremote environment. As of April 2014, no known remote environments\nsupport IME functions."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.isImeActivated",
										"id": 1018
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 551,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.isImeActivated",
								"id": 1018
							}
						},
						{
							"id": 5403,
							"name": "longTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5404,
									"name": "longTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a long-tap gesture on an element."
									},
									"parameters": [
										{
											"id": 5405,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The element to long-tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.longTap",
										"id": 1168
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1815,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.longTap",
								"id": 1168
							}
						},
						{
							"id": 5313,
							"name": "maximizeWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5314,
									"name": "maximizeWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Maximises a window according to the platform’s window system behaviour."
									},
									"parameters": [
										{
											"id": 5315,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the window to resize. See\n[[Session.Session.switchToWindow]] to learn about valid window names.\nOmit this argument to resize the currently focused window.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.maximizeWindow",
										"id": 1078
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 996,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.maximizeWindow",
								"id": 1078
							}
						},
						{
							"id": 5388,
							"name": "moveFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5389,
									"name": "moveFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the last depressed finger to a new point on the touch screen."
									},
									"parameters": [
										{
											"id": 5390,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to move to, maybe in device pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5391,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to move to, maybe in device pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.moveFinger",
										"id": 1153
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1729,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.moveFinger",
								"id": 1153
							}
						},
						{
							"id": 5357,
							"name": "moveMouseTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5358,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the remote environment’s mouse cursor to the specified element or\nrelative position. If the element is outside of the viewport, the remote\ndriver will attempt to scroll it into view automatically."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.moveMouseTo",
										"id": 1122
									}
								},
								{
									"id": 5359,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5360,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 5361,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.moveMouseTo",
										"id": 1122
									}
								},
								{
									"id": 5362,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5363,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 5364,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 5365,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.moveMouseTo",
										"id": 1122
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1499,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1500,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1501,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1507,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.moveMouseTo",
								"id": 1122
							}
						},
						{
							"id": 5380,
							"name": "pressFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5381,
									"name": "pressFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Depresses a new finger at the given point on a touch screen device\nwithout releasing it."
									},
									"parameters": [
										{
											"id": 5382,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to press, maybe in device pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5383,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to press, maybe in device pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.pressFinger",
										"id": 1145
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1703,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.pressFinger",
								"id": 1145
							}
						},
						{
							"id": 5340,
							"name": "pressKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5341,
									"name": "pressKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the focused window/frame/element."
									},
									"parameters": [
										{
											"id": 5342,
											"name": "keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type in the remote environment. It is possible\nto type keys that do not have normal character representations (modifier\nkeys, function keys, etc.) as well as keys that have two different\nrepresentations on a typical US-ASCII keyboard (numpad keys); use the\nvalues from [[keys]] to type these special characters. Any modifier keys\nthat are activated by this call will persist until they are deactivated.\nTo deactivate a modifier key, type the same modifier key a second time,\nor send `\\uE000` ('NULL') to deactivate all currently active modifier\nkeys.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.pressKeys",
										"id": 1105
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1399,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.pressKeys",
								"id": 1105
							}
						},
						{
							"id": 5369,
							"name": "pressMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5370,
									"name": "pressMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Depresses a mouse button without releasing it."
									},
									"parameters": [
										{
											"id": 5371,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to press. See [[Session.Session.click]] for\navailable options.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.pressMouseButton",
										"id": 1134
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1614,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.pressMouseButton",
								"id": 1134
							}
						},
						{
							"id": 5182,
							"name": "quit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5183,
									"name": "quit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Quits the browser like `leadfoot/Session#quit`, but retrieves any code\ncoverage data recorded by the browser prior to quitting."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Session.quit",
										"id": 1193
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/ProxiedSession.ts",
									"line": 70,
									"character": 6
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Session.quit",
								"id": 1193
							}
						},
						{
							"id": 5235,
							"name": "refresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5236,
									"name": "refresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reloads the current browser window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.refresh",
										"id": 1000
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 385,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.refresh",
								"id": 1000
							}
						},
						{
							"id": 5384,
							"name": "releaseFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5385,
									"name": "releaseFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Releases whatever finger exists at the given point on a touch screen\ndevice."
									},
									"parameters": [
										{
											"id": 5386,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate where a finger is pressed, maybe in\ndevice pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5387,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate where a finger is pressed, maybe in\ndevice pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.releaseFinger",
										"id": 1149
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1719,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.releaseFinger",
								"id": 1149
							}
						},
						{
							"id": 5372,
							"name": "releaseMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5373,
									"name": "releaseMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Releases a previously depressed mouse button."
									},
									"parameters": [
										{
											"id": 5374,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to press. See [[Session.Session.click]] for\navailable options.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.releaseMouseButton",
										"id": 1137
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1636,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.releaseMouseButton",
								"id": 1137
							}
						},
						{
							"id": 5212,
							"name": "serverDelete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5213,
									"name": "serverDelete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 5214,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 5215,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5216,
											"name": "requestData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 5217,
											"name": "pathParts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.serverDelete",
										"id": 974
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 182,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.serverDelete",
								"id": 974
							}
						},
						{
							"id": 5200,
							"name": "serverGet",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5201,
									"name": "serverGet",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 5202,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 5203,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5204,
											"name": "requestData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 5205,
											"name": "pathParts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.serverGet",
										"id": 962
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 174,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.serverGet",
								"id": 962
							}
						},
						{
							"id": 5206,
							"name": "serverPost",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5207,
									"name": "serverPost",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 5208,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 5209,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5210,
											"name": "requestData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 5211,
											"name": "pathParts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.serverPost",
										"id": 968
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 178,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.serverPost",
								"id": 968
							}
						},
						{
							"id": 5318,
							"name": "setCookie",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5319,
									"name": "setCookie",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a cookie on the current page."
									},
									"parameters": [
										{
											"id": 5320,
											"name": "cookie",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WebDriverCookie",
												"id": 660
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setCookie",
										"id": 1083
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1066,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setCookie",
								"id": 1083
							}
						},
						{
							"id": 5470,
							"name": "setExecuteAsyncTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5471,
									"name": "setExecuteAsyncTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Session.Session.executeAsync]] calls."
									},
									"parameters": [
										{
											"id": 5472,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setExecuteAsyncTimeout",
										"id": 1237
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2134,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setExecuteAsyncTimeout",
								"id": 1237
							}
						},
						{
							"id": 5475,
							"name": "setFindTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5476,
									"name": "setFindTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Session.Session.find]] calls."
									},
									"parameters": [
										{
											"id": 5477,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setFindTimeout",
										"id": 1242
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2150,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setFindTimeout",
								"id": 1242
							}
						},
						{
							"id": 5418,
							"name": "setGeolocation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5419,
									"name": "setGeolocation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the geographical location of the remote environment."
									},
									"parameters": [
										{
											"id": 5420,
											"name": "location",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Latitude and longitude are specified using standard\nWGS84 decimal latitude/longitude. Altitude is specified as meters above\nthe WGS84 ellipsoid. Not all environments support altitude.\n"
											},
											"type": {
												"type": "reference",
												"name": "Geolocation",
												"id": 652
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setGeolocation",
										"id": 1183
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1896,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setGeolocation",
								"id": 1183
							}
						},
						{
							"id": 5184,
							"name": "setHeartbeatInterval",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5185,
									"name": "setHeartbeatInterval",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets up a timer to send no-op commands to the remote server on an\ninterval to prevent long-running unit tests from causing the session to\ntime out."
									},
									"parameters": [
										{
											"id": 5186,
											"name": "delay",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Amount of time to wait between heartbeats. Setting the delay\nto 0 will disable heartbeats.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/ProxiedSession.ts",
									"line": 89,
									"character": 22
								}
							]
						},
						{
							"id": 5430,
							"name": "setLocalStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5431,
									"name": "setLocalStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a value in local storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 5432,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key to set."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5433,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to set.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setLocalStorageItem",
										"id": 1197
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2001,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setLocalStorageItem",
								"id": 1197
							}
						},
						{
							"id": 5345,
							"name": "setOrientation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5346,
									"name": "setOrientation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the screen orientation."
									},
									"parameters": [
										{
											"id": 5347,
											"name": "orientation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Either 'portrait' or 'landscape'.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setOrientation",
										"id": 1110
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1431,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setOrientation",
								"id": 1110
							}
						},
						{
							"id": 5480,
							"name": "setPageLoadTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5481,
									"name": "setPageLoadTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Session.Session.get]] calls."
									},
									"parameters": [
										{
											"id": 5482,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setPageLoadTimeout",
										"id": 1247
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2166,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setPageLoadTimeout",
								"id": 1247
							}
						},
						{
							"id": 5446,
							"name": "setSessionStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5447,
									"name": "setSessionStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a value in session storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 5448,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key to set."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5449,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to set.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setSessionStorageItem",
										"id": 1213
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2052,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setSessionStorageItem",
								"id": 1213
							}
						},
						{
							"id": 5221,
							"name": "setTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5222,
									"name": "setTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the value of a timeout for the session."
									},
									"parameters": [
										{
											"id": 5223,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of timeout to set. One of 'script', 'implicit', or\n'page load'.\n"
											},
											"type": {
												"type": "reference",
												"name": "Timeout",
												"id": 1380
											}
										},
										{
											"id": 5224,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of time to use for the timeout, in milliseconds. A\nvalue of 0 will cause operations to time out immediately.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setTimeout",
										"id": 983
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 212,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setTimeout",
								"id": 983
							}
						},
						{
							"id": 5299,
							"name": "setWindowPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5300,
									"name": "setWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the position of a window.",
										"text": "Note that this method is not part of the W3C WebDriver standard.\n"
									},
									"parameters": [
										{
											"id": 5301,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to move to, in CSS pixels, relative to\nthe left edge of the primary monitor.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5302,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to move to, in CSS pixels, relative to\nthe top edge of the primary monitor.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setWindowPosition",
										"id": 1064
									}
								},
								{
									"id": 5303,
									"name": "setWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5304,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5305,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5306,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setWindowPosition",
										"id": 1064
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 865,
									"character": 19
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 866,
									"character": 19
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 871,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setWindowPosition",
								"id": 1064
							}
						},
						{
							"id": 5291,
							"name": "setWindowRect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5292,
									"name": "setWindowRect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the current window's rectangle (size and position)."
									},
									"parameters": [
										{
											"id": 5293,
											"name": "rect",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The windows rectangle. This may contain all 4 properties, or\njust x & y, or just width & height.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5294,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5298,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 846,
																	"character": 67
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5297,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 846,
																	"character": 51
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5295,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 846,
																	"character": 25
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 5296,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 846,
																	"character": 36
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																5298,
																5297,
																5295,
																5296
															]
														}
													],
													"sources": [
														{
															"fileName": "src/webdriver/Session.ts",
															"line": 846,
															"character": 21
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setWindowRect",
										"id": 1056
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 846,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setWindowRect",
								"id": 1056
							}
						},
						{
							"id": 5270,
							"name": "setWindowSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5271,
									"name": "setWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the dimensions of a window."
									},
									"parameters": [
										{
											"id": 5272,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new width of the window, in CSS pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5273,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new height of the window, in CSS pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setWindowSize",
										"id": 1035
									}
								},
								{
									"id": 5274,
									"name": "setWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5275,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5276,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5277,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.setWindowSize",
										"id": 1035
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 710,
									"character": 15
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 711,
									"character": 15
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 716,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.setWindowSize",
								"id": 1035
							}
						},
						{
							"id": 5260,
							"name": "switchToFrame",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5261,
									"name": "switchToFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused frame to a new frame."
									},
									"parameters": [
										{
											"id": 5262,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The frame to switch to. In most environments, a number or\nstring value corresponds to a key in the `window.frames` object of the\ncurrently active frame. If `null`, the topmost (default) frame will be\nused. If an Element is provided, it must correspond to a `<frame>` or\n`<iframe>` element.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Element",
														"id": 1415
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.switchToFrame",
										"id": 1025
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 582,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.switchToFrame",
								"id": 1025
							}
						},
						{
							"id": 5266,
							"name": "switchToParentFrame",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5267,
									"name": "switchToParentFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused frame to the parent of the currently\nfocused frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.switchToParentFrame",
										"id": 1031
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 631,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.switchToParentFrame",
								"id": 1031
							}
						},
						{
							"id": 5263,
							"name": "switchToWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5264,
									"name": "switchToWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused window to a new window."
									},
									"parameters": [
										{
											"id": 5265,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The handle of the window to switch to. In mobile\nenvironments and environments based on the W3C WebDriver standard, this\nshould be a handle as returned by\n[[Session.Session.getAllWindowHandles]].\n\nIn environments using the JsonWireProtocol, this value corresponds to\nthe `window.name` property of a window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.switchToWindow",
										"id": 1028
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 618,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.switchToWindow",
								"id": 1028
							}
						},
						{
							"id": 5247,
							"name": "takeScreenshot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5248,
									"name": "takeScreenshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a screenshot of the focused window and returns it in PNG format.",
										"returns": "A buffer containing a PNG image.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.takeScreenshot",
										"id": 1012
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 523,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.takeScreenshot",
								"id": 1012
							}
						},
						{
							"id": 5377,
							"name": "tap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5378,
									"name": "tap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Taps an element on a touch screen device. If the element is outside of\nthe viewport, the remote driver will attempt to scroll it into view\nautomatically."
									},
									"parameters": [
										{
											"id": 5379,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element to tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.tap",
										"id": 1142
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1690,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.tap",
								"id": 1142
							}
						},
						{
							"id": 5392,
							"name": "touchScroll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5393,
									"name": "touchScroll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Scrolls the currently focused window on a touch screen device."
									},
									"parameters": [
										{
											"id": 5394,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An optional x-offset, relative to the left edge of the\nelement, in CSS pixels. If no element is specified, the offset is\nrelative to the previous scroll position of the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 5395,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An optional y-offset, relative to the top edge of the\nelement, in CSS pixels. If no element is specified, the offset is\nrelative to the previous scroll position of the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.touchScroll",
										"id": 1157
									}
								},
								{
									"id": 5396,
									"name": "touchScroll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5397,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 5398,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 5399,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.touchScroll",
										"id": 1157
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1748,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1749,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1755,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.touchScroll",
								"id": 1157
							}
						},
						{
							"id": 5350,
							"name": "typeInPrompt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5351,
									"name": "typeInPrompt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the currently active prompt pop-up."
									},
									"parameters": [
										{
											"id": 5352,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type into the pop-up’s input box.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.typeInPrompt",
										"id": 1115
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1451,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.typeInPrompt",
								"id": 1115
							}
						},
						{
							"id": 5464,
							"name": "waitForDeleted",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5465,
									"name": "waitForDeleted",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements in the currently active window/frame to be\ndestroyed."
									},
									"parameters": [
										{
											"id": 5466,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Session.Session.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 5467,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Session.Session.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.waitForDeleted",
										"id": 814
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Session.waitForDeleted",
										"id": 1231
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2118,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.waitForDeleted",
								"id": 814
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Session.waitForDeleted",
								"id": 1231
							}
						},
						{
							"id": 5552,
							"name": "waitForDeletedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5553,
									"name": "waitForDeletedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS class\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 5554,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByClassName",
										"id": 887
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 276,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByClassName",
								"id": 887
							}
						},
						{
							"id": 5555,
							"name": "waitForDeletedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5556,
									"name": "waitForDeletedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 5557,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByCssSelector",
										"id": 890
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 286,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByCssSelector",
								"id": 890
							}
						},
						{
							"id": 5558,
							"name": "waitForDeletedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5559,
									"name": "waitForDeletedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given ID to be\ndestroyed."
									},
									"parameters": [
										{
											"id": 5560,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedById",
										"id": 893
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 296,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedById",
								"id": 893
							}
						},
						{
							"id": 5564,
							"name": "waitForDeletedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5565,
									"name": "waitForDeletedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 5566,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByLinkText",
										"id": 899
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 316,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByLinkText",
								"id": 899
							}
						},
						{
							"id": 5561,
							"name": "waitForDeletedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5562,
									"name": "waitForDeletedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given name\nattribute to be destroyed."
									},
									"parameters": [
										{
											"id": 5563,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByName",
										"id": 896
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 306,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByName",
								"id": 896
							}
						},
						{
							"id": 5567,
							"name": "waitForDeletedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5568,
									"name": "waitForDeletedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element partially matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 5569,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByPartialLinkText",
										"id": 902
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 326,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByPartialLinkText",
								"id": 902
							}
						},
						{
							"id": 5570,
							"name": "waitForDeletedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5571,
									"name": "waitForDeletedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given HTML tag\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 5572,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByTagName",
										"id": 905
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 336,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByTagName",
								"id": 905
							}
						},
						{
							"id": 5573,
							"name": "waitForDeletedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5574,
									"name": "waitForDeletedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given XPath\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 5575,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByXpath",
										"id": 908
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 346,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByXpath",
								"id": 908
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								5189
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5174,
								5175,
								5176
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								5194,
								5177,
								5198,
								5196
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								5187,
								5353,
								5257,
								5321,
								5434,
								5450,
								5366,
								5268,
								5255,
								5323,
								5439,
								5455,
								5355,
								5375,
								5400,
								5237,
								5242,
								5330,
								5334,
								5507,
								5510,
								5516,
								5513,
								5519,
								5522,
								5525,
								5483,
								5486,
								5489,
								5495,
								5492,
								5498,
								5501,
								5504,
								5460,
								5528,
								5531,
								5534,
								5540,
								5537,
								5543,
								5546,
								5549,
								5406,
								5179,
								5338,
								5251,
								5348,
								5227,
								5426,
								5249,
								5424,
								5316,
								5229,
								5225,
								5468,
								5473,
								5416,
								5436,
								5428,
								5442,
								5421,
								5343,
								5478,
								5326,
								5328,
								5452,
								5444,
								5458,
								5218,
								5307,
								5284,
								5278,
								5233,
								5231,
								5253,
								5403,
								5313,
								5388,
								5357,
								5380,
								5340,
								5369,
								5182,
								5235,
								5384,
								5372,
								5212,
								5200,
								5206,
								5318,
								5470,
								5475,
								5418,
								5184,
								5430,
								5345,
								5480,
								5446,
								5221,
								5299,
								5291,
								5270,
								5260,
								5266,
								5263,
								5247,
								5377,
								5392,
								5350,
								5464,
								5552,
								5555,
								5558,
								5564,
								5561,
								5567,
								5570,
								5573
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/ProxiedSession.ts",
							"line": 19,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Session",
							"id": 950
						}
					]
				},
				{
					"id": 5576,
					"name": "getCoverageData",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5577,
							"name": "getCoverageData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5578,
									"name": "coverageVariable",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/ProxiedSession.ts",
							"line": 6,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						5173
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						5576
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/ProxiedSession.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6070,
			"name": "\"core/lib/RemoteSuite\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/RemoteSuite.ts",
			"children": [
				{
					"id": 6071,
					"name": "RemoteSuite",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "RemoteSuite is a class that acts as a local server for one or more unit test\nsuites being run in a remote browser."
					},
					"children": [
						{
							"id": 6073,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6074,
									"name": "new RemoteSuite",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6075,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Partial",
												"typeArguments": [
													{
														"type": "reference",
														"name": "SuiteOptions",
														"id": 3658
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RemoteSuite",
										"id": 6071
									},
									"overwrites": {
										"type": "reference",
										"name": "Suite.__constructor",
										"id": 3581
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/RemoteSuite.ts",
									"line": 22,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Suite.__constructor",
								"id": 3581
							}
						},
						{
							"id": 6080,
							"name": "after",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run after all the suite's tests have completed"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 15,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SuiteLifecycleFunction",
										"id": 3636
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.after",
								"id": 3567
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.after",
								"id": 3646
							}
						},
						{
							"id": 6081,
							"name": "afterEach",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run after each test has completed"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 20,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.afterEach",
								"id": 3568
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.afterEach",
								"id": 3647
							}
						},
						{
							"id": 6082,
							"name": "async",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A convenience function that generates and returns a special\n[[lib/Deferred.Deferred]] that can be used for asynchronous testing"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 26,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6083,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 6084,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 6085,
															"name": "timeout",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Deferred",
														"id": 3453,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "void"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/Suite.ts",
													"line": 26,
													"character": 8
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.async",
								"id": 3569
							}
						},
						{
							"id": 6086,
							"name": "before",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run before any of this suite's tests are\nstarted"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 32,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SuiteLifecycleFunction",
										"id": 3636
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.before",
								"id": 3573
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.before",
								"id": 3649
							}
						},
						{
							"id": 6087,
							"name": "beforeEach",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run before each test"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 37,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.beforeEach",
								"id": 3574
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.beforeEach",
								"id": 3650
							}
						},
						{
							"id": 6088,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The error that caused this suite to fail"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 40,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "InternError",
										"id": 3473
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.error",
								"id": 3575
							}
						},
						{
							"id": 6072,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/RemoteSuite.ts",
									"line": 22,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "Suite.executor",
								"id": 3588
							}
						},
						{
							"id": 6089,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This suite's parent Suite"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 43,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Suite",
										"id": 3566
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.parent",
								"id": 3576
							}
						},
						{
							"id": 6090,
							"name": "publishAfterSetup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, the suite will emit a suiteStart event after the `before`\ncallback has finished, and will emit a suiteEnd event before the `after`\ncallback has finished."
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 50,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.publishAfterSetup",
								"id": 3577
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.publishAfterSetup",
								"id": 3653
							}
						},
						{
							"id": 6091,
							"name": "skipped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The reason why this suite was skipped"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 53,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.skipped",
								"id": 3578
							}
						},
						{
							"id": 6092,
							"name": "tests",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tests or other suites managed by this suite"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 56,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "reference",
											"name": "Test",
											"id": 3484
										},
										{
											"type": "reference",
											"name": "Suite",
											"id": 3566
										}
									]
								}
							},
							"defaultValue": " []",
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.tests",
								"id": 3579
							}
						},
						{
							"id": 6093,
							"name": "timeElapsed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The time required to run all the tests in this suite"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 59,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.timeElapsed",
								"id": 3580
							}
						},
						{
							"id": 6094,
							"name": "bail",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A flag used to indicate whether a test run should stop after a failed\ntest."
							},
							"getSignature": [
								{
									"id": 6095,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "A flag used to indicate whether a test run should stop after a failed\ntest."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.bail",
										"id": 3584
									}
								}
							],
							"setSignature": [
								{
									"id": 6096,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "A flag used to indicate whether a test run should stop after a failed\ntest."
									},
									"parameters": [
										{
											"id": 6097,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.bail",
										"id": 3584
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 95,
									"character": 10
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 99,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.bail",
								"id": 3584
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.bail",
								"id": 3648
							}
						},
						{
							"id": 6098,
							"name": "grep",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A regular expression used to filter, by test ID, which tests are run."
							},
							"getSignature": [
								{
									"id": 6099,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "A regular expression used to filter, by test ID, which tests are run."
									},
									"type": {
										"type": "reference",
										"name": "RegExp"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.grep",
										"id": 3592
									}
								}
							],
							"setSignature": [
								{
									"id": 6100,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "A regular expression used to filter, by test ID, which tests are run."
									},
									"parameters": [
										{
											"id": 6101,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegExp"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.grep",
										"id": 3592
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 123,
									"character": 10
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 127,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.grep",
								"id": 3592
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.grep",
								"id": 3651
							}
						},
						{
							"id": 6124,
							"name": "hasParent",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not this suite has a parent (for parity with serialized\nSuites)."
							},
							"getSignature": [
								{
									"id": 6125,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not this suite has a parent (for parity with serialized\nSuites)."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.hasParent",
										"id": 3620
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 271,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.hasParent",
								"id": 3620
							}
						},
						{
							"id": 6076,
							"name": "id",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Override Suite#id to exclude the RemoteSuite's name from the generated ID\nsince the RemoteSuite is just a proxy for a remote suite."
							},
							"getSignature": [
								{
									"id": 6077,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Override Suite#id to exclude the RemoteSuite's name from the generated ID\nsince the RemoteSuite is just a proxy for a remote suite."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Suite.id",
										"id": 3600
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/RemoteSuite.ts",
									"line": 41,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Suite.id",
								"id": 3600
							}
						},
						{
							"id": 6102,
							"name": "name",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This suite's name"
							},
							"getSignature": [
								{
									"id": 6103,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "This suite's name"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.name",
										"id": 3596
									}
								}
							],
							"setSignature": [
								{
									"id": 6104,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "This suite's name"
									},
									"parameters": [
										{
											"id": 6105,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.name",
										"id": 3596
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 135,
									"character": 10
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 139,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.name",
								"id": 3596
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.name",
								"id": 3652
							}
						},
						{
							"id": 6120,
							"name": "numFailedTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this test suite and any sub-suites that\nfailed."
							},
							"getSignature": [
								{
									"id": 6121,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this test suite and any sub-suites that\nfailed."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.numFailedTests",
										"id": 3616
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 241,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.numFailedTests",
								"id": 3616
							}
						},
						{
							"id": 6118,
							"name": "numPassedTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this test suite that passed."
							},
							"getSignature": [
								{
									"id": 6119,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this test suite that passed."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.numPassedTests",
										"id": 3614
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 226,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.numPassedTests",
								"id": 3614
							}
						},
						{
							"id": 6122,
							"name": "numSkippedTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this test suite and any sub-suites that were\nskipped."
							},
							"getSignature": [
								{
									"id": 6123,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this test suite and any sub-suites that were\nskipped."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.numSkippedTests",
										"id": 3618
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 256,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.numSkippedTests",
								"id": 3618
							}
						},
						{
							"id": 6116,
							"name": "numTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this suite and any sub-suites. To get only\nthe number of tests for this suite, look at `this.tests.length`."
							},
							"getSignature": [
								{
									"id": 6117,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this suite and any sub-suites. To get only\nthe number of tests for this suite, look at `this.tests.length`."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.numTests",
										"id": 3612
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 214,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.numTests",
								"id": 3612
							}
						},
						{
							"id": 6106,
							"name": "parentId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The unique identifier of the suite's parent."
							},
							"getSignature": [
								{
									"id": 6107,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of the suite's parent."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.parentId",
										"id": 3602
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 164,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.parentId",
								"id": 3602
							}
						},
						{
							"id": 6108,
							"name": "remote",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The WebDriver interface for driving a remote environment. This value is\nonly guaranteed to exist from the before/beforeEach/afterEach/after and\ntest methods, since environments are not instantiated until they are\nactually ready to be tested against."
							},
							"getSignature": [
								{
									"id": 6109,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The WebDriver interface for driving a remote environment. This value is\nonly guaranteed to exist from the before/beforeEach/afterEach/after and\ntest methods, since environments are not instantiated until they are\nactually ready to be tested against."
									},
									"type": {
										"type": "reference",
										"name": "Remote",
										"id": 7283
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.remote",
										"id": 3604
									}
								}
							],
							"setSignature": [
								{
									"id": 6110,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The WebDriver interface for driving a remote environment. This value is\nonly guaranteed to exist from the before/beforeEach/afterEach/after and\ntest methods, since environments are not instantiated until they are\nactually ready to be tested against."
									},
									"parameters": [
										{
											"id": 6111,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Remote",
												"id": 7283
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.remote",
										"id": 3604
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 177,
									"character": 12
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 183,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.remote",
								"id": 3604
							}
						},
						{
							"id": 6112,
							"name": "sessionId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The sessionId of the environment in which the suite executed."
							},
							"getSignature": [
								{
									"id": 6113,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The sessionId of the environment in which the suite executed."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.sessionId",
										"id": 3608
									}
								}
							],
							"setSignature": [
								{
									"id": 6114,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The sessionId of the environment in which the suite executed."
									},
									"parameters": [
										{
											"id": 6115,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.sessionId",
										"id": 3608
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 193,
									"character": 15
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 206,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.sessionId",
								"id": 3608
							}
						},
						{
							"id": 6126,
							"name": "timeout",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6127,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.timeout",
										"id": 3622
									}
								}
							],
							"setSignature": [
								{
									"id": 6128,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6129,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.timeout",
										"id": 3622
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 275,
									"character": 13
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 285,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.timeout",
								"id": 3622
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.timeout",
								"id": 3654
							}
						},
						{
							"id": 6130,
							"name": "add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6131,
									"name": "add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a test or suite to this suite."
									},
									"parameters": [
										{
											"id": 6132,
											"name": "suiteOrTest",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Suite",
														"id": 3566
													},
													{
														"type": "reference",
														"name": "Test",
														"id": 3484
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.add",
										"id": 3626
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 292,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.add",
								"id": 3626
							}
						},
						{
							"id": 6078,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6079,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Run a suite in a remote browser."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Suite.run",
										"id": 3629
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/RemoteSuite.ts",
									"line": 55,
									"character": 5
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Suite.run",
								"id": 3629
							}
						},
						{
							"id": 6133,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6134,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips this suite.",
										"text": "Calling this function will cause all remaining tests in the suite to be\nskipped. If a message was provided, a reporter may report the suite’s\ntests as skipped. Skipped tests are not treated as passing or failing.\n\nIf this method is called from a test function (as this.parent.skip()),\nthe test will be immediately halted, just as if the test’s own skip\nmethod were called.\n"
									},
									"parameters": [
										{
											"id": 6135,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If provided, will be stored in this suite's `skipped`\nproperty.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"suite skipped\""
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.skip",
										"id": 3631
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 728,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.skip",
								"id": 3631
							}
						},
						{
							"id": 6136,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6137,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Suite.toJSON",
										"id": 3634
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 735,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Suite.toJSON",
								"id": 3634
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6073
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6080,
								6081,
								6082,
								6086,
								6087,
								6088,
								6072,
								6089,
								6090,
								6091,
								6092,
								6093
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6094,
								6098,
								6124,
								6076,
								6102,
								6120,
								6118,
								6122,
								6116,
								6106,
								6108,
								6112,
								6126
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6130,
								6078,
								6133,
								6136
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/RemoteSuite.ts",
							"line": 21,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Suite",
							"id": 3566
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "SuiteProperties",
							"id": 3645
						}
					]
				},
				{
					"id": 6162,
					"name": "RemoteConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6167,
							"name": "bail",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "By default, Intern will run all configured tests. Setting this option\nto `true` will cause Intern to stop running tests after the first failure."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 18,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.bail",
								"id": 5000
							}
						},
						{
							"id": 6169,
							"name": "basePath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path to the project base. This will always end with a path separator\n(e.g., /)."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 26,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.basePath",
								"id": 5002
							}
						},
						{
							"id": 6168,
							"name": "baseline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.baseline",
								"id": 5001
							}
						},
						{
							"id": 6170,
							"name": "benchmark",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This property must be set to `true` for benchmark tests to run. If it is\nunset or `false`, any suites registered using the benchmark interface will\nbe ignored."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 33,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.benchmark",
								"id": 5003
							}
						},
						{
							"id": 6171,
							"name": "benchmarkConfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 35,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkConfig",
								"id": 5081
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.benchmarkConfig",
								"id": 5004
							}
						},
						{
							"id": 6172,
							"name": "browser",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 37,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "ResourceConfig",
								"id": 5072
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.browser",
								"id": 5005
							}
						},
						{
							"id": 6183,
							"name": "capabilities",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The default capabilities for all test environments.",
								"text": "They will be extended for each environment by values in the\n[`environments`](#environments) array.\n\nCloud testing services such as BrowserStack may have unique capabilities.\nIt’s important to use the proper capabilities for the WebDriver server or\ncloud service being used to run tests.\n\n* [Selenium capabilities](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities)\n* [BrowserStack capabilities](https://www.browserstack.com/automate/capabilities)\n* [CrossBrowserTesting capabilities](https://help.crossbrowsertesting.com/selenium-testing/automation-capabilities)\n* [Sauce Labs capabilities](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-Selenium-SpecificOptions) and [environments](https://saucelabs.com/platforms)\n* [TestingBot capabilities](https://testingbot.com/support/other/test-options) and [environments](https://testingbot.com/support/getting-started/browsers.html)\n\n[Chrome-specific options](https://sites.google.com/a/chromium.org/chromedriver/capabilities)\nmay be passed using a `goog:chromeOptions` capability.\n\n[Firefox-specific options](https://github.com/mozilla/geckodriver#firefox-capabilities)\nmay be passed using a `moz:firefoxOptions` capability.\n\nIntern will automatically provide certain capabilities to provide better\nfeedback with cloud service dashboards:\n\n* `name` will be set to the name of the test config\n* `build` will be set to the commit ID from the `TRAVIS_COMMIT` and\n  `BUILD_TAG` environment variables, if either exists\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 124,
									"character": 14
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 6184,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 6187,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 6188,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"children": [
										{
											"id": 6186,
											"name": "build",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 126,
													"character": 9
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 6185,
											"name": "name",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 125,
													"character": 8
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												6186,
												6185
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/common/config.ts",
											"line": 124,
											"character": 15
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.capabilities",
								"id": 5017
							}
						},
						{
							"id": 6189,
							"name": "connectTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Time to wait for contact from a remote server"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 131,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.connectTimeout",
								"id": 5023
							}
						},
						{
							"id": 6190,
							"name": "coverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of file paths or globs that should be instrumented for code\ncoverage, or false to completely disable coverage.",
								"text": "This property should point to the actual JavaScript files that will be\nexecuted, not pre-transpiled sources (coverage results will still be\nmapped back to original sources). Coverage data will be collected for\nthese files even if they’re not loaded by Intern for tests, allowing a\ntest writer to see which files _haven’t_ been tested, as well as coverage\non files that were tested.\n\nWhen this value is unset, Intern will still look for coverage data on a\nglobal coverage variable, and it will request coverage data from remote\nsessions. Explicitly setting coverage to false will prevent Intern from\neven checking for coverage data.\n\n> 💡This property replaces the `excludeInstrumentation` property used in\nprevious versions of Intern, which acted as a filter rather than an\ninclusive list.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 153,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.coverage",
								"id": 5024
							}
						},
						{
							"id": 6173,
							"name": "coverageVariable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The global variable that will be used to store coverage data"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 42,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.coverageVariable",
								"id": 5006
							}
						},
						{
							"id": 6174,
							"name": "debug",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "When set to true, Intern will emit 'log' events for many internal\noperations. Reporters that register for these events, such as the Runner\nreporter, will display them during testing."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 49,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.debug",
								"id": 5007
							}
						},
						{
							"id": 6175,
							"name": "defaultTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This is the number of milliseconds that Intern will wait for an\n[asynchronous test](https://github.com/theintern/intern/blob/master/docs/writing_tests.md#testing-asynchronous-code)\nto complete before timing out. A timed out test is considered to have\nfailed."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 57,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.defaultTimeout",
								"id": 5008
							}
						},
						{
							"id": 6176,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A description for this test run"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 60,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.description",
								"id": 5009
							}
						},
						{
							"id": 6191,
							"name": "environments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The environments that will be used to run tests.",
								"text": "Its value can be a single browser name or an environment object, or an\narray of these.\n\n```js\nenvironments: 'chrome'\nenvironments: ['chrome', 'firefox']\nenvironments: { browserName: 'chrome', version: '57.0' }\nenvironments: { browserName: 'chrome', fixSessionCapabilities: false }\n```\n\nThe syntax for browser names and other properties depends on where tests\nare being run. For example, when running tests using a local Selenium\nserver, the browser name should be the lowercase name of a locally\navailable browser, such as ‘chrome’ or ‘firefox’, and other properties\nsuch as the platform name will generally be ignored. When running on a\ncloud testing service such as [Sauce Labs](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-RequiredSeleniumTestConfigurationSettings)\nor [BrowserStack](https://www.browserstack.com/automate/capabilities),\nbrowser names and other properties may have different acceptable values\n(e.g., ‘googlechrome’ instead of ‘chrome’, or ‘MacOS’ vs ‘OSX’).\n\nThe [fixSessionCapabilities](https://theintern.io/docs.html#Leadfoot/2/api/Server/fixsessioncapabilities)\nproperty determines whether feature and defect tests will be run in the\nremote browser. Setting it to `false` entirely disables feature tests\n(assuming that all features are enabled), while setting it to\n`'no-detect'` will set certain already-known feature and defect flags\nbased on the browser and platform. The current set of capabilities are\navailable on `this.remote.session.capabilities` in functional tests.\n\n> 💡Note that 'node' is an environment. If no environments are specified,\nthe Node executor will automatically add 'node' to the resolved config.\nIf any environments are specified, though, unit tests will only be run in\nthis environments.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 191,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "EnvironmentSpec",
									"id": 5090
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.environments",
								"id": 5025
							}
						},
						{
							"id": 6192,
							"name": "excludeInstrumentation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 194,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.excludeInstrumentation",
								"id": 5026
							}
						},
						{
							"id": 6177,
							"name": "filterErrorStack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, filter external library calls and runtime calls out of error\nstacks."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 66,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.filterErrorStack",
								"id": 5010
							}
						},
						{
							"id": 6193,
							"name": "functionalBaseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The base URL to use for relative addresses in functional tests"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 197,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.functionalBaseUrl",
								"id": 5027
							}
						},
						{
							"id": 6194,
							"name": "functionalCoverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether to collect coverage data from functional tests"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 200,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.functionalCoverage",
								"id": 5028
							}
						},
						{
							"id": 6195,
							"name": "functionalSuites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of paths or glob expressions that point to functional suites.",
								"text": "Functional suites are files that register\n[WebDriver tests](writing_tests.md).\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 208,
									"character": 18
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.functionalSuites",
								"id": 5029
							}
						},
						{
							"id": 6196,
							"name": "functionalTimeouts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Default timeout values for functional tests",
								"text": "  * **find** is the time to wait for findBy commands to find an element\n  * **executeAsync** is the time to wait for executeAsync calls to\n    complete\n  * **pageLoad** is the time to wait for a page to finish loading\n    synchronous resources\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 219,
									"character": 20
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 6197,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 6198,
											"name": "connectTimeout",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 221,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "undefined"
											}
										},
										{
											"id": 6200,
											"name": "executeAsync",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Time to wait for an executeAsync to complete"
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 227,
													"character": 16
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 6199,
											"name": "find",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Time to wait for a findBy command to find a matching element"
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 224,
													"character": 8
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 6201,
											"name": "pageLoad",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Time to wait for initial page load to complete"
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 230,
													"character": 12
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												6198,
												6200,
												6199,
												6201
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/common/config.ts",
											"line": 219,
											"character": 21
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.functionalTimeouts",
								"id": 5030
							}
						},
						{
							"id": 6178,
							"name": "grep",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This property is a regular expression that is used to filter which tests\nare run. Grep operates on test IDs. A test ID is the concatenation of a\ntest name with all of its parent suite names. Every test ID that matches\nthe current grep expression will be run."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 74,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "RegExp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.grep",
								"id": 5011
							}
						},
						{
							"id": 6202,
							"name": "heartbeatInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How often to send a heartbeat message to a remote browser, in seconds"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 234,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.heartbeatInterval",
								"id": 5036
							}
						},
						{
							"id": 6203,
							"name": "instrumenterOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An object containing options for the\n[Istanbul instrumenter](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#instrumenter)."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 240,
									"character": 21
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 6204,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 6205,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 6206,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/common/config.ts",
											"line": 240,
											"character": 22
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.instrumenterOptions",
								"id": 5037
							}
						},
						{
							"id": 6179,
							"name": "internPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path to Intern. This will always end with a path separator (e.g., /)."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 79,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.internPath",
								"id": 5012
							}
						},
						{
							"id": 6207,
							"name": "leaveRemoteOpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether to leave the remote browser open after testing.",
								"text": "Normally when Intern runs tests on remote browsers, it shuts the browser\ndown when testing is finished. However, you may sometimes want to inspect\nthe state of a remote browser after tests have run, particularly if\nyou're trying to debug why a test is failing. Setting `leaveRemoteOpen`\nto true will cause Intern to leave the browser open after testing.\nSetting it to `'fail'` will cause Intern to leave it open only if there\nwere test failures.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 253,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "fail"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.leaveRemoteOpen",
								"id": 5041
							}
						},
						{
							"id": 6216,
							"name": "loader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The loader used to load test suites and application modules.",
								"text": "When passed in as part of a config object, the `loader` property can be a\nstring with a loader name or the path to a loader script. It may also be\nan object with `script` and `config` properties. Intern provides built-in\nloader scripts for Dojo and Dojo2, which can be specified with the IDs\n'dojo' and 'dojo2'.\n\n```ts\nloader: 'dojo2'\nloader: 'tests/loader.js'\nloader: {\n    script: 'dojo',\n    config: {\n        packages: [\n            { name: 'app', location: './js' }\n        ]\n    }\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 415,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "LoaderDescriptor",
								"id": 5084
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.loader",
								"id": 5073
							}
						},
						{
							"id": 6208,
							"name": "maxConcurrency",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of concurrent remote test sessions to run at once.",
								"text": "The default value is Infinity, meaning Intern will try to run all of its\ntest sessions in parallel. Note that cloud testing services often limit\nthe number of concurrent sessions they will allow to 2 or 5.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 262,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.maxConcurrency",
								"id": 5042
							}
						},
						{
							"id": 6180,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A top-level name for this configuration."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 82,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.name",
								"id": 5013
							}
						},
						{
							"id": 6181,
							"name": "node",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 84,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "ResourceConfig",
								"id": 5072
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.node",
								"id": 5014
							}
						},
						{
							"id": 6218,
							"name": "plugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of scripts or modules to load before suites are loaded."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 459,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "PluginDescriptor",
									"id": 5064
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.plugins",
								"id": 5075
							}
						},
						{
							"id": 6209,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A proxy that should be used for outgoing web connections. If specified,\nthis will be used for Intern's WebDriver client instead of the Dig Dug\ntunnel's proxy value."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 269,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.proxy",
								"id": 5043
							}
						},
						{
							"id": 6217,
							"name": "reporters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of reporter names or descriptors.",
								"text": "Reporters specified in this list must have been previously installed\nusing\n[`registerReporter`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerreporter)\nor\n[`registerPlugin`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerplugin).\n\nList entries may be reporter names or objects of the format\n\n```js\n{\n    name: 'reporter name',\n    options: {\n        // reporter-specific options\n    }\n}\n```\n\nThe built-in reporters under Node are:\n  * benchmark - output benchmark test results\n  * cobertura - output coverage data in the cobertura format\n  * htmlcoverage - output coverage data as an HTML report\n  * jsoncoverage - output coverage data in a JSON format\n  * junit - output results in JUnit format\n  * lcov - output coverage results in lcov format\n  * pretty - draw text results in a terminal\n  * runner - output test results as formatted text (default Node reporter)\n  * simple - output test results as simple text\n  * teamcity - output results in TeamCity format\n\nThe built-in reporters available in browsers are:\n  * console - output to the browser console\n  * dom - output results as text in the DOM\n  * html - output a pretty HTML report (default browser reporter)\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 454,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ReporterDescriptor",
									"id": 5061
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.reporters",
								"id": 5074
							}
						},
						{
							"id": 6221,
							"name": "require",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 486,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.require",
								"id": 5078
							}
						},
						{
							"id": 6222,
							"name": "requires",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 487,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.requires",
								"id": 5079
							}
						},
						{
							"id": 6165,
							"name": "runInSync",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/RemoteSuite.ts",
									"line": 302,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"overwrites": {
								"type": "reference",
								"name": "Config.runInSync",
								"id": 5044
							}
						},
						{
							"id": 6223,
							"name": "scripts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 488,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.scripts",
								"id": 5080
							}
						},
						{
							"id": 6210,
							"name": "serveOnly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, start Intern's static test server but do not run any tests."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 278,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.serveOnly",
								"id": 5045
							}
						},
						{
							"id": 6211,
							"name": "serverPort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The port Intern's static server will listen on during functional tests."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 283,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.serverPort",
								"id": 5046
							}
						},
						{
							"id": 6163,
							"name": "serverUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/RemoteSuite.ts",
									"line": 300,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Config.serverUrl",
								"id": 5047
							}
						},
						{
							"id": 6164,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/RemoteSuite.ts",
									"line": 301,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Config.sessionId",
								"id": 5015
							}
						},
						{
							"id": 6182,
							"name": "showConfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, display the resolved config and exit"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 93,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.showConfig",
								"id": 5016
							}
						},
						{
							"id": 6166,
							"name": "socketPort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/RemoteSuite.ts",
									"line": 303,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "Config.socketPort",
								"id": 5048
							}
						},
						{
							"id": 6219,
							"name": "suites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of paths or glob expressions that point to suite scripts.",
								"text": "```js\n{\n    suites: [\n        'tests/unit/**\\/*.js',\n        'tests/intergration/request.js'\n    ]\n}\n```\n\nNote that using globs with the browser client requires that Intern's\nserver be used to serve the tests. The server can be run in standalone\nmode by setting the `serveOnly` option.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 477,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.suites",
								"id": 5076
							}
						},
						{
							"id": 6220,
							"name": "tsconfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An optional path to a tsconfig for ts-node, or false if TypeScript\nsupport is not needed. This option can be used if tests need to use a\ndifferent tsconfig than the project uses normally."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 484,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "false"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.tsconfig",
								"id": 5077
							}
						},
						{
							"id": 6212,
							"name": "tunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Dig Dug tunnel class to use for WebDriver testing.",
								"text": "There are several built in tunnel types, and others can be added through\nthe Node executor’s [`registerPlugin`\nmethod](./architecture.md#extension-points).\n\nThe built in tunnel classes are:\n\n* 'null'\n* 'selenium'\n* 'browserstack'\n* 'cbt' (CrossBrowserTesting)\n* 'saucelabs'\n* 'testingbot'\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 316,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.tunnel",
								"id": 5049
							}
						},
						{
							"id": 6213,
							"name": "tunnelOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Options for the currently selected tunnel.",
								"text": "The available options depend on the current tunnel. Common options\ninclude:\n\n** All tunnels**\n\n| Property   | Value                                                    |\n| :---       | :---                                                     |\n| `username` | Username for the tunnel service (e.g., BrowserStack)     |\n| `apiKey`   | API key for the tunnel service (e.g., BrowserStack)      |\n| `pathname` | The path for the tunnel’s REST endpoint (e.g., `wd/hub`) |\n\n**Selenium tunnel**\n\n| Property  | Value                                                                   |\n| :---      | :---                                                                    |\n| `drivers` | A list of driver names, or objects with `name` and `options` properties |\n| `verbose` | If true, show tunnel debug information                                  |\n\nSee also:\n\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/Tunnel/tunnelproperties|Tunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/SeleniumTunnel/seleniumproperties|SeleniumTunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/BrowserStackTunnel/browserstackproperties|BrowserStackTunnel]]\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 345,
									"character": 15
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TunnelOptions",
										"id": 2475
									},
									{
										"type": "reference",
										"name": "BrowserStackOptions",
										"id": 2927
									},
									{
										"type": "reference",
										"name": "SeleniumOptions",
										"id": 2770
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.tunnelOptions",
								"id": 5050
							}
						},
						{
							"id": 6215,
							"name": "warnOnUncaughtException",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled error. This setting allows unhandled errors to be\ntreated as warnings instead of failing errors. If this setting is true or\nset to a RegExp that matches an unhandled error, Intern will emit a warning\nrather than failing the test run."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 363,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "RegExp"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.warnOnUncaughtException",
								"id": 5052
							}
						},
						{
							"id": 6214,
							"name": "warnOnUnhandledRejection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled Promise rejection. This setting allows unhandled\nrejections to be treated as warnings instead of failing errors. If this\nsetting is true or set to a RegExp that matches the reason for an unhandled\nrejection, Intern will emit a warning rather than failing the test run."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 354,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "RegExp"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Config.warnOnUnhandledRejection",
								"id": 5051
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6167,
								6169,
								6168,
								6170,
								6171,
								6172,
								6183,
								6189,
								6190,
								6173,
								6174,
								6175,
								6176,
								6191,
								6192,
								6177,
								6193,
								6194,
								6195,
								6196,
								6178,
								6202,
								6203,
								6179,
								6207,
								6216,
								6208,
								6180,
								6181,
								6218,
								6209,
								6217,
								6221,
								6222,
								6165,
								6223,
								6210,
								6211,
								6163,
								6164,
								6182,
								6166,
								6219,
								6220,
								6212,
								6213,
								6215,
								6214
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/RemoteSuite.ts",
							"line": 299,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Config",
							"id": 4999
						}
					]
				},
				{
					"id": 6138,
					"name": "RemoteEvents",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6146,
							"name": "*",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A listener can listen for this event to be notified of all events"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1068,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ExecutorEvent",
								"id": 4796
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.'*'",
								"id": 4800
							}
						},
						{
							"id": 6147,
							"name": "afterRun",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted after the local executor has finished running suites. This is\nfunctionally the same as runEnd."
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1074,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.afterRun",
								"id": 4801
							}
						},
						{
							"id": 6148,
							"name": "beforeRun",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted before the local executor loads suites"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1077,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.beforeRun",
								"id": 4802
							}
						},
						{
							"id": 6149,
							"name": "coverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Coverage info has been gathered"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1080,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "CoverageMessage",
								"id": 4788
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.coverage",
								"id": 4803
							}
						},
						{
							"id": 6150,
							"name": "deprecated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A deprecated method was called"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1083,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "DeprecationMessage",
								"id": 4792
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.deprecated",
								"id": 4804
							}
						},
						{
							"id": 6151,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An unhandled error occurs"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1086,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Error"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.error",
								"id": 4805
							}
						},
						{
							"id": 6152,
							"name": "log",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A debug log event"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1089,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.log",
								"id": 4806
							}
						},
						{
							"id": 6139,
							"name": "remoteStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/RemoteSuite.ts",
									"line": 296,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 6153,
							"name": "runEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "All tests have finished running. This is functionally the same as\nafterRun."
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1095,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.runEnd",
								"id": 4807
							}
						},
						{
							"id": 6154,
							"name": "runStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted just before tests start running"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1098,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.runStart",
								"id": 4808
							}
						},
						{
							"id": 6140,
							"name": "serverEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A test server has stopped"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1003,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Server",
								"id": 6285
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NodeEvents.serverEnd",
								"id": 7731
							}
						},
						{
							"id": 6141,
							"name": "serverStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A test server was started"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1006,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Server",
								"id": 6285
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NodeEvents.serverStart",
								"id": 7732
							}
						},
						{
							"id": 6155,
							"name": "suiteAdd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A new suite has been added"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1101,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.suiteAdd",
								"id": 4809
							}
						},
						{
							"id": 6156,
							"name": "suiteEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A suite has fininshed running"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1104,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.suiteEnd",
								"id": 4810
							}
						},
						{
							"id": 6157,
							"name": "suiteStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A suite has started running"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1107,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.suiteStart",
								"id": 4811
							}
						},
						{
							"id": 6158,
							"name": "testAdd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A new test has been added"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Test",
								"id": 3484
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.testAdd",
								"id": 4812
							}
						},
						{
							"id": 6159,
							"name": "testEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A test has finished"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1113,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Test",
								"id": 3484
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.testEnd",
								"id": 4813
							}
						},
						{
							"id": 6160,
							"name": "testStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A test has started"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1116,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Test",
								"id": 3484
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.testStart",
								"id": 4814
							}
						},
						{
							"id": 6142,
							"name": "tunnelDownloadProgress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted as a Tunnel executable download is in process"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1009,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "TunnelMessage",
								"id": 7726
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NodeEvents.tunnelDownloadProgress",
								"id": 7733
							}
						},
						{
							"id": 6143,
							"name": "tunnelStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A WebDriver tunnel has been opened"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1012,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TunnelMessage",
								"id": 7726
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NodeEvents.tunnelStart",
								"id": 7734
							}
						},
						{
							"id": 6144,
							"name": "tunnelStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A status update from a WebDriver tunnel"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1015,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "TunnelMessage",
								"id": 7726
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NodeEvents.tunnelStatus",
								"id": 7735
							}
						},
						{
							"id": 6145,
							"name": "tunnelStop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A WebDriver tunnel has been stopped"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1018,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "TunnelMessage",
								"id": 7726
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "NodeEvents.tunnelStop",
								"id": 7736
							}
						},
						{
							"id": 6161,
							"name": "warning",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A non-fatal error occurred"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1119,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.warning",
								"id": 4815
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6146,
								6147,
								6148,
								6149,
								6150,
								6151,
								6152,
								6139,
								6153,
								6154,
								6140,
								6141,
								6155,
								6156,
								6157,
								6158,
								6159,
								6160,
								6142,
								6143,
								6144,
								6145,
								6161
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/RemoteSuite.ts",
							"line": 295,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "NodeEvents",
							"id": 7730
						}
					]
				},
				{
					"id": 6224,
					"name": "intern",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/RemoteSuite.ts",
							"line": 15,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Browser",
						"id": 5903
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6071
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						6162,
						6138
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						6224
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/RemoteSuite.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6277,
			"name": "\"core/lib/Server\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/Server.ts",
			"children": [
				{
					"id": 6285,
					"name": "Server",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6302,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6303,
									"name": "new Server",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6304,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ServerOptions",
												"id": 6323
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Server",
										"id": 6285
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 55,
									"character": 52
								}
							]
						},
						{
							"id": 6293,
							"name": "_app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 50,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "express.Express"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 6294,
							"name": "_httpServer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 51,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "HttpServer"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 6295,
							"name": "_sessions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 52,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6296,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6297,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6298,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 6299,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 6300,
																	"name": "listeners",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/core/lib/Server.ts",
																			"line": 53,
																			"character": 33
																		}
																	],
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"name": "ServerListener",
																			"id": 6319
																		}
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		6300
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/core/lib/Server.ts",
																	"line": 53,
																	"character": 21
																}
															]
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/Server.ts",
													"line": 53,
													"character": 5
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 6301,
							"name": "_wsServer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 55,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Server"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 6287,
							"name": "basePath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Base path to resolve file requests against"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 32,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ServerProperties.basePath",
								"id": 6314
							}
						},
						{
							"id": 6286,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Executor managing this Server"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 29,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"implementationOf": {
								"type": "reference",
								"name": "ServerProperties.executor",
								"id": 6315
							}
						},
						{
							"id": 6288,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Port to use for HTTP connections"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 35,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ServerProperties.port",
								"id": 6316
							}
						},
						{
							"id": 6289,
							"name": "runInSync",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, wait for emit handlers to complete before responding to a\nmessage"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 41,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ServerProperties.runInSync",
								"id": 6317
							}
						},
						{
							"id": 6290,
							"name": "socketPort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Port to use for WebSocket connections"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 44,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ServerProperties.socketPort",
								"id": 6318
							}
						},
						{
							"id": 6291,
							"name": "stopped",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6292,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 46,
									"character": 13
								}
							]
						},
						{
							"id": 6305,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6306,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 68,
									"character": 7
								}
							]
						},
						{
							"id": 6307,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6308,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 232,
									"character": 6
								}
							]
						},
						{
							"id": 6309,
							"name": "subscribe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6310,
									"name": "subscribe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen for all events for a specific session"
									},
									"parameters": [
										{
											"id": 6311,
											"name": "sessionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6312,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ServerListener",
												"id": 6319
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 264,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6302
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6293,
								6294,
								6295,
								6301,
								6287,
								6286,
								6288,
								6289,
								6290
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6291
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6305,
								6307,
								6309
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Server.ts",
							"line": 27,
							"character": 27
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ServerProperties",
							"id": 6313
						}
					]
				},
				{
					"id": 6278,
					"name": "Context",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6280,
							"name": "basePath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 22,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 6281,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 23,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							}
						},
						{
							"id": 6279,
							"name": "stopped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 21,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 6282,
							"name": "handleMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6283,
									"name": "handleMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6284,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Message",
												"id": 6245
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 24,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6280,
								6281,
								6279
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6282
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Server.ts",
							"line": 20,
							"character": 24
						}
					]
				},
				{
					"id": 6319,
					"name": "ServerListener",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 6320,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6321,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6322,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Server.ts",
							"line": 350,
							"character": 31
						}
					]
				},
				{
					"id": 6313,
					"name": "ServerProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6314,
							"name": "basePath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 343,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 6315,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 344,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							}
						},
						{
							"id": 6316,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 345,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 6317,
							"name": "runInSync",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 346,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 6318,
							"name": "socketPort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Server.ts",
									"line": 347,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6314,
								6315,
								6316,
								6317,
								6318
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Server.ts",
							"line": 342,
							"character": 33
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "Server",
							"id": 6285
						}
					]
				},
				{
					"id": 6323,
					"name": "ServerOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/Server.ts",
							"line": 354,
							"character": 25
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Partial",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ServerProperties",
										"id": 6313
									}
								]
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 6324,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 6325,
											"name": "executor",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/Server.ts",
													"line": 354,
													"character": 66
												}
											],
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												6325
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/Server.ts",
											"line": 354,
											"character": 55
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 6326,
					"name": "resolvedPromise",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/Server.ts",
							"line": 356,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"name": "Promise",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						]
					},
					"defaultValue": " Promise.resolve()"
				},
				{
					"id": 6327,
					"name": "getShouldWait",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 6328,
							"name": "getShouldWait",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Indicate whether Server should wait for an event to process before sending an\nacknowlegement."
							},
							"parameters": [
								{
									"id": 6329,
									"name": "waitMode",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								},
								{
									"id": 6330,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Message",
										"id": 6245
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Server.ts",
							"line": 362,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6285
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						6278,
						6319,
						6313
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						6323
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						6326
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6327
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/Server.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3565,
			"name": "\"core/lib/Suite\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/Suite.ts",
			"children": [
				{
					"id": 3566,
					"name": "Suite",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Suite class manages a group of tests."
					},
					"children": [
						{
							"id": 3581,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 3582,
									"name": "new Suite",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 3583,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "an object with default property values\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "SuiteOptions",
														"id": 3658
													},
													{
														"type": "reference",
														"name": "RootSuiteOptions",
														"id": 3663
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Suite",
										"id": 3566
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 67,
									"character": 39
								}
							]
						},
						{
							"id": 3567,
							"name": "after",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run after all the suite's tests have completed"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 15,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SuiteLifecycleFunction",
										"id": 3636
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.after",
								"id": 3646
							}
						},
						{
							"id": 3568,
							"name": "afterEach",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run after each test has completed"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 20,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.afterEach",
								"id": 3647
							}
						},
						{
							"id": 3569,
							"name": "async",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A convenience function that generates and returns a special\n[[lib/Deferred.Deferred]] that can be used for asynchronous testing"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 26,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 3570,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 3571,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 3572,
															"name": "timeout",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Deferred",
														"id": 3453,
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "void"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/Suite.ts",
													"line": 26,
													"character": 8
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3573,
							"name": "before",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run before any of this suite's tests are\nstarted"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 32,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SuiteLifecycleFunction",
										"id": 3636
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.before",
								"id": 3649
							}
						},
						{
							"id": 3574,
							"name": "beforeEach",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An optional method that is run before each test"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 37,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.beforeEach",
								"id": 3650
							}
						},
						{
							"id": 3575,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The error that caused this suite to fail"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 40,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "InternError",
										"id": 3473
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3576,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This suite's parent Suite"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 43,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Suite",
										"id": 3566
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3577,
							"name": "publishAfterSetup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, the suite will emit a suiteStart event after the `before`\ncallback has finished, and will emit a suiteEnd event before the `after`\ncallback has finished."
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 50,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.publishAfterSetup",
								"id": 3653
							}
						},
						{
							"id": 3578,
							"name": "skipped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The reason why this suite was skipped"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 53,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3579,
							"name": "tests",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tests or other suites managed by this suite"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 56,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "reference",
											"name": "Test",
											"id": 3484
										},
										{
											"type": "reference",
											"name": "Suite",
											"id": 3566
										}
									]
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 3580,
							"name": "timeElapsed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The time required to run all the tests in this suite"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 59,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3584,
							"name": "bail",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A flag used to indicate whether a test run should stop after a failed\ntest."
							},
							"getSignature": [
								{
									"id": 3585,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "A flag used to indicate whether a test run should stop after a failed\ntest."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"setSignature": [
								{
									"id": 3586,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "A flag used to indicate whether a test run should stop after a failed\ntest."
									},
									"parameters": [
										{
											"id": 3587,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 95,
									"character": 10
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 99,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.bail",
								"id": 3648
							}
						},
						{
							"id": 3588,
							"name": "executor",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The executor used to run this Suite."
							},
							"getSignature": [
								{
									"id": 3589,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The executor used to run this Suite."
									},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									}
								}
							],
							"setSignature": [
								{
									"id": 3590,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The executor used to run this Suite."
									},
									"parameters": [
										{
											"id": 3591,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 106,
									"character": 14
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 111,
									"character": 14
								}
							]
						},
						{
							"id": 3592,
							"name": "grep",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A regular expression used to filter, by test ID, which tests are run."
							},
							"getSignature": [
								{
									"id": 3593,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "A regular expression used to filter, by test ID, which tests are run."
									},
									"type": {
										"type": "reference",
										"name": "RegExp"
									}
								}
							],
							"setSignature": [
								{
									"id": 3594,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "A regular expression used to filter, by test ID, which tests are run."
									},
									"parameters": [
										{
											"id": 3595,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegExp"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 123,
									"character": 10
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 127,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.grep",
								"id": 3651
							}
						},
						{
							"id": 3620,
							"name": "hasParent",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not this suite has a parent (for parity with serialized\nSuites)."
							},
							"getSignature": [
								{
									"id": 3621,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not this suite has a parent (for parity with serialized\nSuites)."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 271,
									"character": 15
								}
							]
						},
						{
							"id": 3600,
							"name": "id",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The unique identifier of the suite, assuming all combinations of suite +\ntest are unique."
							},
							"getSignature": [
								{
									"id": 3601,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of the suite, assuming all combinations of suite +\ntest are unique."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 150,
									"character": 8
								}
							]
						},
						{
							"id": 3596,
							"name": "name",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This suite's name"
							},
							"getSignature": [
								{
									"id": 3597,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "This suite's name"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"setSignature": [
								{
									"id": 3598,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "This suite's name"
									},
									"parameters": [
										{
											"id": 3599,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 135,
									"character": 10
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 139,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.name",
								"id": 3652
							}
						},
						{
							"id": 3616,
							"name": "numFailedTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this test suite and any sub-suites that\nfailed."
							},
							"getSignature": [
								{
									"id": 3617,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this test suite and any sub-suites that\nfailed."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 241,
									"character": 20
								}
							]
						},
						{
							"id": 3614,
							"name": "numPassedTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this test suite that passed."
							},
							"getSignature": [
								{
									"id": 3615,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this test suite that passed."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 226,
									"character": 20
								}
							]
						},
						{
							"id": 3618,
							"name": "numSkippedTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this test suite and any sub-suites that were\nskipped."
							},
							"getSignature": [
								{
									"id": 3619,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this test suite and any sub-suites that were\nskipped."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 256,
									"character": 21
								}
							]
						},
						{
							"id": 3612,
							"name": "numTests",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of tests in this suite and any sub-suites. To get only\nthe number of tests for this suite, look at `this.tests.length`."
							},
							"getSignature": [
								{
									"id": 3613,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The total number of tests in this suite and any sub-suites. To get only\nthe number of tests for this suite, look at `this.tests.length`."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 214,
									"character": 14
								}
							]
						},
						{
							"id": 3602,
							"name": "parentId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The unique identifier of the suite's parent."
							},
							"getSignature": [
								{
									"id": 3603,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of the suite's parent."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 164,
									"character": 14
								}
							]
						},
						{
							"id": 3604,
							"name": "remote",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The WebDriver interface for driving a remote environment. This value is\nonly guaranteed to exist from the before/beforeEach/afterEach/after and\ntest methods, since environments are not instantiated until they are\nactually ready to be tested against."
							},
							"getSignature": [
								{
									"id": 3605,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The WebDriver interface for driving a remote environment. This value is\nonly guaranteed to exist from the before/beforeEach/afterEach/after and\ntest methods, since environments are not instantiated until they are\nactually ready to be tested against."
									},
									"type": {
										"type": "reference",
										"name": "Remote",
										"id": 7283
									}
								}
							],
							"setSignature": [
								{
									"id": 3606,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The WebDriver interface for driving a remote environment. This value is\nonly guaranteed to exist from the before/beforeEach/afterEach/after and\ntest methods, since environments are not instantiated until they are\nactually ready to be tested against."
									},
									"parameters": [
										{
											"id": 3607,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Remote",
												"id": 7283
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 177,
									"character": 12
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 183,
									"character": 12
								}
							]
						},
						{
							"id": 3608,
							"name": "sessionId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The sessionId of the environment in which the suite executed."
							},
							"getSignature": [
								{
									"id": 3609,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The sessionId of the environment in which the suite executed."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"setSignature": [
								{
									"id": 3610,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The sessionId of the environment in which the suite executed."
									},
									"parameters": [
										{
											"id": 3611,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 193,
									"character": 15
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 206,
									"character": 15
								}
							]
						},
						{
							"id": 3622,
							"name": "timeout",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 3623,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"setSignature": [
								{
									"id": 3624,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 3625,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 275,
									"character": 13
								},
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 285,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "SuiteProperties.timeout",
								"id": 3654
							}
						},
						{
							"id": 3626,
							"name": "add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3627,
									"name": "add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a test or suite to this suite."
									},
									"parameters": [
										{
											"id": 3628,
											"name": "suiteOrTest",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Suite",
														"id": 3566
													},
													{
														"type": "reference",
														"name": "Test",
														"id": 3484
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 292,
									"character": 5
								}
							]
						},
						{
							"id": 3629,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3630,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs test suite in order:",
										"text": "* before\n* (for each test)\n  * beforeEach\n  * test\n  * afterEach\n* after\n\nIf before, beforeEach, afterEach, or after throw, the suite itself will\nbe marked as failed and no further tests in the suite will be executed.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 356,
									"character": 5
								}
							]
						},
						{
							"id": 3631,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3632,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips this suite.",
										"text": "Calling this function will cause all remaining tests in the suite to be\nskipped. If a message was provided, a reporter may report the suite’s\ntests as skipped. Skipped tests are not treated as passing or failing.\n\nIf this method is called from a test function (as this.parent.skip()),\nthe test will be immediately halted, just as if the test’s own skip\nmethod were called.\n"
									},
									"parameters": [
										{
											"id": 3633,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If provided, will be stored in this suite's `skipped`\nproperty.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"suite skipped\""
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 728,
									"character": 6
								}
							]
						},
						{
							"id": 3634,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3635,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 735,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3581
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3567,
								3568,
								3569,
								3573,
								3574,
								3575,
								3576,
								3577,
								3578,
								3579,
								3580
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								3584,
								3588,
								3592,
								3620,
								3600,
								3596,
								3616,
								3614,
								3618,
								3612,
								3602,
								3604,
								3608,
								3622
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3626,
								3629,
								3631,
								3634
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Suite.ts",
							"line": 11,
							"character": 26
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "BenchmarkSuite",
							"id": 4438
						},
						{
							"type": "reference",
							"name": "RemoteSuite",
							"id": 6071
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "SuiteProperties",
							"id": 3645
						}
					]
				},
				{
					"id": 3636,
					"name": "SuiteLifecycleFunction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3637,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3638,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Suite",
										"id": 3566
									}
								},
								{
									"id": 3639,
									"name": "suite",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Suite",
										"id": 3566
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"name": "PromiseLike",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Suite.ts",
							"line": 785,
							"character": 39
						}
					]
				},
				{
					"id": 3645,
					"name": "SuiteProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Properties that can be set on a Suite.",
						"text": "Note that 'tests' isn't included so that other interfaces, such as the object\ninterface, can use a different definition for it.\n"
					},
					"children": [
						{
							"id": 3646,
							"name": "after",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 800,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SuiteLifecycleFunction",
										"id": 3636
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3647,
							"name": "afterEach",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 801,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3648,
							"name": "bail",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 802,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3649,
							"name": "before",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 803,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SuiteLifecycleFunction",
										"id": 3636
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3650,
							"name": "beforeEach",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 804,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TestLifecycleFunction",
										"id": 3640
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3651,
							"name": "grep",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 805,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "RegExp"
							}
						},
						{
							"id": 3652,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 806,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3653,
							"name": "publishAfterSetup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 807,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3654,
							"name": "timeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Suite.ts",
									"line": 808,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3646,
								3647,
								3648,
								3649,
								3650,
								3651,
								3652,
								3653,
								3654
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Suite.ts",
							"line": 799,
							"character": 32
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "BenchmarkSuiteProperties",
							"id": 4510
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "BenchmarkSuite",
							"id": 4438
						},
						{
							"type": "reference",
							"name": "RemoteSuite",
							"id": 6071
						},
						{
							"type": "reference",
							"name": "Suite",
							"id": 3566
						}
					]
				},
				{
					"id": 3640,
					"name": "TestLifecycleFunction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3641,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3642,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Suite",
										"id": 3566
									}
								},
								{
									"id": 3643,
									"name": "test",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Test",
										"id": 3484
									}
								},
								{
									"id": 3644,
									"name": "suite",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Suite",
										"id": 3566
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"name": "PromiseLike",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Suite.ts",
							"line": 789,
							"character": 38
						}
					]
				},
				{
					"id": 3663,
					"name": "RootSuiteOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options that can be passed into a Suite constructor to initialize a root\nsuite"
					},
					"sources": [
						{
							"fileName": "src/core/lib/Suite.ts",
							"line": 824,
							"character": 28
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Partial",
								"typeArguments": [
									{
										"type": "reference",
										"name": "SuiteProperties",
										"id": 3645
									}
								]
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 3664,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 3665,
											"name": "executor",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/Suite.ts",
													"line": 825,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										},
										{
											"id": 3666,
											"name": "tests",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/Suite.ts",
													"line": 826,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "Test",
															"id": 3484
														},
														{
															"type": "reference",
															"name": "Suite",
															"id": 3566
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												3665,
												3666
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/Suite.ts",
											"line": 824,
											"character": 57
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 3658,
					"name": "SuiteOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options that can be passed into a Suite constructor to initialize a suite"
					},
					"sources": [
						{
							"fileName": "src/core/lib/Suite.ts",
							"line": 814,
							"character": 24
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Partial",
								"typeArguments": [
									{
										"type": "reference",
										"name": "SuiteProperties",
										"id": 3645
									}
								]
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 3659,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 3660,
											"name": "name",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/Suite.ts",
													"line": 815,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3661,
											"name": "parent",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/Suite.ts",
													"line": 816,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										},
										{
											"id": 3662,
											"name": "tests",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/Suite.ts",
													"line": 817,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"name": "Test",
															"id": 3484
														},
														{
															"type": "reference",
															"name": "Suite",
															"id": 3566
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												3660,
												3661,
												3662
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/Suite.ts",
											"line": 814,
											"character": 53
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 3667,
					"name": "BAIL_REASON",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/Suite.ts",
							"line": 831,
							"character": 17
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "bailed"
					},
					"defaultValue": "\"bailed\""
				},
				{
					"id": 3655,
					"name": "isSuite",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3656,
							"name": "isSuite",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3657,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Suite"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Suite.ts",
							"line": 781,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3566
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3636,
						3645,
						3640
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3663,
						3658
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						3667
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						3655
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/Suite.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3483,
			"name": "\"core/lib/Test\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/Test.ts",
			"children": [
				{
					"id": 3484,
					"name": "Test",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Test is a single unit or functional test."
					},
					"children": [
						{
							"id": 3497,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3498,
									"name": "new Test",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3499,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"name": "TestOptions",
														"id": 3560
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 3500,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 3502,
																	"name": "hasPassed",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/core/lib/Test.ts",
																			"line": 44,
																			"character": 60
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "undefined"
																			},
																			{
																				"type": "intrinsic",
																				"name": "false"
																			},
																			{
																				"type": "intrinsic",
																				"name": "true"
																			}
																		]
																	}
																},
																{
																	"id": 3501,
																	"name": "timeElapsed",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/core/lib/Test.ts",
																			"line": 44,
																			"character": 40
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "undefined"
																			},
																			{
																				"type": "intrinsic",
																				"name": "number"
																			}
																		]
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		3502,
																		3501
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/core/lib/Test.ts",
																	"line": 44,
																	"character": 26
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Test",
										"id": 3484
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 41,
									"character": 32
								}
							]
						},
						{
							"id": 3490,
							"name": "_hasPassed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 27,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 3491,
							"name": "_isAsync",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 29,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 3493,
							"name": "_runTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 33,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3494,
							"name": "_timeElapsed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 35,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3492,
							"name": "_timeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 31,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3495,
							"name": "_timer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 39,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3496,
							"name": "_usesRemote",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 41,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 3489,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The error that caused this Test to fail"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 25,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "InternError",
										"id": 3473
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3485,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of this test"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 13,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.name",
								"id": 3546
							}
						},
						{
							"id": 3486,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This test's parent Suite"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 16,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.parent",
								"id": 3547
							}
						},
						{
							"id": 3487,
							"name": "skipped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If this test was skipped, this will contain a message indicating why"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 19,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.skipped",
								"id": 3548
							}
						},
						{
							"id": 3488,
							"name": "test",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The test function that is run by this Test"
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 22,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TestFunction",
								"id": 3540
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.test",
								"id": 3549
							}
						},
						{
							"id": 3503,
							"name": "executor",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The executor running this test."
							},
							"getSignature": [
								{
									"id": 3504,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The executor running this test."
									},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 64,
									"character": 14
								}
							]
						},
						{
							"id": 3505,
							"name": "hasPassed",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "True if the test function completed successfully"
							},
							"getSignature": [
								{
									"id": 3506,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "True if the test function completed successfully"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 71,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.hasPassed",
								"id": 3545
							}
						},
						{
							"id": 3507,
							"name": "id",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The unique identifier of the test, assuming all combinations of suite +\ntest are unique."
							},
							"getSignature": [
								{
									"id": 3508,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of the test, assuming all combinations of suite +\ntest are unique."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 79,
									"character": 8
								}
							]
						},
						{
							"id": 3509,
							"name": "isAsync",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, this Test's test function is async"
							},
							"getSignature": [
								{
									"id": 3510,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "If true, this Test's test function is async"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 93,
									"character": 13
								}
							]
						},
						{
							"id": 3511,
							"name": "parentId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The unique identifier of the test's parent."
							},
							"getSignature": [
								{
									"id": 3512,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The unique identifier of the test's parent."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 100,
									"character": 14
								}
							]
						},
						{
							"id": 3513,
							"name": "remote",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The WebDriver interface for driving a remote environment.",
								"tags": [
									{
										"tag": "see",
										"text": "Suite#remote\n"
									}
								]
							},
							"getSignature": [
								{
									"id": 3514,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The WebDriver interface for driving a remote environment.",
										"tags": [
											{
												"tag": "see",
												"text": "Suite#remote\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Remote",
										"id": 7283
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 108,
									"character": 12
								}
							]
						},
						{
							"id": 3515,
							"name": "sessionId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An identifier for the test session this Test is running in."
							},
							"getSignature": [
								{
									"id": 3516,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "An identifier for the test session this Test is running in."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 116,
									"character": 15
								}
							]
						},
						{
							"id": 3517,
							"name": "timeElapsed",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of milliseconds the test function took to complete."
							},
							"getSignature": [
								{
									"id": 3518,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The number of milliseconds the test function took to complete."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 123,
									"character": 17
								}
							]
						},
						{
							"id": 3519,
							"name": "timeout",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of milliseconds this test can run before it will be canceled."
							},
							"getSignature": [
								{
									"id": 3520,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The number of milliseconds this test can run before it will be canceled."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"setSignature": [
								{
									"id": 3521,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "The number of milliseconds this test can run before it will be canceled."
									},
									"parameters": [
										{
											"id": 3522,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 130,
									"character": 13
								},
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 140,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "TestProperties.timeout",
								"id": 3550
							}
						},
						{
							"id": 3523,
							"name": "async",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3524,
									"name": "async",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a convenience function that generates and returns a special\n[[lib/Deferred.Deferred]] that can be used for asynchronous testing.",
										"text": "Once this method is called, a test is assumed to be asynchronous no\nmatter its return value (the generated Deferred's promise will always be\nused as the implied return value if a promise is not returned by the test\nfunction).\n\nThe optional `numCallsUntilResolution` argument to `async` affects how the\ncallback method operates. By default, the Deferred is resolved (assuming\nit hasn’t already been rejected) the first time the function returned by\n`callback` is called. If `numCallsUntilResolution` is set (it must be a\nvalue > 0), the function returned by `callback` must be called\n`numCallsUntilResolution` times before the Deferred resolves.\n",
										"returns": "a lib/Deferred that can be used to resolve the test\n"
									},
									"parameters": [
										{
											"id": 3525,
											"name": "timeout",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If provided, the amount of time to wait before rejecting\nthe test with a timeout error, in milliseconds."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 3526,
											"name": "numCallsUntilResolution",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The number of times that resolve needs to\nbe called before the Deferred is actually resolved."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Deferred",
										"id": 3453,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 166,
									"character": 7
								}
							]
						},
						{
							"id": 3527,
							"name": "restartTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3528,
									"name": "restartTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "During an asynchronous test run, restarts the timeout timer."
									},
									"parameters": [
										{
											"id": 3529,
											"name": "timeout",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 203,
									"character": 16
								}
							]
						},
						{
							"id": 3530,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3531,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the test."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 227,
									"character": 5
								}
							]
						},
						{
							"id": 3532,
							"name": "skip",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3533,
									"name": "skip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Skips this test.",
										"text": "Calling this function will cause a test to halt immediately. If a message\nwas provided, a reporter may report the test as skipped. Skipped tests\nare not treated as passing or failing.\n"
									},
									"parameters": [
										{
											"id": 3534,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If provided, will be stored in this test's `skipped`\nproperty.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"skipped\""
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 388,
									"character": 6
								}
							]
						},
						{
							"id": 3535,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3536,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a JSON-representation of this test"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 3537,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 3538,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 3539,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 396,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3497
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3490,
								3491,
								3493,
								3494,
								3492,
								3495,
								3496,
								3489,
								3485,
								3486,
								3487,
								3488
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								3503,
								3505,
								3507,
								3509,
								3511,
								3513,
								3515,
								3517,
								3519
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3523,
								3527,
								3530,
								3532,
								3535
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Test.ts",
							"line": 11,
							"character": 25
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "BenchmarkTest",
							"id": 3979
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "TestProperties",
							"id": 3544
						}
					]
				},
				{
					"id": 3540,
					"name": "TestFunction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3541,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3542,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Test",
										"id": 3484
									}
								},
								{
									"id": 3543,
									"name": "test",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Test",
										"id": 3484
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"name": "PromiseLike",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Test.ts",
							"line": 451,
							"character": 29
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "BenchmarkTestFunction",
							"id": 4039
						}
					]
				},
				{
					"id": 3544,
					"name": "TestProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3545,
							"name": "hasPassed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 460,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3546,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 461,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3547,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 462,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							}
						},
						{
							"id": 3548,
							"name": "skipped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 463,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3549,
							"name": "test",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 464,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "TestFunction",
								"id": 3540
							}
						},
						{
							"id": 3550,
							"name": "timeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/Test.ts",
									"line": 465,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3545,
								3546,
								3547,
								3548,
								3549,
								3550
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Test.ts",
							"line": 459,
							"character": 31
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "BenchmarkTestProperties",
							"id": 4056
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "BenchmarkTest",
							"id": 3979
						},
						{
							"type": "reference",
							"name": "Test",
							"id": 3484
						}
					]
				},
				{
					"id": 3560,
					"name": "TestOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/Test.ts",
							"line": 468,
							"character": 23
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Partial",
								"typeArguments": [
									{
										"type": "reference",
										"name": "TestProperties",
										"id": 3544
									}
								]
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 3561,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 3562,
											"name": "name",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/Test.ts",
													"line": 469,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3563,
											"name": "test",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/Test.ts",
													"line": 470,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TestFunction",
												"id": 3540
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												3562,
												3563
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/Test.ts",
											"line": 468,
											"character": 51
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 3564,
					"name": "SKIP",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/Test.ts",
							"line": 473,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 3551,
					"name": "isTest",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3552,
							"name": "isTest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3553,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "Test"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Test.ts",
							"line": 434,
							"character": 22
						}
					]
				},
				{
					"id": 3557,
					"name": "isTestFunction",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3558,
							"name": "isTestFunction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3559,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "TestFunction"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Test.ts",
							"line": 455,
							"character": 30
						}
					]
				},
				{
					"id": 3554,
					"name": "isTestOptions",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3555,
							"name": "isTestOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3556,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "TestOptions"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/Test.ts",
							"line": 442,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3484
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3540,
						3544
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3560
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						3564
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						3551,
						3557,
						3554
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/Test.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5657,
			"name": "\"core/lib/browser/util\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true,
				"isExternal": true
			},
			"originalName": "src/core/lib/browser/util.ts",
			"children": [
				{
					"id": 5675,
					"name": "Url",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true,
						"isExternal": true
					},
					"comment": {
						"shortText": "Parse a URL"
					},
					"sources": [
						{
							"fileName": "src/core/lib/browser/util.ts",
							"line": 132,
							"character": 15
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 5676,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 5682,
									"name": "hash",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "src/core/lib/browser/util.ts",
											"line": 138,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5678,
									"name": "hostname",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "src/core/lib/browser/util.ts",
											"line": 134,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5680,
									"name": "path",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "src/core/lib/browser/util.ts",
											"line": 136,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5679,
									"name": "port",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "src/core/lib/browser/util.ts",
											"line": 135,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5677,
									"name": "protocol",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "src/core/lib/browser/util.ts",
											"line": 133,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5681,
									"name": "query",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "src/core/lib/browser/util.ts",
											"line": 137,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										5682,
										5678,
										5680,
										5679,
										5677,
										5681
									]
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/browser/util.ts",
									"line": 132,
									"character": 17
								}
							]
						}
					}
				},
				{
					"id": 5658,
					"name": "getConfig",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isExternal": true
					},
					"signatures": [
						{
							"id": 5659,
							"name": "getConfig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Resolve the user-supplied config data, which may include query args and a\nconfig file."
							},
							"parameters": [
								{
									"id": 5660,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5661,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 5662,
													"name": "config",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/browser/util.ts",
															"line": 58,
															"character": 29
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 5663,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 5664,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 5665,
																			"name": "key",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															]
														}
													}
												},
												{
													"id": 5666,
													"name": "file",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/browser/util.ts",
															"line": 58,
															"character": 35
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														5662,
														5666
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/browser/util.ts",
							"line": 15,
							"character": 25
						}
					]
				},
				{
					"id": 5667,
					"name": "getDefaultBasePath",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isExternal": true
					},
					"signatures": [
						{
							"id": 5668,
							"name": "getDefaultBasePath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a base path based on the current location pathname"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/browser/util.ts",
							"line": 64,
							"character": 34
						}
					]
				},
				{
					"id": 5686,
					"name": "loadText",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 5687,
							"name": "loadText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Load a text resource"
							},
							"parameters": [
								{
									"id": 5688,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/browser/util.ts",
							"line": 161,
							"character": 17
						}
					]
				},
				{
					"id": 5669,
					"name": "normalizePath",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isExternal": true
					},
					"signatures": [
						{
							"id": 5670,
							"name": "normalizePath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Normalize a path (e.g., resolve '..')"
							},
							"parameters": [
								{
									"id": 5671,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/browser/util.ts",
							"line": 80,
							"character": 29
						}
					]
				},
				{
					"id": 5672,
					"name": "parseQuery",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isExternal": true
					},
					"signatures": [
						{
							"id": 5673,
							"name": "parseQuery",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Parse a query string and return a set of decoded name=value pairs"
							},
							"parameters": [
								{
									"id": 5674,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/browser/util.ts",
							"line": 111,
							"character": 26
						}
					]
				},
				{
					"id": 5683,
					"name": "parseUrl",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isExternal": true
					},
					"signatures": [
						{
							"id": 5684,
							"name": "parseUrl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5685,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Url",
										"id": 5675
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/browser/util.ts",
							"line": 140,
							"character": 24
						}
					]
				},
				{
					"id": 5689,
					"name": "resolvePath",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExternal": true
					},
					"signatures": [
						{
							"id": 5690,
							"name": "resolvePath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Resolve a path against a base path"
							},
							"parameters": [
								{
									"id": 5691,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5692,
									"name": "basePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/browser/util.ts",
							"line": 173,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						5675
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						5658,
						5667,
						5686,
						5669,
						5672,
						5683,
						5689
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/browser/util.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6225,
			"name": "\"core/lib/channels/Base\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/channels/Base.ts",
			"children": [
				{
					"id": 6226,
					"name": "BaseChannel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"children": [
						{
							"id": 6229,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6230,
									"name": "new BaseChannel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6231,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChannelOptions",
												"id": 6240
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BaseChannel",
										"id": 6226
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 6,
									"character": 29
								}
							]
						},
						{
							"id": 6228,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 6,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 6227,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 5,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 6236,
							"name": "_sendData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true,
								"isAbstract": true
							},
							"signatures": [
								{
									"id": 6237,
									"name": "_sendData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6238,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "RemoteEvents"
												}
											}
										},
										{
											"id": 6239,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 29,
									"character": 30
								}
							]
						},
						{
							"id": 6232,
							"name": "sendMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6233,
									"name": "sendMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Send a message, or schedule it to be sent. Return a promise that resolves\nwhen the message has been sent."
									},
									"parameters": [
										{
											"id": 6234,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "RemoteEvents"
												}
											}
										},
										{
											"id": 6235,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 17,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6229
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6228,
								6227
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6236,
								6232
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/channels/Base.ts",
							"line": 4,
							"character": 41
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "WebSocketChannel",
							"id": 7800
						},
						{
							"type": "reference",
							"name": "HttpChannel",
							"id": 7838
						}
					]
				},
				{
					"id": 6240,
					"name": "ChannelOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6243,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A websocket port\nA WebSocket port"
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 42,
									"character": 6
								},
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 61,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 6241,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 36,
									"character": 11
								},
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 57,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 6244,
							"name": "timeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A timeout for websocket responses\nA timeout for WebSocket responses"
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 45,
									"character": 9
								},
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 64,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 6242,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An HTTP URL that the testing host can be reached at"
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 39,
									"character": 5
								},
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 58,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6243,
								6241,
								6244,
								6242
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/channels/Base.ts",
							"line": 35,
							"character": 31
						},
						{
							"fileName": "src/core/lib/channels/Base.ts",
							"line": 56,
							"character": 31
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "HttpChannelOptions",
							"id": 7859
						}
					]
				},
				{
					"id": 6245,
					"name": "Message",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6249,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 71,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 6247,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 69,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 6248,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 70,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 6246,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 68,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6249,
								6247,
								6248,
								6246
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/channels/Base.ts",
							"line": 67,
							"character": 24
						}
					]
				},
				{
					"id": 6250,
					"name": "isChannel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 6251,
							"name": "isChannel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6252,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "BaseChannel"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/channels/Base.ts",
							"line": 48,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6226
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						6240,
						6245
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6250
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/channels/Base.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7837,
			"name": "\"core/lib/channels/Http\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/channels/Http.ts",
			"children": [
				{
					"id": 7838,
					"name": "HttpChannel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 7844,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7845,
									"name": "new HttpChannel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 7846,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "HttpChannelOptions",
												"id": 7859
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HttpChannel",
										"id": 7838
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseChannel.__constructor",
										"id": 6229
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 11,
									"character": 64
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseChannel.__constructor",
								"id": 6229
							}
						},
						{
							"id": 7843,
							"name": "_activeRequest",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 11,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 7839,
							"name": "_lastRequest",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 7,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						},
						{
							"id": 7842,
							"name": "_maxPostSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 10,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 7840,
							"name": "_messageBuffer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 8,
									"character": 26
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "MessageEntry",
									"id": 7865
								}
							}
						},
						{
							"id": 7841,
							"name": "_sequence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 9,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 7854,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 6,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseChannel.sessionId",
								"id": 6228
							}
						},
						{
							"id": 7853,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 5,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseChannel.url",
								"id": 6227
							}
						},
						{
							"id": 7847,
							"name": "_sendData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7848,
									"name": "_sendData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7849,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "RemoteEvents"
												}
											}
										},
										{
											"id": 7850,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseChannel._sendData",
										"id": 6236
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 21,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseChannel._sendData",
								"id": 6236
							}
						},
						{
							"id": 7851,
							"name": "_sendMessages",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7852,
									"name": "_sendMessages",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Some testing services have problems handling large message POSTs, so\nlimit the maximum size of each POST body to maxPostSize bytes. Always\nsend at least one message, even if it's more than maxPostSize bytes."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 55,
									"character": 25
								}
							]
						},
						{
							"id": 7855,
							"name": "sendMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7856,
									"name": "sendMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Send a message, or schedule it to be sent. Return a promise that resolves\nwhen the message has been sent."
									},
									"parameters": [
										{
											"id": 7857,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "RemoteEvents"
												}
											}
										},
										{
											"id": 7858,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseChannel.sendMessage",
										"id": 6232
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 17,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseChannel.sendMessage",
								"id": 6232
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								7844
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7843,
								7839,
								7842,
								7840,
								7841,
								7854,
								7853
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								7847,
								7851,
								7855
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/channels/Http.ts",
							"line": 6,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseChannel",
							"id": 6226
						}
					]
				},
				{
					"id": 7859,
					"name": "HttpChannelOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 7860,
							"name": "maxPostSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 108,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 7863,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A websocket port"
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 42,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "ChannelOptions.port",
								"id": 6243
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ChannelOptions.port",
								"id": 6243
							}
						},
						{
							"id": 7861,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 36,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "ChannelOptions.sessionId",
								"id": 6241
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ChannelOptions.sessionId",
								"id": 6241
							}
						},
						{
							"id": 7864,
							"name": "timeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A timeout for websocket responses"
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 45,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "ChannelOptions.timeout",
								"id": 6244
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ChannelOptions.timeout",
								"id": 6244
							}
						},
						{
							"id": 7862,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An HTTP URL that the testing host can be reached at"
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 39,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "ChannelOptions.url",
								"id": 6242
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ChannelOptions.url",
								"id": 6242
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7860,
								7863,
								7861,
								7864,
								7862
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/channels/Http.ts",
							"line": 107,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ChannelOptions",
							"id": 6240
						}
					]
				},
				{
					"id": 7865,
					"name": "MessageEntry",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 7866,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 112,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 7871,
							"name": "reject",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 114,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7872,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7873,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 7874,
													"name": "error",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Error"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/channels/Http.ts",
											"line": 114,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 7867,
							"name": "resolve",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Http.ts",
									"line": 113,
									"character": 9
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7868,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7869,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 7870,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/channels/Http.ts",
											"line": 113,
											"character": 10
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7866,
								7871,
								7867
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/channels/Http.ts",
							"line": 111,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						7838
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						7859,
						7865
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/channels/Http.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7799,
			"name": "\"core/lib/channels/WebSocket\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/channels/WebSocket.ts",
			"children": [
				{
					"id": 7800,
					"name": "WebSocketChannel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 7818,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7819,
									"name": "new WebSocketChannel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 7820,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChannelOptions",
												"id": 6240
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WebSocketChannel",
										"id": 7800
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseChannel.__constructor",
										"id": 6229
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/WebSocket.ts",
									"line": 17,
									"character": 30
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseChannel.__constructor",
								"id": 6229
							}
						},
						{
							"id": 7816,
							"name": "_ready",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/WebSocket.ts",
									"line": 16,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 7803,
							"name": "_sendQueue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/WebSocket.ts",
									"line": 11,
									"character": 22
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7804,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 7805,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 7806,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 7807,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 7812,
																	"name": "reject",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/core/lib/channels/WebSocket.ts",
																			"line": 13,
																			"character": 47
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 7813,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"signatures": [
																				{
																					"id": 7814,
																					"name": "__call",
																					"kind": 4096,
																					"kindString": "Call signature",
																					"flags": {},
																					"parameters": [
																						{
																							"id": 7815,
																							"name": "error",
																							"kind": 32768,
																							"kindString": "Parameter",
																							"flags": {},
																							"type": {
																								"type": "reference",
																								"name": "Error"
																							}
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "void"
																					}
																				}
																			],
																			"sources": [
																				{
																					"fileName": "src/core/lib/channels/WebSocket.ts",
																					"line": 13,
																					"character": 48
																				}
																			]
																		}
																	}
																},
																{
																	"id": 7808,
																	"name": "resolve",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/core/lib/channels/WebSocket.ts",
																			"line": 13,
																			"character": 17
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 7809,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"signatures": [
																				{
																					"id": 7810,
																					"name": "__call",
																					"kind": 4096,
																					"kindString": "Call signature",
																					"flags": {},
																					"parameters": [
																						{
																							"id": 7811,
																							"name": "value",
																							"kind": 32768,
																							"kindString": "Parameter",
																							"flags": {},
																							"type": {
																								"type": "intrinsic",
																								"name": "any"
																							}
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "void"
																					}
																				}
																			],
																			"sources": [
																				{
																					"fileName": "src/core/lib/channels/WebSocket.ts",
																					"line": 13,
																					"character": 18
																				}
																			]
																		}
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		7812,
																		7808
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/core/lib/channels/WebSocket.ts",
																	"line": 13,
																	"character": 7
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/channels/WebSocket.ts",
											"line": 11,
											"character": 23
										}
									]
								}
							}
						},
						{
							"id": 7817,
							"name": "_sequence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/WebSocket.ts",
									"line": 17,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 7802,
							"name": "_socket",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/WebSocket.ts",
									"line": 10,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "WebSocket"
							}
						},
						{
							"id": 7832,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 6,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseChannel.sessionId",
								"id": 6228
							}
						},
						{
							"id": 7801,
							"name": "timeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Time to wait for response before rejecting a send"
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/WebSocket.ts",
									"line": 8,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 7831,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 5,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseChannel.url",
								"id": 6227
							}
						},
						{
							"id": 7828,
							"name": "_handleError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7829,
									"name": "_handleError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7830,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/WebSocket.ts",
									"line": 87,
									"character": 24
								}
							]
						},
						{
							"id": 7825,
							"name": "_handleMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7826,
									"name": "_handleMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7827,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/WebSocket.ts",
									"line": 81,
									"character": 26
								}
							]
						},
						{
							"id": 7821,
							"name": "_sendData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7822,
									"name": "_sendData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7823,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7824,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseChannel._sendData",
										"id": 6236
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/WebSocket.ts",
									"line": 54,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseChannel._sendData",
								"id": 6236
							}
						},
						{
							"id": 7833,
							"name": "sendMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7834,
									"name": "sendMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Send a message, or schedule it to be sent. Return a promise that resolves\nwhen the message has been sent."
									},
									"parameters": [
										{
											"id": 7835,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "RemoteEvents"
												}
											}
										},
										{
											"id": 7836,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseChannel.sendMessage",
										"id": 6232
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/channels/Base.ts",
									"line": 17,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseChannel.sendMessage",
								"id": 6232
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								7818
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7816,
								7803,
								7817,
								7802,
								7832,
								7801,
								7831
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								7828,
								7825,
								7821,
								7833
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/channels/WebSocket.ts",
							"line": 6,
							"character": 37
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseChannel",
							"id": 6226
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						7800
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/channels/WebSocket.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3668,
			"name": "\"core/lib/common/ErrorFormatter\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/common/ErrorFormatter.ts",
			"children": [
				{
					"id": 3669,
					"name": "ErrorFormatter",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3671,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3672,
									"name": "new ErrorFormatter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3673,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ErrorFormatter",
										"id": 3669
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 7,
									"character": 30
								}
							]
						},
						{
							"id": 3670,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 7,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Executor",
								"id": 4575
							},
							"implementationOf": {
								"type": "reference",
								"name": "ErrorFormatterProperties.executor",
								"id": 3704
							}
						},
						{
							"id": 3681,
							"name": "_createDiff",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3682,
									"name": "_createDiff",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a unified diff to explain the difference between two objects.",
										"returns": "A unified diff formatted string representing the difference\nbetween the two objects.\n"
									},
									"parameters": [
										{
											"id": 3683,
											"name": "actual",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The actual result."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3684,
											"name": "expected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The expected result."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3685,
									"name": "_createDiff",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3686,
											"name": "actual",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 3687,
											"name": "expected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 118,
									"character": 23
								},
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 119,
									"character": 23
								},
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 120,
									"character": 23
								}
							]
						},
						{
							"id": 3688,
							"name": "_formatLine",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3689,
									"name": "_formatLine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a trace line in a standardized format."
									},
									"parameters": [
										{
											"id": 3690,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3691,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 3692,
															"name": "func",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/core/lib/common/ErrorFormatter.ts",
																	"line": 151,
																	"character": 36
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	},
																	{
																		"type": "intrinsic",
																		"name": "string"
																	}
																]
															}
														},
														{
															"id": 3693,
															"name": "source",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/core/lib/common/ErrorFormatter.ts",
																	"line": 151,
																	"character": 53
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																3692,
																3693
															]
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/common/ErrorFormatter.ts",
															"line": 151,
															"character": 29
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 151,
									"character": 23
								}
							]
						},
						{
							"id": 3678,
							"name": "_getSource",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3679,
									"name": "_getSource",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3680,
											"name": "tracepath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 103,
									"character": 22
								}
							]
						},
						{
							"id": 3694,
							"name": "_normalizeStackTrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3695,
									"name": "_normalizeStackTrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a stack trace, apply any source mappings, and normalize its format."
									},
									"parameters": [
										{
											"id": 3696,
											"name": "stack",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 161,
									"character": 32
								}
							]
						},
						{
							"id": 3697,
							"name": "_processChromeTrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3698,
									"name": "_processChromeTrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process Chrome, Opera, and IE traces.",
										"text": "Ex)\n  at Object._updateExpressionOptions (AxiomEditor.js:511)\n  at Object.<anonymous> (AxiomEditor.js:291)\n  at Function.m.emit (dojo.js.uncompressed.js:8875)\n"
									},
									"parameters": [
										{
											"id": 3699,
											"name": "lines",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 201,
									"character": 31
								}
							]
						},
						{
							"id": 3700,
							"name": "_processSafariTrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3701,
									"name": "_processSafariTrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process Safari and Firefox traces.",
										"text": "Ex)\n  _updateExpressionOptions@http://localhost:8080/AxiomEditor.js:511:49\n  http://localhost:8080/AxiomEditor.js:291:34\n  dispatchEvent@[native code]\n  emit@http://ajax.googleapis.com/ajax/libs/dojo/1.12.2/dojo/dojo.js:118:282\n"
									},
									"parameters": [
										{
											"id": 3702,
											"name": "lines",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 223,
									"character": 31
								}
							]
						},
						{
							"id": 3674,
							"name": "format",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3675,
									"name": "format",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a full error message from a plain Error object, avoiding\nduplicate error messages that might be caused by different opinions on\nwhat a stack trace should look like.",
										"returns": "A string message describing the error.\n"
									},
									"parameters": [
										{
											"id": 3676,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object describing the error."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Error"
													},
													{
														"type": "reference",
														"name": "InternError",
														"id": 3473
													}
												]
											}
										},
										{
											"id": 3677,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 21,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3671
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3670
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3681,
								3688,
								3678,
								3694,
								3697,
								3700,
								3674
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/ErrorFormatter.ts",
							"line": 6,
							"character": 35
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "NodeErrorFormatter",
							"id": 5138
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ErrorFormatterProperties",
							"id": 3703
						}
					]
				},
				{
					"id": 3705,
					"name": "ErrorFormatOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3706,
							"name": "space",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 242,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3706
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/ErrorFormatter.ts",
							"line": 241,
							"character": 35
						}
					]
				},
				{
					"id": 3703,
					"name": "ErrorFormatterProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3704,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 238,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Executor",
								"id": 4575
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3704
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/ErrorFormatter.ts",
							"line": 237,
							"character": 41
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "ErrorFormatter",
							"id": 3669
						},
						{
							"type": "reference",
							"name": "NodeErrorFormatter",
							"id": 5138
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3669
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3705,
						3703
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/common/ErrorFormatter.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4998,
			"name": "\"core/lib/common/config\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/common/config.ts",
			"children": [
				{
					"id": 5081,
					"name": "BenchmarkConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 5082,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 492,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5082
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/config.ts",
							"line": 491,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reflection",
							"declaration": {
								"id": 5083,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"sources": [
									{
										"fileName": "src/core/lib/common/config.ts",
										"line": 491,
										"character": 40
									}
								]
							}
						}
					]
				},
				{
					"id": 4999,
					"name": "Config",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This interface describes the configuration data used by Intern. Its\nproperties can be set from the command line when running the intern bin\nscript, or via an object passed to the executor's\n[[lib/executors/Executor.Executor.configure]] method."
					},
					"children": [
						{
							"id": 5000,
							"name": "bail",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "By default, Intern will run all configured tests. Setting this option\nto `true` will cause Intern to stop running tests after the first failure."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 18,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 5002,
							"name": "basePath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path to the project base. This will always end with a path separator\n(e.g., /)."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 26,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5001,
							"name": "baseline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 5003,
							"name": "benchmark",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This property must be set to `true` for benchmark tests to run. If it is\nunset or `false`, any suites registered using the benchmark interface will\nbe ignored."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 33,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 5004,
							"name": "benchmarkConfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 35,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkConfig",
								"id": 5081
							}
						},
						{
							"id": 5005,
							"name": "browser",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 37,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "ResourceConfig",
								"id": 5072
							}
						},
						{
							"id": 5017,
							"name": "capabilities",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The default capabilities for all test environments.",
								"text": "They will be extended for each environment by values in the\n[`environments`](#environments) array.\n\nCloud testing services such as BrowserStack may have unique capabilities.\nIt’s important to use the proper capabilities for the WebDriver server or\ncloud service being used to run tests.\n\n* [Selenium capabilities](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities)\n* [BrowserStack capabilities](https://www.browserstack.com/automate/capabilities)\n* [CrossBrowserTesting capabilities](https://help.crossbrowsertesting.com/selenium-testing/automation-capabilities)\n* [Sauce Labs capabilities](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-Selenium-SpecificOptions) and [environments](https://saucelabs.com/platforms)\n* [TestingBot capabilities](https://testingbot.com/support/other/test-options) and [environments](https://testingbot.com/support/getting-started/browsers.html)\n\n[Chrome-specific options](https://sites.google.com/a/chromium.org/chromedriver/capabilities)\nmay be passed using a `goog:chromeOptions` capability.\n\n[Firefox-specific options](https://github.com/mozilla/geckodriver#firefox-capabilities)\nmay be passed using a `moz:firefoxOptions` capability.\n\nIntern will automatically provide certain capabilities to provide better\nfeedback with cloud service dashboards:\n\n* `name` will be set to the name of the test config\n* `build` will be set to the commit ID from the `TRAVIS_COMMIT` and\n  `BUILD_TAG` environment variables, if either exists\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 124,
									"character": 14
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 5018,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 5021,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 5022,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"children": [
										{
											"id": 5020,
											"name": "build",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 126,
													"character": 9
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 5019,
											"name": "name",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 125,
													"character": 8
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												5020,
												5019
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/common/config.ts",
											"line": 124,
											"character": 15
										}
									]
								}
							}
						},
						{
							"id": 5023,
							"name": "connectTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Time to wait for contact from a remote server"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 131,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 5024,
							"name": "coverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of file paths or globs that should be instrumented for code\ncoverage, or false to completely disable coverage.",
								"text": "This property should point to the actual JavaScript files that will be\nexecuted, not pre-transpiled sources (coverage results will still be\nmapped back to original sources). Coverage data will be collected for\nthese files even if they’re not loaded by Intern for tests, allowing a\ntest writer to see which files _haven’t_ been tested, as well as coverage\non files that were tested.\n\nWhen this value is unset, Intern will still look for coverage data on a\nglobal coverage variable, and it will request coverage data from remote\nsessions. Explicitly setting coverage to false will prevent Intern from\neven checking for coverage data.\n\n> 💡This property replaces the `excludeInstrumentation` property used in\nprevious versions of Intern, which acted as a filter rather than an\ninclusive list.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 153,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 5006,
							"name": "coverageVariable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The global variable that will be used to store coverage data"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 42,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5007,
							"name": "debug",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "When set to true, Intern will emit 'log' events for many internal\noperations. Reporters that register for these events, such as the Runner\nreporter, will display them during testing."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 49,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 5008,
							"name": "defaultTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This is the number of milliseconds that Intern will wait for an\n[asynchronous test](https://github.com/theintern/intern/blob/master/docs/writing_tests.md#testing-asynchronous-code)\nto complete before timing out. A timed out test is considered to have\nfailed."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 57,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 5009,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A description for this test run"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 60,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5025,
							"name": "environments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The environments that will be used to run tests.",
								"text": "Its value can be a single browser name or an environment object, or an\narray of these.\n\n```js\nenvironments: 'chrome'\nenvironments: ['chrome', 'firefox']\nenvironments: { browserName: 'chrome', version: '57.0' }\nenvironments: { browserName: 'chrome', fixSessionCapabilities: false }\n```\n\nThe syntax for browser names and other properties depends on where tests\nare being run. For example, when running tests using a local Selenium\nserver, the browser name should be the lowercase name of a locally\navailable browser, such as ‘chrome’ or ‘firefox’, and other properties\nsuch as the platform name will generally be ignored. When running on a\ncloud testing service such as [Sauce Labs](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-RequiredSeleniumTestConfigurationSettings)\nor [BrowserStack](https://www.browserstack.com/automate/capabilities),\nbrowser names and other properties may have different acceptable values\n(e.g., ‘googlechrome’ instead of ‘chrome’, or ‘MacOS’ vs ‘OSX’).\n\nThe [fixSessionCapabilities](https://theintern.io/docs.html#Leadfoot/2/api/Server/fixsessioncapabilities)\nproperty determines whether feature and defect tests will be run in the\nremote browser. Setting it to `false` entirely disables feature tests\n(assuming that all features are enabled), while setting it to\n`'no-detect'` will set certain already-known feature and defect flags\nbased on the browser and platform. The current set of capabilities are\navailable on `this.remote.session.capabilities` in functional tests.\n\n> 💡Note that 'node' is an environment. If no environments are specified,\nthe Node executor will automatically add 'node' to the resolved config.\nIf any environments are specified, though, unit tests will only be run in\nthis environments.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 191,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "EnvironmentSpec",
									"id": 5090
								}
							}
						},
						{
							"id": 5026,
							"name": "excludeInstrumentation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 194,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 5010,
							"name": "filterErrorStack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, filter external library calls and runtime calls out of error\nstacks."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 66,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 5027,
							"name": "functionalBaseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The base URL to use for relative addresses in functional tests"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 197,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 5028,
							"name": "functionalCoverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether to collect coverage data from functional tests"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 200,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 5029,
							"name": "functionalSuites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of paths or glob expressions that point to functional suites.",
								"text": "Functional suites are files that register\n[WebDriver tests](writing_tests.md).\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 208,
									"character": 18
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 5030,
							"name": "functionalTimeouts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Default timeout values for functional tests",
								"text": "  * **find** is the time to wait for findBy commands to find an element\n  * **executeAsync** is the time to wait for executeAsync calls to\n    complete\n  * **pageLoad** is the time to wait for a page to finish loading\n    synchronous resources\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 219,
									"character": 20
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 5031,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 5032,
											"name": "connectTimeout",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 221,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "undefined"
											}
										},
										{
											"id": 5034,
											"name": "executeAsync",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Time to wait for an executeAsync to complete"
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 227,
													"character": 16
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 5033,
											"name": "find",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Time to wait for a findBy command to find a matching element"
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 224,
													"character": 8
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 5035,
											"name": "pageLoad",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Time to wait for initial page load to complete"
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/config.ts",
													"line": 230,
													"character": 12
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												5032,
												5034,
												5033,
												5035
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/common/config.ts",
											"line": 219,
											"character": 21
										}
									]
								}
							}
						},
						{
							"id": 5011,
							"name": "grep",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This property is a regular expression that is used to filter which tests\nare run. Grep operates on test IDs. A test ID is the concatenation of a\ntest name with all of its parent suite names. Every test ID that matches\nthe current grep expression will be run."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 74,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "RegExp"
							}
						},
						{
							"id": 5036,
							"name": "heartbeatInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "How often to send a heartbeat message to a remote browser, in seconds"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 234,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 5037,
							"name": "instrumenterOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An object containing options for the\n[Istanbul instrumenter](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#instrumenter)."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 240,
									"character": 21
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 5038,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 5039,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 5040,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/common/config.ts",
											"line": 240,
											"character": 22
										}
									]
								}
							}
						},
						{
							"id": 5012,
							"name": "internPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path to Intern. This will always end with a path separator (e.g., /)."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 79,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5041,
							"name": "leaveRemoteOpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether to leave the remote browser open after testing.",
								"text": "Normally when Intern runs tests on remote browsers, it shuts the browser\ndown when testing is finished. However, you may sometimes want to inspect\nthe state of a remote browser after tests have run, particularly if\nyou're trying to debug why a test is failing. Setting `leaveRemoteOpen`\nto true will cause Intern to leave the browser open after testing.\nSetting it to `'fail'` will cause Intern to leave it open only if there\nwere test failures.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 253,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "fail"
									}
								]
							}
						},
						{
							"id": 5053,
							"name": "loader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The loader used to load test suites and application modules.",
								"text": "When passed in as part of a config object, the `loader` property can be a\nstring with a loader name or the path to a loader script. It may also be\nan object with `script` and `config` properties. Intern provides built-in\nloader scripts for Dojo and Dojo2, which can be specified with the IDs\n'dojo' and 'dojo2'.\n\n```ts\nloader: 'dojo2'\nloader: 'tests/loader.js'\nloader: {\n    script: 'dojo',\n    config: {\n        packages: [\n            { name: 'app', location: './js' }\n        ]\n    }\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 415,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "LoaderDescriptor",
								"id": 5084
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.loader",
								"id": 5073
							}
						},
						{
							"id": 5042,
							"name": "maxConcurrency",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of concurrent remote test sessions to run at once.",
								"text": "The default value is Infinity, meaning Intern will try to run all of its\ntest sessions in parallel. Note that cloud testing services often limit\nthe number of concurrent sessions they will allow to 2 or 5.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 262,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 5013,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A top-level name for this configuration."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 82,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5014,
							"name": "node",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 84,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "ResourceConfig",
								"id": 5072
							}
						},
						{
							"id": 5055,
							"name": "plugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of scripts or modules to load before suites are loaded."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 459,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "PluginDescriptor",
									"id": 5064
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.plugins",
								"id": 5075
							}
						},
						{
							"id": 5043,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A proxy that should be used for outgoing web connections. If specified,\nthis will be used for Intern's WebDriver client instead of the Dig Dug\ntunnel's proxy value."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 269,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 5054,
							"name": "reporters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of reporter names or descriptors.",
								"text": "Reporters specified in this list must have been previously installed\nusing\n[`registerReporter`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerreporter)\nor\n[`registerPlugin`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerplugin).\n\nList entries may be reporter names or objects of the format\n\n```js\n{\n    name: 'reporter name',\n    options: {\n        // reporter-specific options\n    }\n}\n```\n\nThe built-in reporters under Node are:\n  * benchmark - output benchmark test results\n  * cobertura - output coverage data in the cobertura format\n  * htmlcoverage - output coverage data as an HTML report\n  * jsoncoverage - output coverage data in a JSON format\n  * junit - output results in JUnit format\n  * lcov - output coverage results in lcov format\n  * pretty - draw text results in a terminal\n  * runner - output test results as formatted text (default Node reporter)\n  * simple - output test results as simple text\n  * teamcity - output results in TeamCity format\n\nThe built-in reporters available in browsers are:\n  * console - output to the browser console\n  * dom - output results as text in the DOM\n  * html - output a pretty HTML report (default browser reporter)\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 454,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ReporterDescriptor",
									"id": 5061
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.reporters",
								"id": 5074
							}
						},
						{
							"id": 5058,
							"name": "require",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 486,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.require",
								"id": 5078
							}
						},
						{
							"id": 5059,
							"name": "requires",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 487,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.requires",
								"id": 5079
							}
						},
						{
							"id": 5044,
							"name": "runInSync",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, a remote will wait for reponses from Intern for any executor\nevents."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 275,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 5060,
							"name": "scripts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 488,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.scripts",
								"id": 5080
							}
						},
						{
							"id": 5045,
							"name": "serveOnly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, start Intern's static test server but do not run any tests."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 278,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 5046,
							"name": "serverPort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The port Intern's static server will listen on during functional tests."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 283,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 5047,
							"name": "serverUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL a remote should use to access Intern's static server. By default\nthis is http://localhost:9000, but the domain or port may be different if\nIntern is behind a proxy."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 290,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5015,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An identifier for this test session. By default it will have the value\n''."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 90,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5016,
							"name": "showConfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, display the resolved config and exit"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 93,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 5048,
							"name": "socketPort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The port that a remote will use to access Intern's websocket server. The\nhostname will be the same as for serverUrl. For example, if serverPort is\nset to 9001 and the default serverUrl is used (http://localhost:9000),\nthe full websocket URL will be ws://localhost:9001."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 298,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 5056,
							"name": "suites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of paths or glob expressions that point to suite scripts.",
								"text": "```js\n{\n    suites: [\n        'tests/unit/**\\/*.js',\n        'tests/intergration/request.js'\n    ]\n}\n```\n\nNote that using globs with the browser client requires that Intern's\nserver be used to serve the tests. The server can be run in standalone\nmode by setting the `serveOnly` option.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 477,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.suites",
								"id": 5076
							}
						},
						{
							"id": 5057,
							"name": "tsconfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An optional path to a tsconfig for ts-node, or false if TypeScript\nsupport is not needed. This option can be used if tests need to use a\ndifferent tsconfig than the project uses normally."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 484,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "false"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.tsconfig",
								"id": 5077
							}
						},
						{
							"id": 5049,
							"name": "tunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Dig Dug tunnel class to use for WebDriver testing.",
								"text": "There are several built in tunnel types, and others can be added through\nthe Node executor’s [`registerPlugin`\nmethod](./architecture.md#extension-points).\n\nThe built in tunnel classes are:\n\n* 'null'\n* 'selenium'\n* 'browserstack'\n* 'cbt' (CrossBrowserTesting)\n* 'saucelabs'\n* 'testingbot'\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 316,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5050,
							"name": "tunnelOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Options for the currently selected tunnel.",
								"text": "The available options depend on the current tunnel. Common options\ninclude:\n\n** All tunnels**\n\n| Property   | Value                                                    |\n| :---       | :---                                                     |\n| `username` | Username for the tunnel service (e.g., BrowserStack)     |\n| `apiKey`   | API key for the tunnel service (e.g., BrowserStack)      |\n| `pathname` | The path for the tunnel’s REST endpoint (e.g., `wd/hub`) |\n\n**Selenium tunnel**\n\n| Property  | Value                                                                   |\n| :---      | :---                                                                    |\n| `drivers` | A list of driver names, or objects with `name` and `options` properties |\n| `verbose` | If true, show tunnel debug information                                  |\n\nSee also:\n\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/Tunnel/tunnelproperties|Tunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/SeleniumTunnel/seleniumproperties|SeleniumTunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/BrowserStackTunnel/browserstackproperties|BrowserStackTunnel]]\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 345,
									"character": 15
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "TunnelOptions",
										"id": 2475
									},
									{
										"type": "reference",
										"name": "BrowserStackOptions",
										"id": 2927
									},
									{
										"type": "reference",
										"name": "SeleniumOptions",
										"id": 2770
									}
								]
							}
						},
						{
							"id": 5052,
							"name": "warnOnUncaughtException",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled error. This setting allows unhandled errors to be\ntreated as warnings instead of failing errors. If this setting is true or\nset to a RegExp that matches an unhandled error, Intern will emit a warning\nrather than failing the test run."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 363,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "RegExp"
									}
								]
							}
						},
						{
							"id": 5051,
							"name": "warnOnUnhandledRejection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled Promise rejection. This setting allows unhandled\nrejections to be treated as warnings instead of failing errors. If this\nsetting is true or set to a RegExp that matches the reason for an unhandled\nrejection, Intern will emit a warning rather than failing the test run."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 354,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "RegExp"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5000,
								5002,
								5001,
								5003,
								5004,
								5005,
								5017,
								5023,
								5024,
								5006,
								5007,
								5008,
								5009,
								5025,
								5026,
								5010,
								5027,
								5028,
								5029,
								5030,
								5011,
								5036,
								5037,
								5012,
								5041,
								5053,
								5042,
								5013,
								5014,
								5055,
								5043,
								5054,
								5058,
								5059,
								5044,
								5060,
								5045,
								5046,
								5047,
								5015,
								5016,
								5048,
								5056,
								5057,
								5049,
								5050,
								5052,
								5051
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/config.ts",
							"line": 13,
							"character": 23
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ResourceConfig",
							"id": 5072
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "RemoteConfig",
							"id": 6162
						}
					]
				},
				{
					"id": 5090,
					"name": "EnvironmentSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 5092,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 5093,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 5091,
							"name": "browserName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 501,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5091
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/config.ts",
							"line": 500,
							"character": 32
						}
					]
				},
				{
					"id": 5068,
					"name": "Listener",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A generic event listener"
					},
					"typeParameter": [
						{
							"id": 5069,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"signatures": [
						{
							"id": 5070,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A generic event listener"
							},
							"parameters": [
								{
									"id": 5071,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/config.ts",
							"line": 388,
							"character": 25
						}
					]
				},
				{
					"id": 5084,
					"name": "LoaderDescriptor",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 5086,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 497,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 5087,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 5088,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 5089,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 5085,
							"name": "script",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 496,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5086,
								5085
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/config.ts",
							"line": 495,
							"character": 33
						}
					]
				},
				{
					"id": 5064,
					"name": "PluginDescriptor",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A descriptor object for a script. If an options value is present, the\ndescriptor is assumed to refer to a plugin, and the options will be passed to\nthe plugins initializer function."
					},
					"children": [
						{
							"id": 5067,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 382,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 5065,
							"name": "script",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 380,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5066,
							"name": "useLoader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 381,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5067,
								5065,
								5066
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/config.ts",
							"line": 379,
							"character": 33
						}
					]
				},
				{
					"id": 5061,
					"name": "ReporterDescriptor",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A descriptor object used to load a built-in reporter"
					},
					"children": [
						{
							"id": 5062,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 370,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5063,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 371,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOptions",
								"id": 4887
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5062,
								5063
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/config.ts",
							"line": 369,
							"character": 35
						}
					]
				},
				{
					"id": 5072,
					"name": "ResourceConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 5073,
							"name": "loader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The loader used to load test suites and application modules.",
								"text": "When passed in as part of a config object, the `loader` property can be a\nstring with a loader name or the path to a loader script. It may also be\nan object with `script` and `config` properties. Intern provides built-in\nloader scripts for Dojo and Dojo2, which can be specified with the IDs\n'dojo' and 'dojo2'.\n\n```ts\nloader: 'dojo2'\nloader: 'tests/loader.js'\nloader: {\n    script: 'dojo',\n    config: {\n        packages: [\n            { name: 'app', location: './js' }\n        ]\n    }\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 415,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "LoaderDescriptor",
								"id": 5084
							}
						},
						{
							"id": 5075,
							"name": "plugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of scripts or modules to load before suites are loaded."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 459,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "PluginDescriptor",
									"id": 5064
								}
							}
						},
						{
							"id": 5074,
							"name": "reporters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of reporter names or descriptors.",
								"text": "Reporters specified in this list must have been previously installed\nusing\n[`registerReporter`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerreporter)\nor\n[`registerPlugin`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerplugin).\n\nList entries may be reporter names or objects of the format\n\n```js\n{\n    name: 'reporter name',\n    options: {\n        // reporter-specific options\n    }\n}\n```\n\nThe built-in reporters under Node are:\n  * benchmark - output benchmark test results\n  * cobertura - output coverage data in the cobertura format\n  * htmlcoverage - output coverage data as an HTML report\n  * jsoncoverage - output coverage data in a JSON format\n  * junit - output results in JUnit format\n  * lcov - output coverage results in lcov format\n  * pretty - draw text results in a terminal\n  * runner - output test results as formatted text (default Node reporter)\n  * simple - output test results as simple text\n  * teamcity - output results in TeamCity format\n\nThe built-in reporters available in browsers are:\n  * console - output to the browser console\n  * dom - output results as text in the DOM\n  * html - output a pretty HTML report (default browser reporter)\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 454,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ReporterDescriptor",
									"id": 5061
								}
							}
						},
						{
							"id": 5078,
							"name": "require",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 486,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 5079,
							"name": "requires",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 487,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 5080,
							"name": "scripts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 488,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 5076,
							"name": "suites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of paths or glob expressions that point to suite scripts.",
								"text": "```js\n{\n    suites: [\n        'tests/unit/**\\/*.js',\n        'tests/intergration/request.js'\n    ]\n}\n```\n\nNote that using globs with the browser client requires that Intern's\nserver be used to serve the tests. The server can be run in standalone\nmode by setting the `serveOnly` option.\n"
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 477,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 5077,
							"name": "tsconfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An optional path to a tsconfig for ts-node, or false if TypeScript\nsupport is not needed. This option can be used if tests need to use a\ndifferent tsconfig than the project uses normally."
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/config.ts",
									"line": 484,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "false"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5073,
								5075,
								5074,
								5078,
								5079,
								5080,
								5076,
								5077
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/config.ts",
							"line": 392,
							"character": 31
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Config",
							"id": 4999
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						5081,
						4999,
						5090,
						5068,
						5084,
						5064,
						5061,
						5072
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/common/config.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4564,
			"name": "\"core/lib/common/console\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/common/console.ts",
			"children": [
				{
					"id": 4568,
					"name": "error",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4569,
							"name": "error",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4570,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/console.ts",
							"line": 11,
							"character": 21
						}
					]
				},
				{
					"id": 4565,
					"name": "log",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4566,
							"name": "log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4567,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/console.ts",
							"line": 3,
							"character": 19
						}
					]
				},
				{
					"id": 4571,
					"name": "warn",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4572,
							"name": "warn",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4573,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/console.ts",
							"line": 19,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						4568,
						4565,
						4571
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/common/console.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3707,
			"name": "\"core/lib/common/path\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/common/path.ts",
			"children": [
				{
					"id": 3708,
					"name": "dirname",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3709,
							"name": "dirname",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the parent directory name of a path"
							},
							"parameters": [
								{
									"id": 3710,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/path.ts",
							"line": 4,
							"character": 23
						}
					]
				},
				{
					"id": 3711,
					"name": "getPathSep",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3712,
							"name": "getPathSep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the path separator used for a given set of paths."
							},
							"parameters": [
								{
									"id": 3713,
									"name": "paths",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "\\"
									},
									{
										"type": "stringLiteral",
										"value": "/"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/path.ts",
							"line": 17,
							"character": 26
						}
					]
				},
				{
					"id": 3714,
					"name": "join",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3715,
							"name": "join",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Join a set of paths, resolving any relative segments (. or ..) in subsequent\npaths against the first path."
							},
							"parameters": [
								{
									"id": 3716,
									"name": "paths",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/path.ts",
							"line": 25,
							"character": 20
						}
					]
				},
				{
					"id": 3717,
					"name": "normalize",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3718,
							"name": "normalize",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Normalize a path, replacing any occurrences of '\\' with '/'"
							},
							"parameters": [
								{
									"id": 3719,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/path.ts",
							"line": 52,
							"character": 25
						}
					]
				},
				{
					"id": 3720,
					"name": "normalizePathEnding",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3721,
							"name": "normalizePathEnding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Normalize a path such that it ends with a path separator"
							},
							"parameters": [
								{
									"id": 3722,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3723,
									"name": "pathSep",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"/\""
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/path.ts",
							"line": 59,
							"character": 35
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						3708,
						3711,
						3714,
						3717,
						3720
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/common/path.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3724,
			"name": "\"core/lib/common/util\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/common/util.ts",
			"children": [
				{
					"id": 3725,
					"name": "EvaluatedProperty",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3727,
							"name": "addToExisting",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/util.ts",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3726,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/common/util.ts",
									"line": 10,
									"character": 6
								}
							],
							"type": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"name": "Config"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3727,
								3726
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 9,
							"character": 34
						}
					]
				},
				{
					"id": 3728,
					"name": "TextLoader",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3729,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3730,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 14,
							"character": 27
						}
					]
				},
				{
					"id": 3733,
					"name": "Parser",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 3734,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 27,
							"character": 18
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3735,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3736,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3737,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/util.ts",
									"line": 27,
									"character": 29
								}
							]
						}
					}
				},
				{
					"id": 3732,
					"name": "TypeName",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 18,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "string"
							},
							{
								"type": "stringLiteral",
								"value": "boolean"
							},
							{
								"type": "stringLiteral",
								"value": "number"
							},
							{
								"type": "stringLiteral",
								"value": "regexp"
							},
							{
								"type": "stringLiteral",
								"value": "object"
							},
							{
								"type": "stringLiteral",
								"value": "string[]"
							},
							{
								"type": "stringLiteral",
								"value": "object[]"
							}
						]
					}
				},
				{
					"id": 3824,
					"name": "configPathSeparator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 981,
							"character": 25
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "@"
					},
					"defaultValue": "\"@\""
				},
				{
					"id": 3731,
					"name": "defaultConfig",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 7,
							"character": 26
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "intern.json"
					},
					"defaultValue": "\"intern.json\""
				},
				{
					"id": 3815,
					"name": "_loadConfig",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 3816,
							"name": "_loadConfig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3817,
									"name": "configPath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3818,
									"name": "loadText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TextLoader",
										"id": 3728
									}
								},
								{
									"id": 3819,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 3820,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 3821,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3822,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 3823,
									"name": "childConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 841,
							"character": 20
						}
					]
				},
				{
					"id": 3738,
					"name": "evalProperty",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3739,
							"name": "evalProperty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Evaluate a config property key"
							},
							"typeParameter": [
								{
									"id": 3740,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 3741,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "typeParameter",
											"name": "C"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "EvaluatedProperty",
								"id": 3725
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 32,
							"character": 28
						}
					]
				},
				{
					"id": 3742,
					"name": "getBasePath",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3743,
							"name": "getBasePath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the base path based on a config file path and a user-supplied base path.",
								"text": "The path separator will be normalized based on the separator used in\nconfigFile or basePath and the optional pathSep arg.\n"
							},
							"parameters": [
								{
									"id": 3744,
									"name": "configFile",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3745,
									"name": "basePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3746,
									"name": "isAbsolute",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 3747,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 3748,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 3749,
															"name": "path",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/common/util.ts",
													"line": 50,
													"character": 13
												}
											]
										}
									}
								},
								{
									"id": 3750,
									"name": "pathSep",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 47,
							"character": 27
						}
					]
				},
				{
					"id": 3751,
					"name": "getConfigDescription",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3752,
							"name": "getConfigDescription",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a string describing a config file, including any child configs."
							},
							"parameters": [
								{
									"id": 3753,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 3754,
									"name": "prefix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"\""
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 88,
							"character": 36
						}
					]
				},
				{
					"id": 3755,
					"name": "loadConfig",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3756,
							"name": "loadConfig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Load config data from a given path, using a given text loader, and mixing\nargs and/or a childConfig into the final config value if provided."
							},
							"parameters": [
								{
									"id": 3757,
									"name": "configPath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3758,
									"name": "loadText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TextLoader",
										"id": 3728
									}
								},
								{
									"id": 3759,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 3760,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 3761,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3762,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 3763,
									"name": "childConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 122,
							"character": 26
						}
					]
				},
				{
					"id": 3764,
					"name": "parseArgs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3765,
							"name": "parseArgs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Parse an array of name=value arguments into an object"
							},
							"parameters": [
								{
									"id": 3766,
									"name": "rawArgs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3767,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 3768,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 3769,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 146,
							"character": 25
						}
					]
				},
				{
					"id": 3770,
					"name": "parseJson",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3771,
							"name": "parseJson",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Parse a JSON string that may contain comments"
							},
							"parameters": [
								{
									"id": 3772,
									"name": "json",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 192,
							"character": 25
						}
					]
				},
				{
					"id": 3773,
					"name": "parseValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3774,
							"name": "parseValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Parse a particular type of value from a given value"
							},
							"parameters": [
								{
									"id": 3775,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The 'name' of the value being parsed (used for error messages)"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3776,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A value to parse something from"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 3777,
									"name": "parser",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The type of thing to parse, or a parser function"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TypeName",
												"id": 3732
											},
											{
												"type": "reference",
												"name": "Parser",
												"id": 3733
											}
										]
									}
								},
								{
									"id": 3778,
									"name": "requiredProperty",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Only used with 'object' and 'object[]' parsers\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 204,
							"character": 26
						}
					]
				},
				{
					"id": 3779,
					"name": "prefix",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3780,
							"name": "prefix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return a string with all lines prefixed with a given prefix."
							},
							"parameters": [
								{
									"id": 3781,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3782,
									"name": "prefix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 305,
							"character": 22
						}
					]
				},
				{
					"id": 3783,
					"name": "processOption",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3784,
							"name": "processOption",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process a Config option, transforming it to a canonical form and storing it\non the given config object.",
								"text": "If an executor is provided, it will be used to emit deprecation and log\nevents.\n"
							},
							"typeParameter": [
								{
									"id": 3785,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Config",
										"id": 4999
									}
								}
							],
							"parameters": [
								{
									"id": 3786,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "typeParameter",
											"name": "C",
											"constraint": {
												"type": "reference",
												"name": "Config",
												"id": 4999
											}
										}
									}
								},
								{
									"id": 3787,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 3788,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "C",
										"constraint": {
											"type": "reference",
											"name": "Config",
											"id": 4999
										}
									}
								},
								{
									"id": 3789,
									"name": "executor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 319,
							"character": 29
						}
					]
				},
				{
					"id": 3790,
					"name": "pullFromArray",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3791,
							"name": "pullFromArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove all instances of of an item from any array and return the removed\ninstances."
							},
							"typeParameter": [
								{
									"id": 3792,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 3793,
									"name": "haystack",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								},
								{
									"id": 3794,
									"name": "needle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "T"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 690,
							"character": 29
						}
					]
				},
				{
					"id": 3795,
					"name": "removeComments",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 3796,
							"name": "removeComments",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove JS-style line and block comments from a string"
							},
							"parameters": [
								{
									"id": 3797,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 704,
							"character": 23
						}
					]
				},
				{
					"id": 3825,
					"name": "serializeReplacer",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 3826,
							"name": "serializeReplacer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replacer function used in stringify"
							},
							"parameters": [
								{
									"id": 3827,
									"name": "_key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3828,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 986,
							"character": 26
						}
					]
				},
				{
					"id": 3798,
					"name": "setOption",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3799,
							"name": "setOption",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set an option value."
							},
							"parameters": [
								{
									"id": 3800,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Config",
										"id": 4999
									}
								},
								{
									"id": 3801,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "Config"
										}
									}
								},
								{
									"id": 3802,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 3803,
									"name": "addToExisting",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 777,
							"character": 25
						}
					]
				},
				{
					"id": 3804,
					"name": "splitConfigPath",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3805,
							"name": "splitConfigPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Split a config path into a file name and a child config name.",
								"text": "This allows for the case where a file name itself may include the config\nseparator (e.g., a scoped npm package).\n"
							},
							"parameters": [
								{
									"id": 3806,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3807,
									"name": "separator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"/\""
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3808,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 3810,
											"name": "childConfig",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/core/lib/common/util.ts",
													"line": 808,
													"character": 36
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 3809,
											"name": "configFile",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/common/util.ts",
													"line": 808,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												3810,
												3809
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/common/util.ts",
											"line": 808,
											"character": 2
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 805,
							"character": 31
						}
					]
				},
				{
					"id": 3811,
					"name": "stringify",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3812,
							"name": "stringify",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Convert an object to JSON, handling non-primitive properties",
								"returns": "A JSON string\n"
							},
							"parameters": [
								{
									"id": 3813,
									"name": "object",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The object to serialise."
									},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								},
								{
									"id": 3814,
									"name": "indent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/common/util.ts",
							"line": 834,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3725,
						3728
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3733,
						3732
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						3824,
						3731
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						3815,
						3738,
						3742,
						3751,
						3755,
						3764,
						3770,
						3773,
						3779,
						3783,
						3790,
						3795,
						3825,
						3798,
						3804,
						3811
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/common/util.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5902,
			"name": "\"core/lib/executors/Browser\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/executors/Browser.ts",
			"children": [
				{
					"id": 5903,
					"name": "Browser",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Browser executor is used to run unit tests in a browser."
					},
					"children": [
						{
							"id": 5904,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5905,
									"name": "new Browser",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 5906,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 5907,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Browser",
										"id": 5903
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor.__constructor",
										"id": 4645
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Browser.ts",
									"line": 18,
									"character": 72
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor.__constructor",
								"id": 4645
							}
						},
						{
							"id": 5916,
							"name": "_config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 82,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Config",
								"id": 4999
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._config",
								"id": 4619
							}
						},
						{
							"id": 5919,
							"name": "_errorFormatter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 85,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ErrorFormatter",
										"id": 3669
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._errorFormatter",
								"id": 4622
							}
						},
						{
							"id": 5918,
							"name": "_events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 84,
									"character": 19
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "InternEvent",
									"id": 4780,
									"typeArguments": [
										{
											"type": "reference",
											"name": "Events",
											"id": 4799
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._events",
								"id": 4621
							}
						},
						{
							"id": 5922,
							"name": "_hasEmittedErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 88,
									"character": 29
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._hasEmittedErrors",
								"id": 4625
							}
						},
						{
							"id": 5920,
							"name": "_hasSuiteErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 86,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._hasSuiteErrors",
								"id": 4623
							}
						},
						{
							"id": 5921,
							"name": "_hasTestErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 87,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._hasTestErrors",
								"id": 4624
							}
						},
						{
							"id": 5931,
							"name": "_listeners",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 94,
									"character": 22
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 5932,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 5933,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 5934,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Listener",
													"id": 4784,
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/executors/Executor.ts",
											"line": 94,
											"character": 23
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._listeners",
								"id": 4634
							}
						},
						{
							"id": 5923,
							"name": "_loader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 89,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Loader",
								"id": 4818
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loader",
								"id": 4626
							}
						},
						{
							"id": 5925,
							"name": "_loaderInit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 91,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Loader",
												"id": 4818
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loaderInit",
								"id": 4628
							}
						},
						{
							"id": 5924,
							"name": "_loaderOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 90,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loaderOptions",
								"id": 4627
							}
						},
						{
							"id": 5930,
							"name": "_loadingPluginOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 93,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadingPluginOptions",
								"id": 4633
							}
						},
						{
							"id": 5926,
							"name": "_loadingPlugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 92,
									"character": 27
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 5927,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 5929,
												"name": "init",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/core/lib/executors/Executor.ts",
														"line": 92,
														"character": 49
													}
												],
												"type": {
													"type": "reference",
													"name": "CancellablePromise",
													"id": 2,
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "void"
														}
													]
												}
											},
											{
												"id": 5928,
												"name": "name",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/core/lib/executors/Executor.ts",
														"line": 92,
														"character": 35
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													5929,
													5928
												]
											}
										],
										"sources": [
											{
												"fileName": "src/core/lib/executors/Executor.ts",
												"line": 92,
												"character": 28
											}
										]
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadingPlugins",
								"id": 4629
							}
						},
						{
							"id": 5935,
							"name": "_plugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 95,
									"character": 20
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 5936,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 5937,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 5938,
													"name": "name",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/executors/Executor.ts",
											"line": 95,
											"character": 21
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._plugins",
								"id": 4638
							}
						},
						{
							"id": 5939,
							"name": "_reporters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 96,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Reporter",
									"id": 4837
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._reporters",
								"id": 4642
							}
						},
						{
							"id": 5941,
							"name": "_reportersInitialized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 98,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._reportersInitialized",
								"id": 4644
							}
						},
						{
							"id": 5917,
							"name": "_rootSuite",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 83,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._rootSuite",
								"id": 4620
							}
						},
						{
							"id": 5940,
							"name": "_runTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 97,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._runTask",
								"id": 4643
							}
						},
						{
							"id": 5942,
							"name": "config",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The resolved configuration for this executor."
							},
							"getSignature": [
								{
									"id": 5943,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The resolved configuration for this executor."
									},
									"type": {
										"type": "unknown",
										"name": "C"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.config",
										"id": 4651
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 175,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.config",
								"id": 4651
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.config",
								"id": 4576
							}
						},
						{
							"id": 5908,
							"name": "environment",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 5909,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RuntimeEnvironment",
										"id": 3482
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor.environment",
										"id": 4649
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Browser.ts",
									"line": 70,
									"character": 17
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor.environment",
								"id": 4649
							}
						},
						{
							"id": 5944,
							"name": "suites",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The root suites managed by this executor"
							},
							"getSignature": [
								{
									"id": 5945,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The root suites managed by this executor"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Suite",
											"id": 3566
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.suites",
										"id": 4653
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 182,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.suites",
								"id": 4653
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.suites",
								"id": 4577
							}
						},
						{
							"id": 6030,
							"name": "_afterRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6031,
									"name": "_afterRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Code to execute after the main test run has finished to shut down the test\nsystem."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._afterRun",
										"id": 4742
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 770,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._afterRun",
								"id": 4742
							}
						},
						{
							"id": 6032,
							"name": "_assignPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6033,
									"name": "_assignPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a resolved plugin to the internal plugins list"
									},
									"parameters": [
										{
											"id": 6034,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6035,
											"name": "plugin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._assignPlugin",
										"id": 4744
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 777,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._assignPlugin",
								"id": 4744
							}
						},
						{
							"id": 6036,
							"name": "_beforeRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6037,
									"name": "_beforeRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Code to execute before the main test run has started to set up the test\nsystem. This is where Executors can do any last-minute configuration\nbefore the testing process begins.",
										"text": "This method returns a CancellablePromise that resolves to a boolean. A\nvalue of true indicates that Intern should skip running tests and exit\nnormally.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._beforeRun",
										"id": 4748
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 793,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._beforeRun",
								"id": 4748
							}
						},
						{
							"id": 6040,
							"name": "_drainEventQueue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6041,
									"name": "_drainEventQueue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit any queued events. The event queue will be empty after this method\nruns."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._drainEventQueue",
										"id": 4752
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 842,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._drainEventQueue",
								"id": 4752
							}
						},
						{
							"id": 6042,
							"name": "_emitCoverage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6043,
									"name": "_emitCoverage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6044,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._emitCoverage",
										"id": 4754
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 853,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._emitCoverage",
								"id": 4754
							}
						},
						{
							"id": 6038,
							"name": "_initReporters",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6039,
									"name": "_initReporters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiate any configured built-in reporters"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._initReporters",
										"id": 4750
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 806,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._initReporters",
								"id": 4750
							}
						},
						{
							"id": 6045,
							"name": "_loadLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6046,
									"name": "_loadLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a loader"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._loadLoader",
										"id": 4757
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 867,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadLoader",
								"id": 4757
							}
						},
						{
							"id": 6049,
							"name": "_loadPlugins",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6050,
									"name": "_loadPlugins",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts in the `plugins` list using the platform's native loading\nmechanism"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._loadPlugins",
										"id": 4761
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 923,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadPlugins",
								"id": 4761
							}
						},
						{
							"id": 6047,
							"name": "_loadPluginsWithLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6048,
									"name": "_loadPluginsWithLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts in the `requires` list using an external loader, if\nconfigured, or the platform's native loading mechanism"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._loadPluginsWithLoader",
										"id": 4759
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 911,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadPluginsWithLoader",
								"id": 4759
							}
						},
						{
							"id": 6051,
							"name": "_loadScripts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6052,
									"name": "_loadScripts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a list of scripts using a given loader. These will be loaded\nsequentially in order."
									},
									"parameters": [
										{
											"id": 6053,
											"name": "scripts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "PluginDescriptor",
													"id": 5064
												}
											}
										},
										{
											"id": 6054,
											"name": "loader",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6055,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 6056,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6057,
																	"name": "script",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Promise",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "void"
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/executors/Executor.ts",
															"line": 937,
															"character": 11
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._loadScripts",
										"id": 4763
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 935,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadScripts",
								"id": 4763
							}
						},
						{
							"id": 6058,
							"name": "_loadSuites",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6059,
									"name": "_loadSuites",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load suites"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._loadSuites",
										"id": 4770
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 970,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadSuites",
								"id": 4770
							}
						},
						{
							"id": 6060,
							"name": "_processOption",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6061,
									"name": "_processOption",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process an option"
									},
									"parameters": [
										{
											"id": 6062,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "Config"
												}
											}
										},
										{
											"id": 6063,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._processOption",
										"id": 4772
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 982,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._processOption",
								"id": 4772
							}
						},
						{
							"id": 5914,
							"name": "_resolveConfig",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5915,
									"name": "_resolveConfig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor._resolveConfig",
										"id": 4776
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Browser.ts",
									"line": 95,
									"character": 26
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor._resolveConfig",
								"id": 4776
							}
						},
						{
							"id": 6064,
							"name": "_runTests",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6065,
									"name": "_runTests",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs each of the root suites, limited to a certain number of suites at\nthe same time by `maxConcurrency`."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._runTests",
										"id": 4778
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1021,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._runTests",
								"id": 4778
							}
						},
						{
							"id": 5950,
							"name": "addSuite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5951,
									"name": "addSuite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a suite to the set of suites that will be run when `run` is called.",
										"text": "The suite is added by calling a factory function. The use of a factory\nallows for distinct instances of a given suite to be create when an\nexecutor has multiple root suites.\n\n```js\nintern.addSuite(parent => {\n    const suite = new Suite({\n        name: 'create new',\n        tests: [\n            new Test({\n                name: 'new test',\n                test: () => assert.doesNotThrow(() => new Component())\n            })\n        ]\n    });\n    parent.add(suite);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 5952,
											"name": "factory",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that will add a new Suite object to a given\nparent suite.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5953,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 5954,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 5955,
																	"name": "parentSuite",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Suite",
																		"id": 3566
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/executors/Executor.ts",
															"line": 232,
															"character": 19
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.addSuite",
										"id": 4662
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 232,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.addSuite",
								"id": 4662
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.addSuite",
								"id": 4578
							}
						},
						{
							"id": 5956,
							"name": "configure",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5957,
									"name": "configure",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Configure the executor with an object containing\n[[lib/executors/Executor.Config]] properties."
									},
									"parameters": [
										{
											"id": 5958,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5959,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/lib/executors/Executor.ts",
															"line": 240,
															"character": 20
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.configure",
										"id": 4668
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 240,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.configure",
								"id": 4668
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.configure",
								"id": 4584
							}
						},
						{
							"id": 5960,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5961,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit an event to all registered listeners.",
										"text": "Event listeners may execute async code, and a failing handler (one that\nrejects or throws an error) will cause the emit to fail.\n",
										"returns": "a CancellablePromise that resolves when all listeners have processed the event\n"
									},
									"typeParameter": [
										{
											"id": 5962,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NoDataEvents",
												"id": 4838
											}
										}
									],
									"parameters": [
										{
											"id": 5963,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the event to emit"
											},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "NoDataEvents",
													"id": 4838
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.emit",
										"id": 4672
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.emit",
										"id": 4591
									}
								},
								{
									"id": 5964,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 5965,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "Events"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 5966,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "Events"
													}
												}
											}
										},
										{
											"id": 5967,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "unknown",
												"name": "E[T]"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.emit",
										"id": 4672
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 257,
									"character": 6
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 258,
									"character": 6
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 259,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.emit",
								"id": 4672
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.emit",
								"id": 4590
							}
						},
						{
							"id": 5946,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5947,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format an error, normalizing the stack trace and resolving source map\nreferences"
									},
									"parameters": [
										{
											"id": 5948,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 5949,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.formatError",
										"id": 4655
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.formatError",
										"id": 4599
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 190,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.formatError",
								"id": 4655
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.formatError",
								"id": 4598
							}
						},
						{
							"id": 5968,
							"name": "getInterface",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5969,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a registered interface plugin.",
										"text": "This method calls `getPlugin` behind the scenes.\n",
										"returns": "the interface, which may be an object or a callable function, or\nundefined if no such interface was registered.\n"
									},
									"parameters": [
										{
											"id": 5970,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the interface"
											},
											"type": {
												"type": "stringLiteral",
												"value": "object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ObjectInterface",
										"id": 3830
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getInterface",
										"id": 4680
									}
								},
								{
									"id": 5971,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5972,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "tdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TddInterface",
										"id": 3877
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getInterface",
										"id": 4680
									}
								},
								{
									"id": 5973,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5974,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "bdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BddInterface",
										"id": 3954
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getInterface",
										"id": 4680
									}
								},
								{
									"id": 5975,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5976,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "benchmark"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkInterface",
										"id": 4528
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getInterface",
										"id": 4680
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 358,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 359,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 360,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 361,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 362,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.getInterface",
								"id": 4680
							}
						},
						{
							"id": 5977,
							"name": "getPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5978,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get any resources registered by a particular plugin.",
										"returns": "the resource registered for the given plugin name, or undefined\nif no such plugin was registered.\n"
									},
									"typeParameter": [
										{
											"id": 5979,
											"name": "Y",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "Plugins"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 5980,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the type of plugin (e.g., 'interface' or 'reporter')"
											},
											"type": {
												"type": "typeParameter",
												"name": "Y",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "Plugins"
													}
												}
											}
										},
										{
											"id": 5981,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the plugin"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "P[Y]"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 5982,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5983,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "chai"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ChaiStatic"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 5984,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5985,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ObjectInterface",
										"id": 3830
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 5986,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5987,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.tdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TddInterface",
										"id": 3877
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 5988,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5989,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.bdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BddInterface",
										"id": 3954
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 5990,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5991,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.benchmark"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkInterface",
										"id": 4528
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 5992,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 5993,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 5994,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 374,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 375,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 376,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 377,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 378,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 379,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 380,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 381,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.getPlugin",
								"id": 4689
							}
						},
						{
							"id": 5910,
							"name": "loadScript",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5911,
									"name": "loadScript",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a script or scripts via script injection."
									},
									"parameters": [
										{
											"id": 5912,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a path to a script\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 5913,
											"name": "isEsm",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor.loadScript",
										"id": 4659
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Browser.ts",
									"line": 79,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor.loadScript",
								"id": 4659
							}
						},
						{
							"id": 5995,
							"name": "log",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5996,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a convenience method for emitting log events.",
										"text": "When debug mode is enabled, this method emits 'log' events using `emit`.\nOtherwise it does nothing.\n",
										"returns": "a CancellablePromise that resolves when all listeners have finished processing\nthe event.\n"
									},
									"parameters": [
										{
											"id": 5997,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "A list of arguments that will be stringified and combined\ninto a space-separated message."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.log",
										"id": 4707
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.log",
										"id": 4603
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 402,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.log",
								"id": 4707
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.log",
								"id": 4602
							}
						},
						{
							"id": 5998,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5999,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a listener for a test event.",
										"text": "```js\nintern.on('error', error => {\n    console.log('An error occurred:', error);\n});\n```\n\nA listener can be notified of all events by registering for the '*'\nevent, or by calling on with only a callback:\n\n```js\nintern.on(event => {\n    console.log(`An ${event.name} event occurred:`, event.data);\n});\n```\nNote that some events are executor-specific. For example, the\n[[lib/executors/Browser]] executor will never emit a tunnelStop\nmessage.\n",
										"returns": "a handle with a `destroy` method that can be used to stop\nlistening\n"
									},
									"typeParameter": [
										{
											"id": 6000,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "Events"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 6001,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the [[lib/executors/Executor.Events|event]] to listen\nfor"
											},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "Events"
													}
												}
											}
										},
										{
											"id": 6002,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a callback that accepts a single data parameter; it may\nreturn a PromiseLike object if it needs to perform async actions"
											},
											"type": {
												"type": "reference",
												"name": "Listener",
												"id": 4784,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "E[T]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.on",
										"id": 4710
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.on",
										"id": 4606
									}
								},
								{
									"id": 6003,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6004,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Listener",
												"id": 4784,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 6005,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 6007,
																	"name": "data",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/core/lib/executors/Executor.ts",
																			"line": 462,
																			"character": 44
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 6006,
																	"name": "name",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/core/lib/executors/Executor.ts",
																			"line": 462,
																			"character": 30
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		6007,
																		6006
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/core/lib/executors/Executor.ts",
																	"line": 462,
																	"character": 24
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.on",
										"id": 4710
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.on",
										"id": 4610
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 461,
									"character": 4
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 462,
									"character": 4
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 463,
									"character": 4
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.on",
								"id": 4710
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.on",
								"id": 4605
							}
						},
						{
							"id": 6008,
							"name": "registerInterface",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6009,
									"name": "registerInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register an interface plugin",
										"text": "This is a convenience method for registering test interfaces. This method\ncalls [[lib/executors/Executor.Executor.registerPlugin]] behind the\nscenes using the name `interface.${name}`.\n"
									},
									"parameters": [
										{
											"id": 6010,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6011,
											"name": "iface",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.registerInterface",
										"id": 4720
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 499,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.registerInterface",
								"id": 4720
							}
						},
						{
							"id": 6012,
							"name": "registerLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6013,
									"name": "registerLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a module loader.",
										"text": "This method sets the loader script that will be used to load plugins and\nsuites. The callback should accept an options object and return a\nfunction that can load modules.\n\n```js\nintern.registerLoader(options: any => {\n    // Register loader can return a Promise if it needs to load something\n    // itself\n    return intern.loadScript('some/loader.js').then(() => {\n        loader.config(options);\n        // Return a function that takes a list of modules and returns a\n        // Promise that resolves when they've been loaded.\n        return (modules: string[]) => {\n            return loader.load(modules);\n        });\n    });\n});\n```\n"
									},
									"parameters": [
										{
											"id": 6014,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a loader initialzation callback that should return a loader\nfunction, or a Promise that resolves to a loader function\n"
											},
											"type": {
												"type": "reference",
												"name": "LoaderInit",
												"id": 4821
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.registerLoader",
										"id": 4724
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 528,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.registerLoader",
								"id": 4724
							}
						},
						{
							"id": 6015,
							"name": "registerPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6016,
									"name": "registerPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a plugin.",
										"text": "Plugins are resources that are loaded at the beginning of the testing\nprocess, after the loader but before any suites are registered. The\ncallback may return a Promise if the plugin needs to do some asynchronous\ninitialization. If the plugin is being loaded via the\n[[lib/executors/Executor.Config.plugins|config.plugins]]\nproperty, it's init callback will be passed any configured options. The\nresolved return value of the callback will be returned by\n[[lib/executors/Executor.Executor.getPlugin]].\n\n```js\nintern.registerPlugin('foo', (options: any) => {\n    return {\n        doSomething() {\n            // ...\n        },\n        doSomethingElse() {\n            // ...\n        }\n    };\n});\n```\n\nCode would use the plugin by calling getPlugin:\n\n```js\nconst { doSomething, doSomethingElse } = intern.getPlugin('foo');\ndoSomething();\n```\n"
									},
									"typeParameter": [
										{
											"id": 6017,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "Plugins"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 6018,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "Plugins"
													}
												}
											}
										},
										{
											"id": 6019,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the plugin name"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6020,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an initializer function that returns the plugin resource, or\na Promise that resolves to the resource\n"
											},
											"type": {
												"type": "reference",
												"name": "PluginInitializer",
												"id": 4827,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "P[T]"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.registerPlugin",
										"id": 4727
									}
								},
								{
									"id": 6021,
									"name": "registerPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6022,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6023,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PluginInitializer",
												"id": 4827
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.registerPlugin",
										"id": 4727
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 569,
									"character": 16
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 574,
									"character": 16
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 575,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.registerPlugin",
								"id": 4727
							}
						},
						{
							"id": 6024,
							"name": "registerReporter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6025,
									"name": "registerReporter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a reporter plugin",
										"text": "This is a convenience method for registering reporter constructors. This\nmethod calls [[lib/executors/Executor.Executor.registerPlugin]] behind\nthe scenes using the name `reporter.${name}`.\n"
									},
									"parameters": [
										{
											"id": 6026,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the reporter name"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6027,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterInitializer",
												"id": 4834
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.registerReporter",
										"id": 4736
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 613,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.registerReporter",
								"id": 4736
							}
						},
						{
							"id": 6028,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6029,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Run tests.",
										"text": "This method sets up the environment for test execution, runs the tests,\nand runs any finalization code afterwards.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.run",
										"id": 4740
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 623,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.run",
								"id": 4740
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								5904
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5916,
								5919,
								5918,
								5922,
								5920,
								5921,
								5931,
								5923,
								5925,
								5924,
								5930,
								5926,
								5935,
								5939,
								5941,
								5917,
								5940
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								5942,
								5908,
								5944
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6030,
								6032,
								6036,
								6040,
								6042,
								6038,
								6045,
								6049,
								6047,
								6051,
								6058,
								6060,
								5914,
								6064,
								5950,
								5956,
								5960,
								5946,
								5968,
								5977,
								5910,
								5995,
								5998,
								6008,
								6012,
								6015,
								6024,
								6028
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Browser.ts",
							"line": 18,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseExecutor",
							"id": 4615,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Events",
									"id": 4799
								},
								{
									"type": "reference",
									"name": "Config",
									"id": 4999
								},
								{
									"type": "reference",
									"name": "Plugins",
									"id": 4816
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Executor",
							"id": 4575
						}
					]
				},
				{
					"id": 6066,
					"name": "injectScript",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 6067,
							"name": "injectScript",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6068,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6069,
									"name": "isEsm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Browser.ts",
							"line": 160,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						5903
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6066
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/executors/Browser.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4574,
			"name": "\"core/lib/executors/Executor\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/executors/Executor.ts",
			"children": [
				{
					"id": 4615,
					"name": "BaseExecutor",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"comment": {
						"shortText": "This is the base executor class.",
						"text": "Executors are the main driver of the testing process. An instance of Executor\nis assigned to the `intern` global.\n"
					},
					"typeParameter": [
						{
							"id": 4616,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Events",
								"id": 4799
							}
						},
						{
							"id": 4617,
							"name": "C",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Config",
								"id": 4999
							}
						},
						{
							"id": 4618,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Plugins",
								"id": 4816
							}
						}
					],
					"children": [
						{
							"id": 4645,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4646,
									"name": "new BaseExecutor",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 4647,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 4648,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BaseExecutor",
										"id": 4615
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 98,
									"character": 43
								}
							]
						},
						{
							"id": 4619,
							"name": "_config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 82,
									"character": 19
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "C",
								"constraint": {
									"type": "reference",
									"name": "Config",
									"id": 4999
								}
							}
						},
						{
							"id": 4622,
							"name": "_errorFormatter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 85,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ErrorFormatter",
										"id": 3669
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4621,
							"name": "_events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 84,
									"character": 19
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "InternEvent",
									"id": 4780,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "E",
											"constraint": {
												"type": "reference",
												"name": "Events",
												"id": 4799
											}
										}
									]
								}
							}
						},
						{
							"id": 4625,
							"name": "_hasEmittedErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 88,
									"character": 29
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 4623,
							"name": "_hasSuiteErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 86,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 4624,
							"name": "_hasTestErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 87,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 4634,
							"name": "_listeners",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 94,
									"character": 22
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4635,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 4636,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 4637,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Listener",
													"id": 4784,
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/executors/Executor.ts",
											"line": 94,
											"character": 23
										}
									]
								}
							}
						},
						{
							"id": 4626,
							"name": "_loader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 89,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Loader",
								"id": 4818
							}
						},
						{
							"id": 4628,
							"name": "_loaderInit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 91,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Loader",
												"id": 4818
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4627,
							"name": "_loaderOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 90,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 4633,
							"name": "_loadingPluginOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 93,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4629,
							"name": "_loadingPlugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 92,
									"character": 27
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 4630,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 4632,
												"name": "init",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/core/lib/executors/Executor.ts",
														"line": 92,
														"character": 49
													}
												],
												"type": {
													"type": "reference",
													"name": "CancellablePromise",
													"id": 2,
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "void"
														}
													]
												}
											},
											{
												"id": 4631,
												"name": "name",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/core/lib/executors/Executor.ts",
														"line": 92,
														"character": 35
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													4632,
													4631
												]
											}
										],
										"sources": [
											{
												"fileName": "src/core/lib/executors/Executor.ts",
												"line": 92,
												"character": 28
											}
										]
									}
								}
							}
						},
						{
							"id": 4638,
							"name": "_plugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 95,
									"character": 20
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4639,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 4640,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 4641,
													"name": "name",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/executors/Executor.ts",
											"line": 95,
											"character": 21
										}
									]
								}
							}
						},
						{
							"id": 4642,
							"name": "_reporters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 96,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Reporter",
									"id": 4837
								}
							}
						},
						{
							"id": 4644,
							"name": "_reportersInitialized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 98,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 4620,
							"name": "_rootSuite",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 83,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							}
						},
						{
							"id": 4643,
							"name": "_runTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 97,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4651,
							"name": "config",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The resolved configuration for this executor."
							},
							"getSignature": [
								{
									"id": 4652,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The resolved configuration for this executor."
									},
									"type": {
										"type": "unknown",
										"name": "C"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 175,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Executor.config",
								"id": 4576
							}
						},
						{
							"id": 4649,
							"name": "environment",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Get the current enviroment"
							},
							"getSignature": [
								{
									"id": 4650,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Get the current enviroment"
									},
									"type": {
										"type": "reference",
										"name": "RuntimeEnvironment",
										"id": 3482
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 170,
									"character": 26
								}
							]
						},
						{
							"id": 4653,
							"name": "suites",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The root suites managed by this executor"
							},
							"getSignature": [
								{
									"id": 4654,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The root suites managed by this executor"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Suite",
											"id": 3566
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 182,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Executor.suites",
								"id": 4577
							}
						},
						{
							"id": 4742,
							"name": "_afterRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4743,
									"name": "_afterRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Code to execute after the main test run has finished to shut down the test\nsystem."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 770,
									"character": 21
								}
							]
						},
						{
							"id": 4744,
							"name": "_assignPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4745,
									"name": "_assignPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a resolved plugin to the internal plugins list"
									},
									"parameters": [
										{
											"id": 4746,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4747,
											"name": "plugin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 777,
									"character": 25
								}
							]
						},
						{
							"id": 4748,
							"name": "_beforeRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4749,
									"name": "_beforeRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Code to execute before the main test run has started to set up the test\nsystem. This is where Executors can do any last-minute configuration\nbefore the testing process begins.",
										"text": "This method returns a CancellablePromise that resolves to a boolean. A\nvalue of true indicates that Intern should skip running tests and exit\nnormally.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 793,
									"character": 22
								}
							]
						},
						{
							"id": 4752,
							"name": "_drainEventQueue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4753,
									"name": "_drainEventQueue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit any queued events. The event queue will be empty after this method\nruns."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 842,
									"character": 28
								}
							]
						},
						{
							"id": 4754,
							"name": "_emitCoverage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4755,
									"name": "_emitCoverage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4756,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 853,
									"character": 25
								}
							]
						},
						{
							"id": 4750,
							"name": "_initReporters",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4751,
									"name": "_initReporters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiate any configured built-in reporters"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 806,
									"character": 26
								}
							]
						},
						{
							"id": 4757,
							"name": "_loadLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4758,
									"name": "_loadLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a loader"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 867,
									"character": 23
								}
							]
						},
						{
							"id": 4761,
							"name": "_loadPlugins",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4762,
									"name": "_loadPlugins",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts in the `plugins` list using the platform's native loading\nmechanism"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 923,
									"character": 24
								}
							]
						},
						{
							"id": 4759,
							"name": "_loadPluginsWithLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4760,
									"name": "_loadPluginsWithLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts in the `requires` list using an external loader, if\nconfigured, or the platform's native loading mechanism"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 911,
									"character": 34
								}
							]
						},
						{
							"id": 4763,
							"name": "_loadScripts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4764,
									"name": "_loadScripts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a list of scripts using a given loader. These will be loaded\nsequentially in order."
									},
									"parameters": [
										{
											"id": 4765,
											"name": "scripts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "PluginDescriptor",
													"id": 5064
												}
											}
										},
										{
											"id": 4766,
											"name": "loader",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4767,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4768,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4769,
																	"name": "script",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Promise",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "void"
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/executors/Executor.ts",
															"line": 937,
															"character": 11
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 935,
									"character": 24
								}
							]
						},
						{
							"id": 4770,
							"name": "_loadSuites",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4771,
									"name": "_loadSuites",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load suites"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 970,
									"character": 23
								}
							]
						},
						{
							"id": 4772,
							"name": "_processOption",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4773,
									"name": "_processOption",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process an option"
									},
									"parameters": [
										{
											"id": 4774,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "typeParameter",
													"name": "C",
													"constraint": {
														"type": "reference",
														"name": "Config",
														"id": 4999
													}
												}
											}
										},
										{
											"id": 4775,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 982,
									"character": 26
								}
							]
						},
						{
							"id": 4776,
							"name": "_resolveConfig",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4777,
									"name": "_resolveConfig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resolve the config object."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 989,
									"character": 26
								}
							]
						},
						{
							"id": 4778,
							"name": "_runTests",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4779,
									"name": "_runTests",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs each of the root suites, limited to a certain number of suites at\nthe same time by `maxConcurrency`."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1021,
									"character": 21
								}
							]
						},
						{
							"id": 4662,
							"name": "addSuite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4663,
									"name": "addSuite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a suite to the set of suites that will be run when `run` is called.",
										"text": "The suite is added by calling a factory function. The use of a factory\nallows for distinct instances of a given suite to be create when an\nexecutor has multiple root suites.\n\n```js\nintern.addSuite(parent => {\n    const suite = new Suite({\n        name: 'create new',\n        tests: [\n            new Test({\n                name: 'new test',\n                test: () => assert.doesNotThrow(() => new Component())\n            })\n        ]\n    });\n    parent.add(suite);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 4664,
											"name": "factory",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that will add a new Suite object to a given\nparent suite.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4665,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4666,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4667,
																	"name": "parentSuite",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Suite",
																		"id": 3566
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/executors/Executor.ts",
															"line": 232,
															"character": 19
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 232,
									"character": 10
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Executor.addSuite",
								"id": 4578
							}
						},
						{
							"id": 4668,
							"name": "configure",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4669,
									"name": "configure",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Configure the executor with an object containing\n[[lib/executors/Executor.Config]] properties."
									},
									"parameters": [
										{
											"id": 4670,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4671,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/lib/executors/Executor.ts",
															"line": 240,
															"character": 20
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 240,
									"character": 11
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Executor.configure",
								"id": 4584
							}
						},
						{
							"id": 4672,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4673,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit an event to all registered listeners.",
										"text": "Event listeners may execute async code, and a failing handler (one that\nrejects or throws an error) will cause the emit to fail.\n",
										"returns": "a CancellablePromise that resolves when all listeners have processed the event\n"
									},
									"typeParameter": [
										{
											"id": 4674,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NoDataEvents",
												"id": 4838
											}
										}
									],
									"parameters": [
										{
											"id": 4675,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the event to emit"
											},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "NoDataEvents",
													"id": 4838
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.emit",
										"id": 4591
									}
								},
								{
									"id": 4676,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4677,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "typeParameter",
													"name": "E",
													"constraint": {
														"type": "reference",
														"name": "Events",
														"id": 4799
													}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 4678,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "typeParameter",
														"name": "E",
														"constraint": {
															"type": "reference",
															"name": "Events",
															"id": 4799
														}
													}
												}
											}
										},
										{
											"id": 4679,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "unknown",
												"name": "E[T]"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 257,
									"character": 6
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 258,
									"character": 6
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 259,
									"character": 6
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Executor.emit",
								"id": 4590
							}
						},
						{
							"id": 4655,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4656,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format an error, normalizing the stack trace and resolving source map\nreferences"
									},
									"parameters": [
										{
											"id": 4657,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 4658,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.formatError",
										"id": 4599
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 190,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Executor.formatError",
								"id": 4598
							}
						},
						{
							"id": 4680,
							"name": "getInterface",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4681,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a registered interface plugin.",
										"text": "This method calls `getPlugin` behind the scenes.\n",
										"returns": "the interface, which may be an object or a callable function, or\nundefined if no such interface was registered.\n"
									},
									"parameters": [
										{
											"id": 4682,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the interface"
											},
											"type": {
												"type": "stringLiteral",
												"value": "object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ObjectInterface",
										"id": 3830
									}
								},
								{
									"id": 4683,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4684,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "tdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TddInterface",
										"id": 3877
									}
								},
								{
									"id": 4685,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4686,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "bdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BddInterface",
										"id": 3954
									}
								},
								{
									"id": 4687,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4688,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "benchmark"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkInterface",
										"id": 4528
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 358,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 359,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 360,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 361,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 362,
									"character": 14
								}
							]
						},
						{
							"id": 4689,
							"name": "getPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4690,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get any resources registered by a particular plugin.",
										"returns": "the resource registered for the given plugin name, or undefined\nif no such plugin was registered.\n"
									},
									"typeParameter": [
										{
											"id": 4691,
											"name": "Y",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "typeParameter",
													"name": "P",
													"constraint": {
														"type": "reference",
														"name": "Plugins",
														"id": 4816
													}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 4692,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the type of plugin (e.g., 'interface' or 'reporter')"
											},
											"type": {
												"type": "typeParameter",
												"name": "Y",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reference",
															"name": "Plugins",
															"id": 4816
														}
													}
												}
											}
										},
										{
											"id": 4693,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the plugin"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "P[Y]"
									}
								},
								{
									"id": 4694,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4695,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "chai"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ChaiStatic"
									}
								},
								{
									"id": 4696,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4697,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ObjectInterface",
										"id": 3830
									}
								},
								{
									"id": 4698,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4699,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.tdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TddInterface",
										"id": 3877
									}
								},
								{
									"id": 4700,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4701,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.bdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BddInterface",
										"id": 3954
									}
								},
								{
									"id": 4702,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4703,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.benchmark"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkInterface",
										"id": 4528
									}
								},
								{
									"id": 4704,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4705,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 4706,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 374,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 375,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 376,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 377,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 378,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 379,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 380,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 381,
									"character": 11
								}
							]
						},
						{
							"id": 4659,
							"name": "loadScript",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isAbstract": true
							},
							"signatures": [
								{
									"id": 4660,
									"name": "loadScript",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a script or scripts. This is a convenience method for loading and\nevaluating simple scripts, not necessarily modules. If multiple script\npaths are provided, scripts will be loaded sequentially in the order\ngiven."
									},
									"parameters": [
										{
											"id": 4661,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a path to a script\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 205,
									"character": 21
								}
							]
						},
						{
							"id": 4707,
							"name": "log",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4708,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a convenience method for emitting log events.",
										"text": "When debug mode is enabled, this method emits 'log' events using `emit`.\nOtherwise it does nothing.\n",
										"returns": "a CancellablePromise that resolves when all listeners have finished processing\nthe event.\n"
									},
									"parameters": [
										{
											"id": 4709,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "A list of arguments that will be stringified and combined\ninto a space-separated message."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.log",
										"id": 4603
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 402,
									"character": 5
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Executor.log",
								"id": 4602
							}
						},
						{
							"id": 4710,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4711,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a listener for a test event.",
										"text": "```js\nintern.on('error', error => {\n    console.log('An error occurred:', error);\n});\n```\n\nA listener can be notified of all events by registering for the '*'\nevent, or by calling on with only a callback:\n\n```js\nintern.on(event => {\n    console.log(`An ${event.name} event occurred:`, event.data);\n});\n```\nNote that some events are executor-specific. For example, the\n[[lib/executors/Browser]] executor will never emit a tunnelStop\nmessage.\n",
										"returns": "a handle with a `destroy` method that can be used to stop\nlistening\n"
									},
									"typeParameter": [
										{
											"id": 4712,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "typeParameter",
													"name": "E",
													"constraint": {
														"type": "reference",
														"name": "Events",
														"id": 4799
													}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 4713,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the [[lib/executors/Executor.Events|event]] to listen\nfor"
											},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "typeParameter",
														"name": "E",
														"constraint": {
															"type": "reference",
															"name": "Events",
															"id": 4799
														}
													}
												}
											}
										},
										{
											"id": 4714,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a callback that accepts a single data parameter; it may\nreturn a PromiseLike object if it needs to perform async actions"
											},
											"type": {
												"type": "reference",
												"name": "Listener",
												"id": 4784,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "E[T]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									}
								},
								{
									"id": 4715,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4716,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Listener",
												"id": 4784,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 4717,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 4719,
																	"name": "data",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/core/lib/executors/Executor.ts",
																			"line": 462,
																			"character": 44
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 4718,
																	"name": "name",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/core/lib/executors/Executor.ts",
																			"line": 462,
																			"character": 30
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		4719,
																		4718
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/core/lib/executors/Executor.ts",
																	"line": 462,
																	"character": 24
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.on",
										"id": 4610
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 461,
									"character": 4
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 462,
									"character": 4
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 463,
									"character": 4
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "Executor.on",
								"id": 4605
							}
						},
						{
							"id": 4720,
							"name": "registerInterface",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4721,
									"name": "registerInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register an interface plugin",
										"text": "This is a convenience method for registering test interfaces. This method\ncalls [[lib/executors/Executor.Executor.registerPlugin]] behind the\nscenes using the name `interface.${name}`.\n"
									},
									"parameters": [
										{
											"id": 4722,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4723,
											"name": "iface",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 499,
									"character": 19
								}
							]
						},
						{
							"id": 4724,
							"name": "registerLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4725,
									"name": "registerLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a module loader.",
										"text": "This method sets the loader script that will be used to load plugins and\nsuites. The callback should accept an options object and return a\nfunction that can load modules.\n\n```js\nintern.registerLoader(options: any => {\n    // Register loader can return a Promise if it needs to load something\n    // itself\n    return intern.loadScript('some/loader.js').then(() => {\n        loader.config(options);\n        // Return a function that takes a list of modules and returns a\n        // Promise that resolves when they've been loaded.\n        return (modules: string[]) => {\n            return loader.load(modules);\n        });\n    });\n});\n```\n"
									},
									"parameters": [
										{
											"id": 4726,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a loader initialzation callback that should return a loader\nfunction, or a Promise that resolves to a loader function\n"
											},
											"type": {
												"type": "reference",
												"name": "LoaderInit",
												"id": 4821
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 528,
									"character": 16
								}
							]
						},
						{
							"id": 4727,
							"name": "registerPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4728,
									"name": "registerPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a plugin.",
										"text": "Plugins are resources that are loaded at the beginning of the testing\nprocess, after the loader but before any suites are registered. The\ncallback may return a Promise if the plugin needs to do some asynchronous\ninitialization. If the plugin is being loaded via the\n[[lib/executors/Executor.Config.plugins|config.plugins]]\nproperty, it's init callback will be passed any configured options. The\nresolved return value of the callback will be returned by\n[[lib/executors/Executor.Executor.getPlugin]].\n\n```js\nintern.registerPlugin('foo', (options: any) => {\n    return {\n        doSomething() {\n            // ...\n        },\n        doSomethingElse() {\n            // ...\n        }\n    };\n});\n```\n\nCode would use the plugin by calling getPlugin:\n\n```js\nconst { doSomething, doSomethingElse } = intern.getPlugin('foo');\ndoSomething();\n```\n"
									},
									"typeParameter": [
										{
											"id": 4729,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "typeParameter",
													"name": "P",
													"constraint": {
														"type": "reference",
														"name": "Plugins",
														"id": 4816
													}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 4730,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reference",
															"name": "Plugins",
															"id": 4816
														}
													}
												}
											}
										},
										{
											"id": 4731,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the plugin name"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4732,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an initializer function that returns the plugin resource, or\na Promise that resolves to the resource\n"
											},
											"type": {
												"type": "reference",
												"name": "PluginInitializer",
												"id": 4827,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "P[T]"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								},
								{
									"id": 4733,
									"name": "registerPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4734,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4735,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PluginInitializer",
												"id": 4827
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 569,
									"character": 16
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 574,
									"character": 16
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 575,
									"character": 16
								}
							]
						},
						{
							"id": 4736,
							"name": "registerReporter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4737,
									"name": "registerReporter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a reporter plugin",
										"text": "This is a convenience method for registering reporter constructors. This\nmethod calls [[lib/executors/Executor.Executor.registerPlugin]] behind\nthe scenes using the name `reporter.${name}`.\n"
									},
									"parameters": [
										{
											"id": 4738,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the reporter name"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4739,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterInitializer",
												"id": 4834
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 613,
									"character": 18
								}
							]
						},
						{
							"id": 4740,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4741,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Run tests.",
										"text": "This method sets up the environment for test execution, runs the tests,\nand runs any finalization code afterwards.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 623,
									"character": 5
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								4645
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4619,
								4622,
								4621,
								4625,
								4623,
								4624,
								4634,
								4626,
								4628,
								4627,
								4633,
								4629,
								4638,
								4642,
								4644,
								4620,
								4643
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								4651,
								4649,
								4653
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4742,
								4744,
								4748,
								4752,
								4754,
								4750,
								4757,
								4761,
								4759,
								4763,
								4770,
								4772,
								4776,
								4778,
								4662,
								4668,
								4672,
								4655,
								4680,
								4689,
								4659,
								4707,
								4710,
								4720,
								4724,
								4727,
								4736,
								4740
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 77,
							"character": 42
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Browser",
							"id": 5903
						},
						{
							"type": "reference",
							"name": "Node",
							"id": 7070
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Executor",
							"id": 4575
						}
					]
				},
				{
					"id": 4788,
					"name": "CoverageMessage",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The data accompanying a coverage event"
					},
					"children": [
						{
							"id": 4791,
							"name": "coverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1048,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 4789,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1046,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 4790,
							"name": "source",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1047,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4791,
								4789,
								4790
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1045,
							"character": 32
						}
					]
				},
				{
					"id": 4792,
					"name": "DeprecationMessage",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4795,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1054,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 4793,
							"name": "original",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1052,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4794,
							"name": "replacement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1053,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4795,
								4793,
								4794
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1051,
							"character": 35
						}
					]
				},
				{
					"id": 4799,
					"name": "Events",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Events that may be emitted by an Executor. Each event has at most one\nassociated message type. A few (e.g., afterRun) don't have messages."
					},
					"children": [
						{
							"id": 4800,
							"name": "*",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A listener can listen for this event to be notified of all events"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1068,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ExecutorEvent",
								"id": 4796
							}
						},
						{
							"id": 4801,
							"name": "afterRun",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted after the local executor has finished running suites. This is\nfunctionally the same as runEnd."
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1074,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 4802,
							"name": "beforeRun",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted before the local executor loads suites"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1077,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 4803,
							"name": "coverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Coverage info has been gathered"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1080,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "CoverageMessage",
								"id": 4788
							}
						},
						{
							"id": 4804,
							"name": "deprecated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A deprecated method was called"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1083,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "DeprecationMessage",
								"id": 4792
							}
						},
						{
							"id": 4805,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An unhandled error occurs"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1086,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Error"
							}
						},
						{
							"id": 4806,
							"name": "log",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A debug log event"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1089,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4807,
							"name": "runEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "All tests have finished running. This is functionally the same as\nafterRun."
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1095,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 4808,
							"name": "runStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted just before tests start running"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1098,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 4809,
							"name": "suiteAdd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A new suite has been added"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1101,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							}
						},
						{
							"id": 4810,
							"name": "suiteEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A suite has fininshed running"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1104,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							}
						},
						{
							"id": 4811,
							"name": "suiteStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A suite has started running"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1107,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							}
						},
						{
							"id": 4812,
							"name": "testAdd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A new test has been added"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Test",
								"id": 3484
							}
						},
						{
							"id": 4813,
							"name": "testEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A test has finished"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1113,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Test",
								"id": 3484
							}
						},
						{
							"id": 4814,
							"name": "testStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A test has started"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1116,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Test",
								"id": 3484
							}
						},
						{
							"id": 4815,
							"name": "warning",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A non-fatal error occurred"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1119,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4800,
								4801,
								4802,
								4803,
								4804,
								4805,
								4806,
								4807,
								4808,
								4809,
								4810,
								4811,
								4812,
								4813,
								4814,
								4815
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1066,
							"character": 23
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "NodeEvents",
							"id": 7730
						}
					]
				},
				{
					"id": 4575,
					"name": "Executor",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This interface represents the core functionality of an Executor"
					},
					"children": [
						{
							"id": 4576,
							"name": "config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 47,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Config",
								"id": 4999
							}
						},
						{
							"id": 4577,
							"name": "suites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 48,
									"character": 17
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Suite",
									"id": 3566
								}
							}
						},
						{
							"id": 4578,
							"name": "addSuite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4579,
									"name": "addSuite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4580,
											"name": "factory",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4581,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 4582,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4583,
																	"name": "parentSuite",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Suite",
																		"id": 3566
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/executors/Executor.ts",
															"line": 50,
															"character": 19
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 50,
									"character": 10
								}
							]
						},
						{
							"id": 4584,
							"name": "configure",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4585,
									"name": "configure",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4586,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4587,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 4588,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4589,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/executors/Executor.ts",
															"line": 52,
															"character": 20
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 52,
									"character": 11
								}
							]
						},
						{
							"id": 4590,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4591,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4592,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NoDataEvents",
												"id": 4838
											}
										}
									],
									"parameters": [
										{
											"id": 4593,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "NoDataEvents",
													"id": 4838
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								},
								{
									"id": 4594,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4595,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "Events"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 4596,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "Events"
													}
												}
											}
										},
										{
											"id": 4597,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "unknown",
												"name": "Events[T]"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 54,
									"character": 6
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 55,
									"character": 6
								}
							]
						},
						{
							"id": 4598,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4599,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4600,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 4601,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 60,
									"character": 13
								}
							]
						},
						{
							"id": 4602,
							"name": "log",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4603,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4604,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 62,
									"character": 5
								}
							]
						},
						{
							"id": 4605,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4606,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 4607,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "Events"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 4608,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "Events"
													}
												}
											}
										},
										{
											"id": 4609,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Listener",
												"id": 4784,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "Events[T]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									}
								},
								{
									"id": 4610,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4611,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Listener",
												"id": 4784,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 4612,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 4614,
																	"name": "data",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/core/lib/executors/Executor.ts",
																			"line": 68,
																			"character": 44
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 4613,
																	"name": "name",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/core/lib/executors/Executor.ts",
																			"line": 68,
																			"character": 30
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		4614,
																		4613
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/core/lib/executors/Executor.ts",
																	"line": 68,
																	"character": 24
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 64,
									"character": 4
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 68,
									"character": 4
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4576,
								4577
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4578,
								4584,
								4590,
								4598,
								4602,
								4605
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 46,
							"character": 25
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "BaseExecutor",
							"id": 4615
						},
						{
							"type": "reference",
							"name": "Browser",
							"id": 5903
						},
						{
							"type": "reference",
							"name": "Node",
							"id": 7070
						}
					]
				},
				{
					"id": 4796,
					"name": "ExecutorEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4798,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1059,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 4797,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1058,
									"character": 6
								}
							],
							"type": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"name": "Events"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4798,
								4797
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1057,
							"character": 30
						}
					]
				},
				{
					"id": 4780,
					"name": "InternEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 4781,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Events",
								"id": 4799
							}
						}
					],
					"children": [
						{
							"id": 4783,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1030,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 4782,
							"name": "eventName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1029,
									"character": 11
								}
							],
							"type": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "typeParameter",
									"name": "E",
									"constraint": {
										"type": "reference",
										"name": "Events",
										"id": 4799
									}
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4783,
								4782
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1028,
							"character": 28
						}
					]
				},
				{
					"id": 4784,
					"name": "Listener",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A generic event listener"
					},
					"typeParameter": [
						{
							"id": 4785,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"signatures": [
						{
							"id": 4786,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A generic event listener"
							},
							"parameters": [
								{
									"id": 4787,
									"name": "arg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "void"
									},
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1038,
							"character": 25
						}
					]
				},
				{
					"id": 4818,
					"name": "Loader",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An async loader callback."
					},
					"signatures": [
						{
							"id": 4819,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An async loader callback."
							},
							"parameters": [
								{
									"id": 4820,
									"name": "modules",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1135,
							"character": 23
						}
					]
				},
				{
					"id": 4821,
					"name": "LoaderInit",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A loader initialization function."
					},
					"signatures": [
						{
							"id": 4822,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A loader initialization function."
							},
							"parameters": [
								{
									"id": 4823,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 4824,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 4825,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 4826,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/executors/Executor.ts",
													"line": 1143,
													"character": 11
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Loader",
												"id": 4818
											}
										]
									},
									{
										"type": "reference",
										"name": "Loader",
										"id": 4818
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1142,
							"character": 27
						}
					]
				},
				{
					"id": 4827,
					"name": "PluginInitializer",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 4828,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"signatures": [
						{
							"id": 4829,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4830,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 4831,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 4832,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 4833,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										]
									},
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1146,
							"character": 34
						}
					]
				},
				{
					"id": 4816,
					"name": "Plugins",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Known plugin types"
					},
					"children": [
						{
							"id": 4817,
							"name": "reporter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1129,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterInitializer",
								"id": 4834
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4817
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1128,
							"character": 24
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "NodePlugins",
							"id": 7280
						}
					]
				},
				{
					"id": 4837,
					"name": "Reporter",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A 'reporter' as far as Executor is concerned. There is currently no\npre-defined functionality required for reporters."
					},
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1158,
							"character": 25
						}
					]
				},
				{
					"id": 4834,
					"name": "ReporterInitializer",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4835,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4836,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Reporter",
								"id": 4837
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1150,
							"character": 36
						}
					]
				},
				{
					"id": 4838,
					"name": "NoDataEvents",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A list of event names that don't have associated data"
					},
					"sources": [
						{
							"fileName": "src/core/lib/executors/Executor.ts",
							"line": 1123,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "runStart"
							},
							{
								"type": "stringLiteral",
								"value": "runEnd"
							},
							{
								"type": "stringLiteral",
								"value": "beforeRun"
							},
							{
								"type": "stringLiteral",
								"value": "afterRun"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						4615
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						4788,
						4792,
						4799,
						4575,
						4796,
						4780,
						4784,
						4818,
						4821,
						4827,
						4816,
						4837,
						4834
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						4838
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/executors/Executor.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7069,
			"name": "\"core/lib/executors/Node\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/executors/Node.ts",
			"children": [
				{
					"id": 7753,
					"name": "FunctionQueue",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "A basic FIFO function queue to limit the number of currently executing\nasynchronous functions."
					},
					"children": [
						{
							"id": 7758,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 7759,
									"name": "new FunctionQueue",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 7760,
											"name": "maxConcurrency",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FunctionQueue",
										"id": 7753
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1029,
									"character": 39
								}
							]
						},
						{
							"id": 7756,
							"name": "activeTasks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1028,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "CancellablePromise",
									"id": 2,
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							}
						},
						{
							"id": 7757,
							"name": "funcTasks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1029,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "CancellablePromise",
									"id": 2,
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							}
						},
						{
							"id": 7754,
							"name": "maxConcurrency",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1026,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 7755,
							"name": "queue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1027,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "QueueEntry",
									"id": 7770
								}
							}
						},
						{
							"id": 7766,
							"name": "clear",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 7767,
									"name": "clear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1051,
									"character": 7
								}
							]
						},
						{
							"id": 7761,
							"name": "enqueue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 7762,
									"name": "enqueue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7763,
											"name": "func",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 7764,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 7765,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "CancellablePromise",
																"id": 2,
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/executors/Node.ts",
															"line": 1038,
															"character": 15
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 32,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1038,
									"character": 9
								}
							]
						},
						{
							"id": 7768,
							"name": "next",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 7769,
									"name": "next",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1059,
									"character": 6
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								7758
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7756,
								7757,
								7754,
								7755
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								7766,
								7761,
								7768
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 1025,
							"character": 19
						}
					]
				},
				{
					"id": 7070,
					"name": "Node",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 7084,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7085,
									"name": "new Node",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 7086,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 7087,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Node",
										"id": 7070
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor.__constructor",
										"id": 4645
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 71,
									"character": 48
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor.__constructor",
								"id": 4645
							}
						},
						{
							"id": 7146,
							"name": "_config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 82,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Config",
								"id": 4999
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._config",
								"id": 4619
							}
						},
						{
							"id": 7074,
							"name": "_coverageFiles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 64,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 7073,
							"name": "_coverageMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 63,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "CoverageMap"
							}
						},
						{
							"id": 7149,
							"name": "_errorFormatter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 85,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ErrorFormatter",
										"id": 3669
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._errorFormatter",
								"id": 4622
							}
						},
						{
							"id": 7148,
							"name": "_events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 84,
									"character": 19
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "InternEvent",
									"id": 4780,
									"typeArguments": [
										{
											"type": "reference",
											"name": "NodeEvents",
											"id": 7730
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._events",
								"id": 4621
							}
						},
						{
							"id": 7152,
							"name": "_hasEmittedErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 88,
									"character": 29
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._hasEmittedErrors",
								"id": 4625
							}
						},
						{
							"id": 7150,
							"name": "_hasSuiteErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 86,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._hasSuiteErrors",
								"id": 4623
							}
						},
						{
							"id": 7151,
							"name": "_hasTestErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 87,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._hasTestErrors",
								"id": 4624
							}
						},
						{
							"id": 7076,
							"name": "_instrumentBasePath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 66,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 7079,
							"name": "_instrumentedMaps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 69,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"name": "MapStore"
							}
						},
						{
							"id": 7077,
							"name": "_instrumenter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 67,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Instrumenter"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 7161,
							"name": "_listeners",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 94,
									"character": 22
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7162,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 7163,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 7164,
													"name": "event",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Listener",
													"id": 4784,
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/executors/Executor.ts",
											"line": 94,
											"character": 23
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._listeners",
								"id": 4634
							}
						},
						{
							"id": 7153,
							"name": "_loader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 89,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Loader",
								"id": 4818
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loader",
								"id": 4626
							}
						},
						{
							"id": 7155,
							"name": "_loaderInit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 91,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Loader",
												"id": 4818
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loaderInit",
								"id": 4628
							}
						},
						{
							"id": 7154,
							"name": "_loaderOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 90,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loaderOptions",
								"id": 4627
							}
						},
						{
							"id": 7075,
							"name": "_loadingFunctionalSuites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 65,
									"character": 36
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 7160,
							"name": "_loadingPluginOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 93,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadingPluginOptions",
								"id": 4633
							}
						},
						{
							"id": 7156,
							"name": "_loadingPlugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 92,
									"character": 27
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 7157,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 7159,
												"name": "init",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/core/lib/executors/Executor.ts",
														"line": 92,
														"character": 49
													}
												],
												"type": {
													"type": "reference",
													"name": "CancellablePromise",
													"id": 2,
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "void"
														}
													]
												}
											},
											{
												"id": 7158,
												"name": "name",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/core/lib/executors/Executor.ts",
														"line": 92,
														"character": 35
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													7159,
													7158
												]
											}
										],
										"sources": [
											{
												"fileName": "src/core/lib/executors/Executor.ts",
												"line": 92,
												"character": 28
											}
										]
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadingPlugins",
								"id": 4629
							}
						},
						{
							"id": 7165,
							"name": "_plugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 95,
									"character": 20
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7166,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 7167,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 7168,
													"name": "name",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/executors/Executor.ts",
											"line": 95,
											"character": 21
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._plugins",
								"id": 4638
							}
						},
						{
							"id": 7169,
							"name": "_reporters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 96,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Reporter",
									"id": 4837
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._reporters",
								"id": 4642
							}
						},
						{
							"id": 7171,
							"name": "_reportersInitialized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 98,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._reportersInitialized",
								"id": 4644
							}
						},
						{
							"id": 7147,
							"name": "_rootSuite",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 83,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._rootSuite",
								"id": 4620
							}
						},
						{
							"id": 7170,
							"name": "_runTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 97,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._runTask",
								"id": 4643
							}
						},
						{
							"id": 7083,
							"name": "_sessionSuites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 71,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Suite",
											"id": 3566
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 7078,
							"name": "_sourceMaps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 68,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "MapStore"
							}
						},
						{
							"id": 7080,
							"name": "_unhookRequire",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 70,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 7081,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 7082,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/executors/Node.ts",
													"line": 70,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 7071,
							"name": "server",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 60,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Server",
										"id": 6285
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 7072,
							"name": "tunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 61,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Tunnel",
										"id": 2303
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 7172,
							"name": "config",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The resolved configuration for this executor."
							},
							"getSignature": [
								{
									"id": 7173,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The resolved configuration for this executor."
									},
									"type": {
										"type": "unknown",
										"name": "C"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.config",
										"id": 4651
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 175,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.config",
								"id": 4651
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.config",
								"id": 4576
							}
						},
						{
							"id": 7088,
							"name": "coverageMap",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 7089,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CoverageMap"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 164,
									"character": 17
								}
							]
						},
						{
							"id": 7090,
							"name": "environment",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 7091,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RuntimeEnvironment",
										"id": 3482
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor.environment",
										"id": 4649
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 168,
									"character": 17
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor.environment",
								"id": 4649
							}
						},
						{
							"id": 7096,
							"name": "hasCoveredFiles",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 7097,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 180,
									"character": 21
								}
							]
						},
						{
							"id": 7092,
							"name": "instrumentedMapStore",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 7093,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MapStore"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 172,
									"character": 26
								}
							]
						},
						{
							"id": 7094,
							"name": "sourceMapStore",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 7095,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MapStore"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 176,
									"character": 20
								}
							]
						},
						{
							"id": 7098,
							"name": "suites",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The root suites managed by this executor"
							},
							"getSignature": [
								{
									"id": 7099,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The root suites managed by this executor"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Suite",
											"id": 3566
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor.suites",
										"id": 4653
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 187,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor.suites",
								"id": 4653
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.suites",
								"id": 4577
							}
						},
						{
							"id": 7124,
							"name": "_afterRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7125,
									"name": "_afterRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor._afterRun",
										"id": 4742
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 305,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor._afterRun",
								"id": 4742
							}
						},
						{
							"id": 7252,
							"name": "_assignPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7253,
									"name": "_assignPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a resolved plugin to the internal plugins list"
									},
									"parameters": [
										{
											"id": 7254,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7255,
											"name": "plugin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._assignPlugin",
										"id": 4744
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 777,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._assignPlugin",
								"id": 4744
							}
						},
						{
							"id": 7126,
							"name": "_beforeRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7127,
									"name": "_beforeRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor._beforeRun",
										"id": 4748
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 332,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor._beforeRun",
								"id": 4748
							}
						},
						{
							"id": 7128,
							"name": "_createSessionSuites",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7129,
									"name": "_createSessionSuites",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates suites for each environment in which tests will be executed. This\nmethod will only be called if there are both environments and suites to\nrun."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 442,
									"character": 32
								}
							]
						},
						{
							"id": 7258,
							"name": "_drainEventQueue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7259,
									"name": "_drainEventQueue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit any queued events. The event queue will be empty after this method\nruns."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._drainEventQueue",
										"id": 4752
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 842,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._drainEventQueue",
								"id": 4752
							}
						},
						{
							"id": 7260,
							"name": "_emitCoverage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7261,
									"name": "_emitCoverage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7262,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._emitCoverage",
										"id": 4754
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 853,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._emitCoverage",
								"id": 4754
							}
						},
						{
							"id": 7136,
							"name": "_getSeleniumDriverNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7137,
									"name": "_getSeleniumDriverNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return the names of all the selenium drivers that should be needed based\non the environments specified in the config."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 837,
									"character": 35
								}
							]
						},
						{
							"id": 7256,
							"name": "_initReporters",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7257,
									"name": "_initReporters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiate any configured built-in reporters"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._initReporters",
										"id": 4750
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 806,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._initReporters",
								"id": 4750
							}
						},
						{
							"id": 7130,
							"name": "_loadFunctionalSuites",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7131,
									"name": "_loadFunctionalSuites",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load functional test suites"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 580,
									"character": 33
								}
							]
						},
						{
							"id": 7263,
							"name": "_loadLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7264,
									"name": "_loadLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a loader"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._loadLoader",
										"id": 4757
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 867,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadLoader",
								"id": 4757
							}
						},
						{
							"id": 7267,
							"name": "_loadPlugins",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7268,
									"name": "_loadPlugins",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts in the `plugins` list using the platform's native loading\nmechanism"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._loadPlugins",
										"id": 4761
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 923,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadPlugins",
								"id": 4761
							}
						},
						{
							"id": 7265,
							"name": "_loadPluginsWithLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7266,
									"name": "_loadPluginsWithLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts in the `requires` list using an external loader, if\nconfigured, or the platform's native loading mechanism"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._loadPluginsWithLoader",
										"id": 4759
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 911,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadPluginsWithLoader",
								"id": 4759
							}
						},
						{
							"id": 7269,
							"name": "_loadScripts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7270,
									"name": "_loadScripts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a list of scripts using a given loader. These will be loaded\nsequentially in order."
									},
									"parameters": [
										{
											"id": 7271,
											"name": "scripts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "PluginDescriptor",
													"id": 5064
												}
											}
										},
										{
											"id": 7272,
											"name": "loader",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 7273,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 7274,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 7275,
																	"name": "script",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Promise",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "void"
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/executors/Executor.ts",
															"line": 937,
															"character": 11
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._loadScripts",
										"id": 4763
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 935,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._loadScripts",
								"id": 4763
							}
						},
						{
							"id": 7132,
							"name": "_loadSuites",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7133,
									"name": "_loadSuites",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Override Executor#_loadSuites to set instrumentetion hooks before loading\nsuites"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor._loadSuites",
										"id": 4770
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 606,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor._loadSuites",
								"id": 4770
							}
						},
						{
							"id": 7276,
							"name": "_processOption",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7277,
									"name": "_processOption",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process an option"
									},
									"parameters": [
										{
											"id": 7278,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "Config"
												}
											}
										},
										{
											"id": 7279,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor._processOption",
										"id": 4772
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 982,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor._processOption",
								"id": 4772
							}
						},
						{
							"id": 7144,
							"name": "_removeInstrumentationHooks",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7145,
									"name": "_removeInstrumentationHooks",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes instrumentation hooks"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 974,
									"character": 39
								}
							]
						},
						{
							"id": 7134,
							"name": "_resolveConfig",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7135,
									"name": "_resolveConfig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor._resolveConfig",
										"id": 4776
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 623,
									"character": 26
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor._resolveConfig",
								"id": 4776
							}
						},
						{
							"id": 7140,
							"name": "_runRemoteTests",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7141,
									"name": "_runRemoteTests",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 915,
									"character": 27
								}
							]
						},
						{
							"id": 7138,
							"name": "_runTests",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7139,
									"name": "_runTests",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor._runTests",
										"id": 4778
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 867,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor._runTests",
								"id": 4778
							}
						},
						{
							"id": 7142,
							"name": "_setInstrumentationHooks",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7143,
									"name": "_setInstrumentationHooks",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds hooks for code coverage instrumentation in the Node.js loader."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 959,
									"character": 36
								}
							]
						},
						{
							"id": 7100,
							"name": "addSuite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7101,
									"name": "addSuite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Override Executor#addSuite to handle functional suites"
									},
									"parameters": [
										{
											"id": 7102,
											"name": "factory",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 7103,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 7104,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 7105,
																	"name": "parentSuite",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Suite",
																		"id": 3566
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/executors/Node.ts",
															"line": 205,
															"character": 19
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor.addSuite",
										"id": 4662
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 205,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor.addSuite",
								"id": 4662
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.addSuite",
								"id": 4578
							}
						},
						{
							"id": 7178,
							"name": "configure",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7179,
									"name": "configure",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Configure the executor with an object containing\n[[lib/executors/Executor.Config]] properties."
									},
									"parameters": [
										{
											"id": 7180,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 7181,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/lib/executors/Executor.ts",
															"line": 240,
															"character": 20
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.configure",
										"id": 4668
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 240,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.configure",
								"id": 4668
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.configure",
								"id": 4584
							}
						},
						{
							"id": 7182,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7183,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit an event to all registered listeners.",
										"text": "Event listeners may execute async code, and a failing handler (one that\nrejects or throws an error) will cause the emit to fail.\n",
										"returns": "a CancellablePromise that resolves when all listeners have processed the event\n"
									},
									"typeParameter": [
										{
											"id": 7184,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NoDataEvents",
												"id": 4838
											}
										}
									],
									"parameters": [
										{
											"id": 7185,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the event to emit"
											},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"name": "NoDataEvents",
													"id": 4838
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.emit",
										"id": 4672
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.emit",
										"id": 4591
									}
								},
								{
									"id": 7186,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 7187,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "NodeEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 7188,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "NodeEvents"
													}
												}
											}
										},
										{
											"id": 7189,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "unknown",
												"name": "E[T]"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.emit",
										"id": 4672
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 257,
									"character": 6
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 258,
									"character": 6
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 259,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.emit",
								"id": 4672
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.emit",
								"id": 4590
							}
						},
						{
							"id": 7174,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7175,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format an error, normalizing the stack trace and resolving source map\nreferences"
									},
									"parameters": [
										{
											"id": 7176,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 7177,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.formatError",
										"id": 4655
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.formatError",
										"id": 4599
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 190,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.formatError",
								"id": 4655
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.formatError",
								"id": 4598
							}
						},
						{
							"id": 7190,
							"name": "getInterface",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7191,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a registered interface plugin.",
										"text": "This method calls `getPlugin` behind the scenes.\n",
										"returns": "the interface, which may be an object or a callable function, or\nundefined if no such interface was registered.\n"
									},
									"parameters": [
										{
											"id": 7192,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the interface"
											},
											"type": {
												"type": "stringLiteral",
												"value": "object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ObjectInterface",
										"id": 3830
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getInterface",
										"id": 4680
									}
								},
								{
									"id": 7193,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7194,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "tdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TddInterface",
										"id": 3877
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getInterface",
										"id": 4680
									}
								},
								{
									"id": 7195,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7196,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "bdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BddInterface",
										"id": 3954
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getInterface",
										"id": 4680
									}
								},
								{
									"id": 7197,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7198,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "benchmark"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkInterface",
										"id": 4528
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getInterface",
										"id": 4680
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 358,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 359,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 360,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 361,
									"character": 14
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 362,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.getInterface",
								"id": 4680
							}
						},
						{
							"id": 7199,
							"name": "getPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7200,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get any resources registered by a particular plugin.",
										"returns": "the resource registered for the given plugin name, or undefined\nif no such plugin was registered.\n"
									},
									"typeParameter": [
										{
											"id": 7201,
											"name": "Y",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "NodePlugins"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 7202,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the type of plugin (e.g., 'interface' or 'reporter')"
											},
											"type": {
												"type": "typeParameter",
												"name": "Y",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "NodePlugins"
													}
												}
											}
										},
										{
											"id": 7203,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the plugin"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "P[Y]"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 7204,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7205,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "chai"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ChaiStatic"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 7206,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7207,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ObjectInterface",
										"id": 3830
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 7208,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7209,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.tdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TddInterface",
										"id": 3877
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 7210,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7211,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.bdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BddInterface",
										"id": 3954
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 7212,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7213,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "stringLiteral",
												"value": "interface.benchmark"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkInterface",
										"id": 4528
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								},
								{
									"id": 7214,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 7215,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 7216,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.getPlugin",
										"id": 4689
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 374,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 375,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 376,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 377,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 378,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 379,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 380,
									"character": 11
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 381,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.getPlugin",
								"id": 4689
							}
						},
						{
							"id": 7106,
							"name": "getTunnel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7107,
									"name": "getTunnel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieve a registered tunnel constructor"
									},
									"parameters": [
										{
											"id": 7108,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Tunnel",
										"id": 2303
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 216,
									"character": 11
								}
							]
						},
						{
							"id": 7109,
							"name": "instrumentCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7110,
									"name": "instrumentCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert coverage instrumentation into a given code string"
									},
									"parameters": [
										{
											"id": 7111,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7112,
											"name": "filename",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7113,
											"name": "shouldCompile",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 223,
									"character": 16
								}
							]
						},
						{
							"id": 7114,
							"name": "loadScript",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7115,
									"name": "loadScript",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts using Node's require"
									},
									"parameters": [
										{
											"id": 7116,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseExecutor.loadScript",
										"id": 4659
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 266,
									"character": 12
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseExecutor.loadScript",
								"id": 4659
							}
						},
						{
							"id": 7217,
							"name": "log",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7218,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a convenience method for emitting log events.",
										"text": "When debug mode is enabled, this method emits 'log' events using `emit`.\nOtherwise it does nothing.\n",
										"returns": "a CancellablePromise that resolves when all listeners have finished processing\nthe event.\n"
									},
									"parameters": [
										{
											"id": 7219,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "A list of arguments that will be stringified and combined\ninto a space-separated message."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.log",
										"id": 4707
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.log",
										"id": 4603
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 402,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.log",
								"id": 4707
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.log",
								"id": 4602
							}
						},
						{
							"id": 7220,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7221,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a listener for a test event.",
										"text": "```js\nintern.on('error', error => {\n    console.log('An error occurred:', error);\n});\n```\n\nA listener can be notified of all events by registering for the '*'\nevent, or by calling on with only a callback:\n\n```js\nintern.on(event => {\n    console.log(`An ${event.name} event occurred:`, event.data);\n});\n```\nNote that some events are executor-specific. For example, the\n[[lib/executors/Browser]] executor will never emit a tunnelStop\nmessage.\n",
										"returns": "a handle with a `destroy` method that can be used to stop\nlistening\n"
									},
									"typeParameter": [
										{
											"id": 7222,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "NodeEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 7223,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the [[lib/executors/Executor.Events|event]] to listen\nfor"
											},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "NodeEvents"
													}
												}
											}
										},
										{
											"id": 7224,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a callback that accepts a single data parameter; it may\nreturn a PromiseLike object if it needs to perform async actions"
											},
											"type": {
												"type": "reference",
												"name": "Listener",
												"id": 4784,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "E[T]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.on",
										"id": 4710
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.on",
										"id": 4606
									}
								},
								{
									"id": 7225,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7226,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Listener",
												"id": 4784,
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 7227,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 7229,
																	"name": "data",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/core/lib/executors/Executor.ts",
																			"line": 462,
																			"character": 44
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 7228,
																	"name": "name",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/core/lib/executors/Executor.ts",
																			"line": 462,
																			"character": 30
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		7229,
																		7228
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/core/lib/executors/Executor.ts",
																	"line": 462,
																	"character": 24
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.on",
										"id": 4710
									},
									"implementationOf": {
										"type": "reference",
										"name": "Executor.on",
										"id": 4610
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 461,
									"character": 4
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 462,
									"character": 4
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 463,
									"character": 4
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.on",
								"id": 4710
							},
							"implementationOf": {
								"type": "reference",
								"name": "Executor.on",
								"id": 4605
							}
						},
						{
							"id": 7230,
							"name": "registerInterface",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7231,
									"name": "registerInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register an interface plugin",
										"text": "This is a convenience method for registering test interfaces. This method\ncalls [[lib/executors/Executor.Executor.registerPlugin]] behind the\nscenes using the name `interface.${name}`.\n"
									},
									"parameters": [
										{
											"id": 7232,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7233,
											"name": "iface",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.registerInterface",
										"id": 4720
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 499,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.registerInterface",
								"id": 4720
							}
						},
						{
							"id": 7234,
							"name": "registerLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7235,
									"name": "registerLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a module loader.",
										"text": "This method sets the loader script that will be used to load plugins and\nsuites. The callback should accept an options object and return a\nfunction that can load modules.\n\n```js\nintern.registerLoader(options: any => {\n    // Register loader can return a Promise if it needs to load something\n    // itself\n    return intern.loadScript('some/loader.js').then(() => {\n        loader.config(options);\n        // Return a function that takes a list of modules and returns a\n        // Promise that resolves when they've been loaded.\n        return (modules: string[]) => {\n            return loader.load(modules);\n        });\n    });\n});\n```\n"
									},
									"parameters": [
										{
											"id": 7236,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a loader initialzation callback that should return a loader\nfunction, or a Promise that resolves to a loader function\n"
											},
											"type": {
												"type": "reference",
												"name": "LoaderInit",
												"id": 4821
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.registerLoader",
										"id": 4724
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 528,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.registerLoader",
								"id": 4724
							}
						},
						{
							"id": 7237,
							"name": "registerPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7238,
									"name": "registerPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a plugin.",
										"text": "Plugins are resources that are loaded at the beginning of the testing\nprocess, after the loader but before any suites are registered. The\ncallback may return a Promise if the plugin needs to do some asynchronous\ninitialization. If the plugin is being loaded via the\n[[lib/executors/Executor.Config.plugins|config.plugins]]\nproperty, it's init callback will be passed any configured options. The\nresolved return value of the callback will be returned by\n[[lib/executors/Executor.Executor.getPlugin]].\n\n```js\nintern.registerPlugin('foo', (options: any) => {\n    return {\n        doSomething() {\n            // ...\n        },\n        doSomethingElse() {\n            // ...\n        }\n    };\n});\n```\n\nCode would use the plugin by calling getPlugin:\n\n```js\nconst { doSomething, doSomethingElse } = intern.getPlugin('foo');\ndoSomething();\n```\n"
									},
									"typeParameter": [
										{
											"id": 7239,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "NodePlugins"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 7240,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "NodePlugins"
													}
												}
											}
										},
										{
											"id": 7241,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the plugin name"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7242,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an initializer function that returns the plugin resource, or\na Promise that resolves to the resource\n"
											},
											"type": {
												"type": "reference",
												"name": "PluginInitializer",
												"id": 4827,
												"typeArguments": [
													{
														"type": "unknown",
														"name": "P[T]"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.registerPlugin",
										"id": 4727
									}
								},
								{
									"id": 7243,
									"name": "registerPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7244,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7245,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PluginInitializer",
												"id": 4827
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.registerPlugin",
										"id": 4727
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 569,
									"character": 16
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 574,
									"character": 16
								},
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 575,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.registerPlugin",
								"id": 4727
							}
						},
						{
							"id": 7246,
							"name": "registerReporter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7247,
									"name": "registerReporter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a reporter plugin",
										"text": "This is a convenience method for registering reporter constructors. This\nmethod calls [[lib/executors/Executor.Executor.registerPlugin]] behind\nthe scenes using the name `reporter.${name}`.\n"
									},
									"parameters": [
										{
											"id": 7248,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the reporter name"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7249,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterInitializer",
												"id": 4834
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.registerReporter",
										"id": 4736
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 613,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.registerReporter",
								"id": 4736
							}
						},
						{
							"id": 7117,
							"name": "registerTunnel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7118,
									"name": "registerTunnel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a tunnel constructor with the plugin system. It can be retrieved\nlater with getTunnel or getPlugin."
									},
									"parameters": [
										{
											"id": 7119,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7120,
											"name": "Ctor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Tunnel",
												"id": 2303
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 291,
									"character": 16
								}
							]
						},
						{
							"id": 7250,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7251,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Run tests.",
										"text": "This method sets up the environment for test execution, runs the tests,\nand runs any finalization code afterwards.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseExecutor.run",
										"id": 4740
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 623,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseExecutor.run",
								"id": 4740
							}
						},
						{
							"id": 7121,
							"name": "shouldInstrumentFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7122,
									"name": "shouldInstrumentFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return true if a given file should be instrumented based on the current\nconfig"
									},
									"parameters": [
										{
											"id": 7123,
											"name": "filename",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 299,
									"character": 22
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								7084
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7146,
								7074,
								7073,
								7149,
								7148,
								7152,
								7150,
								7151,
								7076,
								7079,
								7077,
								7161,
								7153,
								7155,
								7154,
								7075,
								7160,
								7156,
								7165,
								7169,
								7171,
								7147,
								7170,
								7083,
								7078,
								7080,
								7071,
								7072
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								7172,
								7088,
								7090,
								7096,
								7092,
								7094,
								7098
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								7124,
								7252,
								7126,
								7128,
								7258,
								7260,
								7136,
								7256,
								7130,
								7263,
								7267,
								7265,
								7269,
								7132,
								7276,
								7144,
								7134,
								7140,
								7138,
								7142,
								7100,
								7178,
								7182,
								7174,
								7190,
								7199,
								7106,
								7109,
								7114,
								7217,
								7220,
								7230,
								7234,
								7237,
								7246,
								7117,
								7250,
								7121
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 59,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseExecutor",
							"id": 4615,
							"typeArguments": [
								{
									"type": "reference",
									"name": "NodeEvents",
									"id": 7730
								},
								{
									"type": "reference",
									"name": "Config",
									"id": 4999
								},
								{
									"type": "reference",
									"name": "NodePlugins",
									"id": 7280
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "Executor",
							"id": 4575
						}
					]
				},
				{
					"id": 7730,
					"name": "NodeEvents",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 7737,
							"name": "*",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A listener can listen for this event to be notified of all events"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1068,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ExecutorEvent",
								"id": 4796
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.'*'",
								"id": 4800
							}
						},
						{
							"id": 7738,
							"name": "afterRun",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted after the local executor has finished running suites. This is\nfunctionally the same as runEnd."
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1074,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.afterRun",
								"id": 4801
							}
						},
						{
							"id": 7739,
							"name": "beforeRun",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted before the local executor loads suites"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1077,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.beforeRun",
								"id": 4802
							}
						},
						{
							"id": 7740,
							"name": "coverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Coverage info has been gathered"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1080,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "CoverageMessage",
								"id": 4788
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.coverage",
								"id": 4803
							}
						},
						{
							"id": 7741,
							"name": "deprecated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A deprecated method was called"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1083,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "DeprecationMessage",
								"id": 4792
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.deprecated",
								"id": 4804
							}
						},
						{
							"id": 7742,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An unhandled error occurs"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1086,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Error"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.error",
								"id": 4805
							}
						},
						{
							"id": 7743,
							"name": "log",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A debug log event"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1089,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.log",
								"id": 4806
							}
						},
						{
							"id": 7744,
							"name": "runEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "All tests have finished running. This is functionally the same as\nafterRun."
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1095,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.runEnd",
								"id": 4807
							}
						},
						{
							"id": 7745,
							"name": "runStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted just before tests start running"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1098,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.runStart",
								"id": 4808
							}
						},
						{
							"id": 7731,
							"name": "serverEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A test server has stopped"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1003,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Server",
								"id": 6285
							}
						},
						{
							"id": 7732,
							"name": "serverStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A test server was started"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1006,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Server",
								"id": 6285
							}
						},
						{
							"id": 7746,
							"name": "suiteAdd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A new suite has been added"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1101,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.suiteAdd",
								"id": 4809
							}
						},
						{
							"id": 7747,
							"name": "suiteEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A suite has fininshed running"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1104,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.suiteEnd",
								"id": 4810
							}
						},
						{
							"id": 7748,
							"name": "suiteStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A suite has started running"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1107,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.suiteStart",
								"id": 4811
							}
						},
						{
							"id": 7749,
							"name": "testAdd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A new test has been added"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1110,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Test",
								"id": 3484
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.testAdd",
								"id": 4812
							}
						},
						{
							"id": 7750,
							"name": "testEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A test has finished"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1113,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Test",
								"id": 3484
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.testEnd",
								"id": 4813
							}
						},
						{
							"id": 7751,
							"name": "testStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A test has started"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1116,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Test",
								"id": 3484
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.testStart",
								"id": 4814
							}
						},
						{
							"id": 7733,
							"name": "tunnelDownloadProgress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Emitted as a Tunnel executable download is in process"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1009,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "TunnelMessage",
								"id": 7726
							}
						},
						{
							"id": 7734,
							"name": "tunnelStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A WebDriver tunnel has been opened"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1012,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TunnelMessage",
								"id": 7726
							}
						},
						{
							"id": 7735,
							"name": "tunnelStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A status update from a WebDriver tunnel"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1015,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "TunnelMessage",
								"id": 7726
							}
						},
						{
							"id": 7736,
							"name": "tunnelStop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A WebDriver tunnel has been stopped"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1018,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "TunnelMessage",
								"id": 7726
							}
						},
						{
							"id": 7752,
							"name": "warning",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A non-fatal error occurred"
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1119,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Events.warning",
								"id": 4815
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7737,
								7738,
								7739,
								7740,
								7741,
								7742,
								7743,
								7744,
								7745,
								7731,
								7732,
								7746,
								7747,
								7748,
								7749,
								7750,
								7751,
								7733,
								7734,
								7735,
								7736,
								7752
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 1001,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Events",
							"id": 4799
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "RemoteEvents",
							"id": 6138
						}
					]
				},
				{
					"id": 7280,
					"name": "NodePlugins",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 7282,
							"name": "reporter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Executor.ts",
									"line": 1129,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterInitializer",
								"id": 4834
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Plugins.reporter",
								"id": 4817
							}
						},
						{
							"id": 7281,
							"name": "tunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 986,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Tunnel",
								"id": 2303
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7282,
								7281
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 985,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Plugins",
							"id": 4816
						}
					]
				},
				{
					"id": 7770,
					"name": "QueueEntry",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 7771,
							"name": "func",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1076,
									"character": 6
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7772,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7773,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/executors/Node.ts",
											"line": 1076,
											"character": 7
										}
									]
								}
							}
						},
						{
							"id": 7777,
							"name": "reject",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1078,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7778,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7779,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/executors/Node.ts",
											"line": 1078,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 7774,
							"name": "resolve",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 1077,
									"character": 9
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7775,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7776,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/executors/Node.ts",
											"line": 1077,
											"character": 10
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7771,
								7777,
								7774
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 1075,
							"character": 20
						}
					]
				},
				{
					"id": 7283,
					"name": "Remote",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 7289,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 7290,
							"name": "StringResult",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 7306,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 7307,
									"name": "new Remote",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 7308,
											"name": "parentOrSession",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Session",
														"id": 950
													},
													{
														"type": "reference",
														"name": "Command",
														"id": 1591,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "P"
															},
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "typeParameter",
																"name": "StringResult",
																"constraint": {
																	"type": "union",
																	"types": [
																		{
																			"type": "intrinsic",
																			"name": "string"
																		},
																		{
																			"type": "array",
																			"elementType": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	]
																}
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 7309,
											"name": "initialiser",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A function that will be executed when all parent\ncommands have completed execution. This function can create a new\ncontext for this command by calling the passed `setContext` function any\ntime prior to resolving the Promise that it returns. If no context is\nexplicitly provided, the context from the parent command will be used.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 7310,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 7311,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 7312,
																			"name": "this",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Command",
																				"id": 1591,
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "typeParameter",
																						"name": "P"
																					},
																					{
																						"type": "typeParameter",
																						"name": "StringResult",
																						"constraint": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "array",
																									"elementType": {
																										"type": "intrinsic",
																										"name": "string"
																									}
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		{
																			"id": 7313,
																			"name": "setContext",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "SetContextMethod",
																				"id": 2030
																			}
																		},
																		{
																			"id": 7314,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "any"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					}
																				]
																			}
																		]
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 7315,
											"name": "errback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A function that will be executed if any parent commands\nfailed to complete successfully. This function can create a new context\nfor the current command by calling the passed `setContext` function any\ntime prior to resolving the Promise that it returns. If no context is\nexplicitly provided, the context from the parent command will be used.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 7316,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 7317,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 7318,
																			"name": "this",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Command",
																				"id": 1591,
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "typeParameter",
																						"name": "P"
																					},
																					{
																						"type": "typeParameter",
																						"name": "StringResult",
																						"constraint": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "array",
																									"elementType": {
																										"type": "intrinsic",
																										"name": "string"
																									}
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		{
																			"id": 7319,
																			"name": "setContext",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "SetContextMethod",
																				"id": 2030
																			}
																		},
																		{
																			"id": 7320,
																			"name": "error",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "any"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					}
																				]
																			}
																		]
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Remote",
										"id": 7283
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.__constructor",
										"id": 1610
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 333,
									"character": 41
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.__constructor",
								"id": 1610
							}
						},
						{
							"id": 7284,
							"name": "environmentType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 990,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Environment",
								"id": 5580
							}
						},
						{
							"id": 7285,
							"name": "requestedEnvironment",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 991,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "Environment",
								"id": 5580
							}
						},
						{
							"id": 7325,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The filtered elements that will be used if an element-specific method is\ninvoked. Note that this property is not valid until the parent Command\nhas been settled. The context array also has two additional properties:",
								"text": "* `isSingle` (boolean): If true, the context will always contain a\n  single element. This is used to differentiate between methods that\n  should still return scalar values (`find`) and methods that should\n  return arrays of values even if there is only one element in the\n  context (`findAll`).\n* `depth` (number): The depth of the context within the command chain.\n  This is used to prevent traversal into higher filtering levels by\n  [[Command.Command.end]].\n"
							},
							"getSignature": [
								{
									"id": 7326,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The filtered elements that will be used if an element-specific method is\ninvoked. Note that this property is not valid until the parent Command\nhas been settled. The context array also has two additional properties:",
										"text": "* `isSingle` (boolean): If true, the context will always contain a\n  single element. This is used to differentiate between methods that\n  should still return scalar values (`find`) and methods that should\n  return arrays of values even if there is only one element in the\n  context (`findAll`).\n* `depth` (number): The depth of the context within the command chain.\n  This is used to prevent traversal into higher filtering levels by\n  [[Command.Command.end]].\n"
									},
									"type": {
										"type": "reference",
										"name": "Context",
										"id": 2033
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.context",
										"id": 1629
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 483,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.context",
								"id": 1629
							}
						},
						{
							"id": 7321,
							"name": "parent",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The parent Command of the Command, if one exists. This will be defined\nfor all commands but the top-level Session command (i.e., in most\ncontexts user code will call it)."
							},
							"getSignature": [
								{
									"id": 7322,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The parent Command of the Command, if one exists. This will be defined\nfor all commands but the top-level Session command (i.e., in most\ncontexts user code will call it)."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.parent",
										"id": 1625
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 458,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.parent",
								"id": 1625
							}
						},
						{
							"id": 7327,
							"name": "promise",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The underlying Promise for the Command.",
								"tags": [
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"getSignature": [
								{
									"id": 7328,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The underlying Promise for the Command.",
										"tags": [
											{
												"tag": "readonly",
												"text": "\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.promise",
										"id": 1631
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 492,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.promise",
								"id": 1631
							}
						},
						{
							"id": 7323,
							"name": "session",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The parent Session of the Command."
							},
							"getSignature": [
								{
									"id": 7324,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The parent Session of the Command."
									},
									"type": {
										"type": "reference",
										"name": "Session",
										"id": 950
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.session",
										"id": 1627
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 465,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.session",
								"id": 1627
							}
						},
						{
							"id": 7492,
							"name": "acceptAlert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7493,
									"name": "acceptAlert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Accepts an alert, prompt, or confirmation pop-up. Equivalent to clicking\nthe 'OK' button."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.acceptAlert",
										"id": 1796
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1294,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.acceptAlert",
								"id": 1796
							}
						},
						{
							"id": 7419,
							"name": "activateIme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7420,
									"name": "activateIme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Activates an input method editor in the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"parameters": [
										{
											"id": 7421,
											"name": "engine",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of IME to activate.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.activateIme",
										"id": 1723
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1044,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.activateIme",
								"id": 1723
							}
						},
						{
							"id": 7363,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7364,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancels all outstanding chained operations of the Command. Calling this\nmethod will cause this command and all subsequent chained commands to\nfail with a CancelError."
									},
									"type": {
										"type": "unknown",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.cancel",
										"id": 1667
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 707,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.cancel",
								"id": 1667
							}
						},
						{
							"id": 7350,
							"name": "catch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7351,
									"name": "catch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a callback to be invoked when any of the previously chained\noperations have failed."
									},
									"typeParameter": [
										{
											"id": 7352,
											"name": "R",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 7353,
											"name": "errback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 7354,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 7355,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 7356,
																	"name": "this",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Command",
																		"id": 1591,
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "any"
																			},
																			{
																				"type": "typeParameter",
																				"name": "P"
																			},
																			{
																				"type": "typeParameter",
																				"name": "StringResult",
																				"constraint": {
																					"type": "union",
																					"types": [
																						{
																							"type": "intrinsic",
																							"name": "string"
																						},
																						{
																							"type": "array",
																							"elementType": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					]
																				}
																			}
																		]
																	}
																},
																{
																	"id": 7357,
																	"name": "reason",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "R"
																	},
																	{
																		"type": "reference",
																		"name": "PromiseLike",
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "R"
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "src/webdriver/Command.ts",
															"line": 685,
															"character": 12
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.catch",
										"id": 1654
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 684,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.catch",
								"id": 1654
							}
						},
						{
							"id": 7468,
							"name": "clearCookies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7469,
									"name": "clearCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all cookies for the current page."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.clearCookies",
										"id": 1772
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1204,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.clearCookies",
								"id": 1772
							}
						},
						{
							"id": 7598,
							"name": "clearValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7599,
									"name": "clearValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the value of a form element."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.clearValue",
										"id": 1902
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1683,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.clearValue",
								"id": 1902
							}
						},
						{
							"id": 7587,
							"name": "click",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7588,
									"name": "click",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clicks the element. This method works on both mouse and touch platforms."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.click",
										"id": 1891
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1631,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.click",
								"id": 1891
							}
						},
						{
							"id": 7504,
							"name": "clickMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7505,
									"name": "clickMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clicks a mouse button at the point where the mouse cursor is currently\npositioned. This method may fail to execute with an error if the mouse\nhas not been moved anywhere since the page was loaded."
									},
									"parameters": [
										{
											"id": 7506,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to click. 0 corresponds to the primary mouse\nbutton, 1 to the middle mouse button, 2 to the secondary mouse button.\nNumbers above 2 correspond to any additional buttons a mouse might\nprovide.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.clickMouseButton",
										"id": 1808
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1351,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.clickMouseButton",
								"id": 1808
							}
						},
						{
							"id": 7430,
							"name": "closeCurrentWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7431,
									"name": "closeCurrentWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes the currently focused window. In most environments, after the\nwindow has been closed, it is necessary to explicitly switch to whatever\nwindow is now focused."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.closeCurrentWindow",
										"id": 1734
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1089,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.closeCurrentWindow",
								"id": 1734
							}
						},
						{
							"id": 7417,
							"name": "deactivateIme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7418,
									"name": "deactivateIme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deactivates any active input method editor in the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.deactivateIme",
										"id": 1721
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1034,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.deactivateIme",
								"id": 1721
							}
						},
						{
							"id": 7470,
							"name": "deleteCookie",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7471,
									"name": "deleteCookie",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a cookie on the current page."
									},
									"parameters": [
										{
											"id": 7472,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the cookie to delete.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.deleteCookie",
										"id": 1774
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1213,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.deleteCookie",
								"id": 1774
							}
						},
						{
							"id": 7494,
							"name": "dismissAlert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7495,
									"name": "dismissAlert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dismisses an alert, prompt, or confirmation pop-up. Equivalent to\nclicking the 'OK' button of an alert pop-up or the 'Cancel' button of a\nprompt or confirmation pop-up."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.dismissAlert",
										"id": 1798
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1303,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.dismissAlert",
								"id": 1798
							}
						},
						{
							"id": 7513,
							"name": "doubleClick",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7514,
									"name": "doubleClick",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Double-clicks the primary mouse button."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.doubleClick",
										"id": 1817
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1378,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.doubleClick",
								"id": 1817
							}
						},
						{
							"id": 7538,
							"name": "doubleTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7539,
									"name": "doubleTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a double-tap gesture on an element.",
										"tags": [
											{
												"tag": "method",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 7540,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The element to double-tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.doubleTap",
										"id": 1842
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1458,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.doubleTap",
								"id": 1842
							}
						},
						{
							"id": 7332,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7333,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Ends the most recent filtering operation in the current Command chain\nand returns the set of matched elements to the previous state. This is\nequivalent to the `jQuery#end` method.",
										"text": "```js\ncommand\n    .findById('parent') // sets filter to #parent\n    .findByClassName('child') // sets filter to all .child inside #parent\n    .getVisibleText()\n    .then(function (visibleTexts) {\n        // all the visible texts from the children\n    })\n    .end() // resets filter to #parent\n    .end(); // resets filter to nothing (the whole document)\n ```\n"
									},
									"parameters": [
										{
											"id": 7334,
											"name": "numCommandsToPop",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of element contexts to pop. Defaults\nto 1.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.end",
										"id": 1636
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 530,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.end",
								"id": 1636
							}
						},
						{
							"id": 7615,
							"name": "equals",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7616,
									"name": "equals",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determines if this element is equal to another element."
									},
									"parameters": [
										{
											"id": 7617,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.equals",
										"id": 1919
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1770,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.equals",
								"id": 1919
							}
						},
						{
							"id": 7399,
							"name": "execute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7400,
									"name": "execute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes JavaScript code within the focused window/frame. The code\nshould return a value synchronously.",
										"text": "See [[Command.Command.executeAsync]] to execute code that returns values\nasynchronously.\n",
										"returns": "The value returned by the remote code. Only values that can be\nserialised to JSON, plus DOM elements, can be returned.\n"
									},
									"typeParameter": [
										{
											"id": 7401,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 7402,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code to execute. This function will always be\nconverted to a string, sent to the remote environment, and reassembled\nas a new anonymous function on the remote end. This means that you\ncannot access any variables through closure. If your code needs to get\ndata from variables on the local end, they should be passed using\n`args`.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Function"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 7403,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An array of arguments that will be passed to the executed\ncode. Only values that can be serialised to JSON, plus [[Element]]\nobjects, can be specified as arguments.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.execute",
										"id": 1703
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 960,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.execute",
								"id": 1703
							}
						},
						{
							"id": 7404,
							"name": "executeAsync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7405,
									"name": "executeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes JavaScript code within the focused window/frame. The code must\ninvoke the provided callback in order to signal that it has completed\nexecution.",
										"text": "See [[Command.Command.execute]] to execute code that returns values\nsynchronously.\n\nSee [[Command.Command.setExecuteAsyncTimeout]] to set the time until an\nasynchronous script is considered timed out.\n",
										"returns": "The value returned by the remote code. Only values that can be\nserialised to JSON, plus DOM elements, can be returned.\n"
									},
									"typeParameter": [
										{
											"id": 7406,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 7407,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code to execute. This function will always be\nconverted to a string, sent to the remote environment, and reassembled\nas a new anonymous function on the remote end. This means that you\ncannot access any variables through closure. If your code needs to get\ndata from variables on the local end, they should be passed using\n`args`.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Function"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 7408,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An array of arguments that will be passed to the executed\ncode. Only values that can be serialised to JSON, plus [[Element]]\nobjects, can be specified as arguments. In addition to these arguments,\na callback function will always be passed as the final argument to the\nfunction specified in `script`. This callback function must be invoked\nin order to signal that execution has completed. The return value of the\nexecution, if any, should be passed to this callback function.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.executeAsync",
										"id": 1708
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 993,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.executeAsync",
								"id": 1708
							}
						},
						{
							"id": 7358,
							"name": "finally",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7359,
									"name": "finally",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a callback to be invoked once the previously chained operations\nhave resolved."
									},
									"parameters": [
										{
											"id": 7360,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 7361,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 7362,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/webdriver/Command.ts",
															"line": 697,
															"character": 19
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.finally",
										"id": 1662
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 697,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.finally",
								"id": 1662
							}
						},
						{
							"id": 7365,
							"name": "find",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7366,
									"name": "find",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7367,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 7368,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.find",
										"id": 802
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.find",
										"id": 1669
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 712,
									"character": 6
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.find",
								"id": 802
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.find",
								"id": 1669
							}
						},
						{
							"id": 7369,
							"name": "findAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7370,
									"name": "findAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7371,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 7372,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Element",
													"id": 1415
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.findAll",
										"id": 806
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findAll",
										"id": 1673
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 716,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.findAll",
								"id": 806
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findAll",
								"id": 1673
							}
						},
						{
							"id": 7657,
							"name": "findAllByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7658,
									"name": "findAllByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS class name."
									},
									"parameters": [
										{
											"id": 7659,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByClassName",
										"id": 842
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 106,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByClassName",
								"id": 842
							}
						},
						{
							"id": 7660,
							"name": "findAllByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7661,
									"name": "findAllByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS selector."
									},
									"parameters": [
										{
											"id": 7662,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByCssSelector",
										"id": 845
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 115,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByCssSelector",
								"id": 845
							}
						},
						{
							"id": 7666,
							"name": "findAllByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7667,
									"name": "findAllByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 7668,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByLinkText",
										"id": 851
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 134,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByLinkText",
								"id": 851
							}
						},
						{
							"id": 7663,
							"name": "findAllByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7664,
									"name": "findAllByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given name attribute."
									},
									"parameters": [
										{
											"id": 7665,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByName",
										"id": 848
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 124,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByName",
								"id": 848
							}
						},
						{
							"id": 7669,
							"name": "findAllByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7670,
									"name": "findAllByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 7671,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByPartialLinkText",
										"id": 854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 144,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByPartialLinkText",
								"id": 854
							}
						},
						{
							"id": 7672,
							"name": "findAllByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7673,
									"name": "findAllByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given HTML tag name."
									},
									"parameters": [
										{
											"id": 7674,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByTagName",
										"id": 857
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 153,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByTagName",
								"id": 857
							}
						},
						{
							"id": 7675,
							"name": "findAllByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7676,
									"name": "findAllByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given XPath selector."
									},
									"parameters": [
										{
											"id": 7677,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByXpath",
										"id": 860
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 162,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByXpath",
								"id": 860
							}
						},
						{
							"id": 7633,
							"name": "findByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7634,
									"name": "findByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS class\nname."
									},
									"parameters": [
										{
											"id": 7635,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByClassName",
										"id": 818
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 28,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByClassName",
								"id": 818
							}
						},
						{
							"id": 7636,
							"name": "findByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7637,
									"name": "findByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS\nselector."
									},
									"parameters": [
										{
											"id": 7638,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByCssSelector",
										"id": 821
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 38,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByCssSelector",
								"id": 821
							}
						},
						{
							"id": 7639,
							"name": "findById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7640,
									"name": "findById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given ID."
									},
									"parameters": [
										{
											"id": 7641,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findById",
										"id": 824
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 47,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findById",
								"id": 824
							}
						},
						{
							"id": 7645,
							"name": "findByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7646,
									"name": "findByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 7647,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByLinkText",
										"id": 830
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 67,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByLinkText",
								"id": 830
							}
						},
						{
							"id": 7642,
							"name": "findByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7643,
									"name": "findByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given name\nattribute."
									},
									"parameters": [
										{
											"id": 7644,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByName",
										"id": 827
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 57,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByName",
								"id": 827
							}
						},
						{
							"id": 7648,
							"name": "findByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7649,
									"name": "findByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 7650,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByPartialLinkText",
										"id": 833
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 77,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByPartialLinkText",
								"id": 833
							}
						},
						{
							"id": 7651,
							"name": "findByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7652,
									"name": "findByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given HTML tag\nname."
									},
									"parameters": [
										{
											"id": 7653,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByTagName",
										"id": 836
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 87,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByTagName",
								"id": 836
							}
						},
						{
							"id": 7654,
							"name": "findByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7655,
									"name": "findByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given XPath\nselector."
									},
									"parameters": [
										{
											"id": 7656,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByXpath",
										"id": 839
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 97,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByXpath",
								"id": 839
							}
						},
						{
							"id": 7373,
							"name": "findDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7374,
									"name": "findDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7375,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 7376,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.findDisplayed",
										"id": 810
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findDisplayed",
										"id": 1677
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 720,
									"character": 15
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.findDisplayed",
								"id": 810
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findDisplayed",
								"id": 1677
							}
						},
						{
							"id": 7678,
							"name": "findDisplayedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7679,
									"name": "findDisplayedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS class name. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 7680,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByClassName",
										"id": 863
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 175,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByClassName",
								"id": 863
							}
						},
						{
							"id": 7681,
							"name": "findDisplayedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7682,
									"name": "findDisplayedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS selector. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 7683,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByCssSelector",
										"id": 866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 188,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByCssSelector",
								"id": 866
							}
						},
						{
							"id": 7684,
							"name": "findDisplayedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7685,
									"name": "findDisplayedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given ID. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 7686,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedById",
										"id": 869
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 201,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedById",
								"id": 869
							}
						},
						{
							"id": 7690,
							"name": "findDisplayedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7691,
									"name": "findDisplayedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 7692,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByLinkText",
										"id": 875
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 227,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByLinkText",
								"id": 875
							}
						},
						{
							"id": 7687,
							"name": "findDisplayedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7688,
									"name": "findDisplayedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given name attribute. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 7689,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByName",
										"id": 872
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 214,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByName",
								"id": 872
							}
						},
						{
							"id": 7693,
							"name": "findDisplayedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7694,
									"name": "findDisplayedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement partially matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 7695,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByPartialLinkText",
										"id": 878
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 240,
									"character": 32
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByPartialLinkText",
								"id": 878
							}
						},
						{
							"id": 7696,
							"name": "findDisplayedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7697,
									"name": "findDisplayedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given HTML tag name. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 7698,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByTagName",
										"id": 881
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 253,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByTagName",
								"id": 881
							}
						},
						{
							"id": 7699,
							"name": "findDisplayedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7700,
									"name": "findDisplayedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given XPath selector. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 7701,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByXpath",
										"id": 884
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 266,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByXpath",
								"id": 884
							}
						},
						{
							"id": 7544,
							"name": "flickFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7545,
									"name": "flickFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Flicks a finger. Note that this method is currently badly specified and\nhighly dysfunctional and is only provided for the sake of completeness."
									},
									"parameters": [
										{
											"id": 7546,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element where the flick should start."
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 7547,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The x-offset in pixels to flick by."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7548,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The x-offset in pixels to flick by."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7549,
											"name": "speed",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The speed of the flick, in pixels per *second*. Most human\nflicks are 100–200ms, so this value will be higher than expected.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.flickFinger",
										"id": 1848
									}
								},
								{
									"id": 7550,
									"name": "flickFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7551,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7552,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7553,
											"name": "speed",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.flickFinger",
										"id": 1848
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1482,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1488,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1493,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.flickFinger",
								"id": 1848
							}
						},
						{
							"id": 7390,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7391,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame to a new URL."
									},
									"parameters": [
										{
											"id": 7392,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.get",
										"id": 1694
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 912,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.get",
								"id": 1694
							}
						},
						{
							"id": 7477,
							"name": "getActiveElement",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7478,
									"name": "getActiveElement",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the currently focused element from the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getActiveElement",
										"id": 1781
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1237,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getActiveElement",
								"id": 1781
							}
						},
						{
							"id": 7413,
							"name": "getActiveImeEngine",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7414,
									"name": "getActiveImeEngine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the currently active input method editor for the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getActiveImeEngine",
										"id": 1717
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1017,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getActiveImeEngine",
								"id": 1717
							}
						},
						{
							"id": 7487,
							"name": "getAlertText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7488,
									"name": "getAlertText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the text displayed in the currently active alert pop-up."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getAlertText",
										"id": 1791
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1277,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getAlertText",
								"id": 1791
							}
						},
						{
							"id": 7386,
							"name": "getAllWindowHandles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7387,
									"name": "getAllWindowHandles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of identifiers for all currently open windows."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getAllWindowHandles",
										"id": 1690
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 898,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getAllWindowHandles",
								"id": 1690
							}
						},
						{
							"id": 7564,
							"name": "getApplicationCacheStatus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7565,
									"name": "getApplicationCacheStatus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current state of the HTML5 application cache for the current\npage.",
										"returns": "The cache status. One of 0 (uncached), 1 (cached/idle), 2\n(checking), 3 (downloading), 4 (update ready), 5 (obsolete).\n"
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getApplicationCacheStatus",
										"id": 1868
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1552,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getApplicationCacheStatus",
								"id": 1868
							}
						},
						{
							"id": 7607,
							"name": "getAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7608,
									"name": "getAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets an attribute of the element.",
										"text": "See [[Element.Element.getProperty]] to retrieve an element property.\n",
										"returns": "The value of the attribute, or `null` if no such attribute\nexists.\n"
									},
									"typeParameter": [
										{
											"id": 7609,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 7610,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the attribute."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "S"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getAttribute",
										"id": 1911
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1751,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getAttribute",
								"id": 1911
							}
						},
						{
							"id": 7411,
							"name": "getAvailableImeEngines",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7412,
									"name": "getAvailableImeEngines",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of input method editor engines available to the remote\nenvironment. As of April 2014, no known remote environments support IME\nfunctions."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getAvailableImeEngines",
										"id": 1715
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1009,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getAvailableImeEngines",
								"id": 1715
							}
						},
						{
							"id": 7562,
							"name": "getAvailableLogTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7563,
									"name": "getAvailableLogTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the types of logs that are currently available for retrieval from\nthe remote environment."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getAvailableLogTypes",
										"id": 1866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1541,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getAvailableLogTypes",
								"id": 1866
							}
						},
						{
							"id": 7630,
							"name": "getComputedStyle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7631,
									"name": "getComputedStyle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a CSS computed property value for the element."
									},
									"parameters": [
										{
											"id": 7632,
											"name": "propertyName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS property to retrieve. This argument must be\nhyphenated, *not* camel-case.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "StringResult"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getComputedStyle",
										"id": 1934
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1815,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getComputedStyle",
								"id": 1934
							}
						},
						{
							"id": 7463,
							"name": "getCookies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7464,
									"name": "getCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all cookies set on the current page."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "WebDriverCookie",
													"id": 660
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getCookies",
										"id": 1767
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1190,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getCookies",
								"id": 1767
							}
						},
						{
							"id": 7388,
							"name": "getCurrentUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7389,
									"name": "getCurrentUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the URL that is loaded in the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getCurrentUrl",
										"id": 1692
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 905,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getCurrentUrl",
								"id": 1692
							}
						},
						{
							"id": 7384,
							"name": "getCurrentWindowHandle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7385,
									"name": "getCurrentWindowHandle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the identifier for the window that is currently focused.",
										"returns": "A window handle identifier that can be used with other window\nhandling functions.\n"
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getCurrentWindowHandle",
										"id": 1688
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 891,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getCurrentWindowHandle",
								"id": 1688
							}
						},
						{
							"id": 7572,
							"name": "getExecuteAsyncTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7573,
									"name": "getExecuteAsyncTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Command.Command.executeAsync]] calls."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getExecuteAsyncTimeout",
										"id": 1876
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1581,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getExecuteAsyncTimeout",
								"id": 1876
							}
						},
						{
							"id": 7577,
							"name": "getFindTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7578,
									"name": "getFindTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Command.Command.find]] calls."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getFindTimeout",
										"id": 1881
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1597,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getFindTimeout",
								"id": 1881
							}
						},
						{
							"id": 7554,
							"name": "getGeolocation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7555,
									"name": "getGeolocation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current geographical location of the remote environment.",
										"returns": "a [[interfaces.Geolocation]] value with latitude and longitude\nspecified using standard WGS84 decimal latitude/longitude. Altitude is\nspecified as meters above the WGS84 ellipsoid. Not all environments\nsupport altitude.\n"
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Geolocation",
												"id": 652
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getGeolocation",
										"id": 1858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1505,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getGeolocation",
								"id": 1858
							}
						},
						{
							"id": 7559,
							"name": "getLogsFor",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7560,
									"name": "getLogsFor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all logs from the remote environment of the given type. The logs in\nthe remote environment are cleared once they have been retrieved.",
										"returns": "An array of log entry objects. Timestamps in log entries are\nUnix timestamps, in seconds.\n"
									},
									"parameters": [
										{
											"id": 7561,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of log entries to retrieve. Available log types\ndiffer between remote environments. Use\n[[Command.Command.getAvailableLogTypes]] to learn what log types are\ncurrently available. Not all environments support all possible log\ntypes.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogEntry",
													"id": 656
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getLogsFor",
										"id": 1863
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1533,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getLogsFor",
								"id": 1863
							}
						},
						{
							"id": 7482,
							"name": "getOrientation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7483,
									"name": "getOrientation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current screen orientation."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "portrait"
													},
													{
														"type": "stringLiteral",
														"value": "landscape"
													}
												]
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getOrientation",
										"id": 1786
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1261,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getOrientation",
								"id": 1786
							}
						},
						{
							"id": 7582,
							"name": "getPageLoadTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7583,
									"name": "getPageLoadTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Command.Command.get]] calls."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getPageLoadTimeout",
										"id": 1886
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1613,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getPageLoadTimeout",
								"id": 1886
							}
						},
						{
							"id": 7473,
							"name": "getPageSource",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7474,
									"name": "getPageSource",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the HTML loaded in the focused window/frame. This markup is\nserialised by the remote environment so may not exactly match the HTML\nprovided by the Web server."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getPageSource",
										"id": 1777
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1222,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getPageSource",
								"id": 1777
							}
						},
						{
							"id": 7475,
							"name": "getPageTitle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7476,
									"name": "getPageTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the title of the top-level browsing context of the current window\nor tab."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getPageTitle",
										"id": 1779
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1230,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getPageTitle",
								"id": 1779
							}
						},
						{
							"id": 7620,
							"name": "getPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7621,
									"name": "getPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the position of the element relative to the top-left corner of the\ndocument, taking into account scrolling and CSS transformations (if they\nare supported)."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 7622,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 7623,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1796,
																	"character": 38
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 7624,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1796,
																	"character": 49
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																7623,
																7624
															]
														}
													]
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getPosition",
										"id": 1924
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1795,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getPosition",
								"id": 1924
							}
						},
						{
							"id": 7611,
							"name": "getProperty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7612,
									"name": "getProperty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a property of the element.",
										"text": "See [[Element.Element.getAttribute]] to retrieve an element attribute.\n",
										"returns": "The value of the property.\n"
									},
									"typeParameter": [
										{
											"id": 7613,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 7614,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the property."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getProperty",
										"id": 1915
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1763,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getProperty",
								"id": 1915
							}
						},
						{
							"id": 7625,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7626,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the size of the element, taking into account CSS transformations\n(if they are supported)."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 7627,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 7629,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1804,
																	"character": 58
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 7628,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1804,
																	"character": 42
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																7629,
																7628
															]
														}
													]
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getSize",
										"id": 1929
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1803,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getSize",
								"id": 1929
							}
						},
						{
							"id": 7604,
							"name": "getSpecAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7605,
									"name": "getSpecAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a property or attribute of the element according to the WebDriver\nspecification algorithm. Use of this method is not recommended; instead,\nuse [[Command.Command.getAttribute]] to retrieve DOM attributes and\n[[Command.Command.getProperty]] to retrieve DOM properties.",
										"text": "This method uses the following algorithm on the server to determine what\nvalue to return:\n\n1. If `name` is 'style', returns the `style.cssText` property of the\n   element.\n2. If the attribute exists and is a boolean attribute, returns 'true' if\n   the attribute is true, or null otherwise.\n3. If the element is an `<option>` element and `name` is 'value',\n   returns the `value` attribute if it exists, otherwise returns the\n   visible text content of the option.\n4. If the element is a checkbox or radio button and `name` is\n   'selected', returns 'true' if the element is checked, or null\n   otherwise.\n5. If the returned value is expected to be a URL (e.g. element is `<a>`\n   and attribute is `href`), returns the fully resolved URL from the\n   `href`/`src` property of the element, not the attribute.\n6. If `name` is 'class', returns the `className` property of the\n   element.\n7. If `name` is 'readonly', returns 'true' if the `readOnly` property is\n   true, or null otherwise.\n8. If `name` corresponds to a property of the element, and the property\n   is not an Object, return the property value coerced to a string.\n9. If `name` corresponds to an attribute of the element, return the\n   attribute value.\n",
										"returns": "The value of the attribute as a string, or `null` if no such\nproperty or attribute exists.\n"
									},
									"parameters": [
										{
											"id": 7606,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The property or attribute name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "StringResult"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getSpecAttribute",
										"id": 1908
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1738,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getSpecAttribute",
								"id": 1908
							}
						},
						{
							"id": 7596,
							"name": "getTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7597,
									"name": "getTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the tag name of the element. For HTML documents, the value is\nalways lowercase."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "StringResult"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getTagName",
										"id": 1900
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1676,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getTagName",
								"id": 1900
							}
						},
						{
							"id": 7377,
							"name": "getTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7378,
									"name": "getTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current value of a timeout for the session.",
										"returns": "The timeout, in milliseconds.\n"
									},
									"parameters": [
										{
											"id": 7379,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of timeout to retrieve. One of 'script',\n'implicit', or 'page load'."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getTimeout",
										"id": 1681
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 868,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getTimeout",
								"id": 1681
							}
						},
						{
							"id": 7591,
							"name": "getVisibleText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7592,
									"name": "getVisibleText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the visible text within the element. `<br>` elements are converted\nto line breaks in the returned text, and whitespace is normalised per\nthe usual XML/HTML whitespace normalisation rules."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "StringResult"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getVisibleText",
										"id": 1895
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1648,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getVisibleText",
								"id": 1895
							}
						},
						{
							"id": 7454,
							"name": "getWindowPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7455,
									"name": "getWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the position of a window.",
										"text": "Note that this method is not part of the W3C WebDriver standard.\n",
										"returns": "An object describing the position of the window, in CSS pixels,\nrelative to the top-left corner of the primary monitor. If a secondary\nmonitor exists above or to the left of the primary monitor, these values\nwill be negative.\n"
									},
									"parameters": [
										{
											"id": 7456,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the window to query. See\n[[Command.Command.switchToWindow]] to learn about valid window names.\nOmit this argument to query the currently focused window.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 7457,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 7458,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1170,
																	"character": 38
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 7459,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1170,
																	"character": 49
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																7458,
																7459
															]
														}
													]
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getWindowPosition",
										"id": 1758
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1169,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getWindowPosition",
								"id": 1758
							}
						},
						{
							"id": 7440,
							"name": "getWindowSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7441,
									"name": "getWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the dimensions of a window.",
										"returns": "An object describing the width and height of the window, in CSS\npixels.\n"
									},
									"parameters": [
										{
											"id": 7442,
											"name": "_windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 7443,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 7445,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1125,
																	"character": 58
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 7444,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1125,
																	"character": 42
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																7445,
																7444
															]
														}
													]
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getWindowSize",
										"id": 1744
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1124,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getWindowSize",
								"id": 1744
							}
						},
						{
							"id": 7395,
							"name": "goBack",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7396,
									"name": "goBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame back one page using the browser’s\nnavigation history."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.goBack",
										"id": 1699
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 928,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.goBack",
								"id": 1699
							}
						},
						{
							"id": 7393,
							"name": "goForward",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7394,
									"name": "goForward",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame forward one page using the browser’s\nnavigation history."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.goForward",
										"id": 1697
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 920,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.goForward",
								"id": 1697
							}
						},
						{
							"id": 7618,
							"name": "isDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7619,
									"name": "isDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not the element would be visible to an actual user.\nThis means that the following types of elements are considered to be not\ndisplayed:",
										"text": "1. Elements with `display: none`\n2. Elements with `visibility: hidden`\n3. Elements positioned outside of the viewport that cannot be scrolled\n   into view\n4. Elements with `opacity: 0`\n5. Elements with no `offsetWidth` or `offsetHeight`\n"
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.isDisplayed",
										"id": 1922
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1786,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.isDisplayed",
								"id": 1922
							}
						},
						{
							"id": 7602,
							"name": "isEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7603,
									"name": "isEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not a form element can be interacted with."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.isEnabled",
										"id": 1906
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1699,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.isEnabled",
								"id": 1906
							}
						},
						{
							"id": 7415,
							"name": "isImeActivated",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7416,
									"name": "isImeActivated",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not an input method editor is currently active in the\nremote environment. As of April 2014, no known remote environments\nsupport IME functions."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.isImeActivated",
										"id": 1719
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1026,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.isImeActivated",
								"id": 1719
							}
						},
						{
							"id": 7600,
							"name": "isSelected",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7601,
									"name": "isSelected",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not a form element is currently selected (for\ndrop-down options and radio buttons), or whether or not the element is\ncurrently checked (for checkboxes)."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.isSelected",
										"id": 1904
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1692,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.isSelected",
								"id": 1904
							}
						},
						{
							"id": 7541,
							"name": "longTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7542,
									"name": "longTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a long-tap gesture on an element.",
										"tags": [
											{
												"tag": "method",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 7543,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The element to long-tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.longTap",
										"id": 1845
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1468,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.longTap",
								"id": 1845
							}
						},
						{
							"id": 7460,
							"name": "maximizeWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7461,
									"name": "maximizeWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Maximises a window according to the platform’s window system behaviour."
									},
									"parameters": [
										{
											"id": 7462,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the window to resize. See\n[[Command.Command.switchToWindow] to learn about valid window names.\nOmit this argument to resize the currently focused window.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.maximizeWindow",
										"id": 1764
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1183,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.maximizeWindow",
								"id": 1764
							}
						},
						{
							"id": 7526,
							"name": "moveFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7527,
									"name": "moveFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the last depressed finger to a new point on the touch screen."
									},
									"parameters": [
										{
											"id": 7528,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to move to, maybe in device pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7529,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to move to, maybe in device pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.moveFinger",
										"id": 1830
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1423,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.moveFinger",
								"id": 1830
							}
						},
						{
							"id": 7496,
							"name": "moveMouseTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7497,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the remote environment’s mouse cursor to the specified element or\nrelative position. If the element is outside of the viewport, the remote\ndriver will attempt to scroll it into view automatically."
									},
									"parameters": [
										{
											"id": 7498,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The element to move the mouse to. If x-offset and\ny-offset are not specified, the mouse will be moved to the centre of the\nelement.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 7499,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The x-offset of the cursor, maybe in CSS pixels, relative\nto the left edge of the specified element’s bounding client rectangle.\nIf no element is specified, the offset is relative to the previous\nposition of the mouse, or to the left edge of the page’s root element if\nthe mouse was never moved before.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 7500,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The y-offset of the cursor, maybe in CSS pixels, relative\nto the top edge of the specified element’s bounding client rectangle. If\nno element is specified, the offset is relative to the previous position\nof the mouse, or to the top edge of the page’s root element if the mouse\nwas never moved before.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.moveMouseTo",
										"id": 1800
									}
								},
								{
									"id": 7501,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7502,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 7503,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.moveMouseTo",
										"id": 1800
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1328,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1333,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1337,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.moveMouseTo",
								"id": 1800
							}
						},
						{
							"id": 7518,
							"name": "pressFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7519,
									"name": "pressFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Depresses a new finger at the given point on a touch screen device\nwithout releasing it."
									},
									"parameters": [
										{
											"id": 7520,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to press, maybe in device pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7521,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to press, maybe in device pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.pressFinger",
										"id": 1822
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1400,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.pressFinger",
								"id": 1822
							}
						},
						{
							"id": 7479,
							"name": "pressKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7480,
									"name": "pressKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the focused window/frame/element."
									},
									"parameters": [
										{
											"id": 7481,
											"name": "keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type in the remote environment. It is possible\nto type keys that do not have normal character representations (modifier\nkeys, function keys, etc.) as well as keys that have two different\nrepresentations on a typical US-ASCII keyboard (numpad keys); use the\nvalues from [[keys]] to type these special characters. Any modifier keys\nthat are activated by this call will persist until they are deactivated.\nTo deactivate a modifier key, type the same modifier key a second time,\nor send `\\uE000` ('NULL') to deactivate all currently active modifier\nkeys.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.pressKeys",
										"id": 1783
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1254,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.pressKeys",
								"id": 1783
							}
						},
						{
							"id": 7507,
							"name": "pressMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7508,
									"name": "pressMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Depresses a mouse button without releasing it."
									},
									"parameters": [
										{
											"id": 7509,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to press. See [[Command.Command.click]] for\navailable options.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.pressMouseButton",
										"id": 1811
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1361,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.pressMouseButton",
								"id": 1811
							}
						},
						{
							"id": 7566,
							"name": "quit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7567,
									"name": "quit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Terminates the session. No more commands will be accepted by the remote\nafter this point."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.quit",
										"id": 1870
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1560,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.quit",
								"id": 1870
							}
						},
						{
							"id": 7397,
							"name": "refresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7398,
									"name": "refresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reloads the current browser window/frame."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.refresh",
										"id": 1701
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 935,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.refresh",
								"id": 1701
							}
						},
						{
							"id": 7522,
							"name": "releaseFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7523,
									"name": "releaseFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Releases whatever finger exists at the given point on a touch screen\ndevice."
									},
									"parameters": [
										{
											"id": 7524,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate where a finger is pressed, maybe in\ndevice pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7525,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate where a finger is pressed, maybe in\ndevice pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.releaseFinger",
										"id": 1826
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1413,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.releaseFinger",
								"id": 1826
							}
						},
						{
							"id": 7510,
							"name": "releaseMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7511,
									"name": "releaseMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Releases a previously depressed mouse button."
									},
									"parameters": [
										{
											"id": 7512,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to press. See [[Command.Command.click]] for\navailable options.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.releaseMouseButton",
										"id": 1814
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1371,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.releaseMouseButton",
								"id": 1814
							}
						},
						{
							"id": 7465,
							"name": "setCookie",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7466,
									"name": "setCookie",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a cookie on the current page."
									},
									"parameters": [
										{
											"id": 7467,
											"name": "cookie",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WebDriverCookie",
												"id": 660
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setCookie",
										"id": 1769
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1197,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setCookie",
								"id": 1769
							}
						},
						{
							"id": 7574,
							"name": "setExecuteAsyncTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7575,
									"name": "setExecuteAsyncTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Command.Command.executeAsync]] calls."
									},
									"parameters": [
										{
											"id": 7576,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setExecuteAsyncTimeout",
										"id": 1878
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1590,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setExecuteAsyncTimeout",
								"id": 1878
							}
						},
						{
							"id": 7579,
							"name": "setFindTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7580,
									"name": "setFindTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Command.Command.find]] calls."
									},
									"parameters": [
										{
											"id": 7581,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setFindTimeout",
										"id": 1883
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1606,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setFindTimeout",
								"id": 1883
							}
						},
						{
							"id": 7556,
							"name": "setGeolocation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7557,
									"name": "setGeolocation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the geographical location of the remote environment."
									},
									"parameters": [
										{
											"id": 7558,
											"name": "location",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Latitude and longitude are specified using standard\nWGS84 decimal latitude/longitude. Altitude is specified as meters above\nthe WGS84 ellipsoid. Not all environments support altitude.\n"
											},
											"type": {
												"type": "reference",
												"name": "Geolocation",
												"id": 652
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setGeolocation",
										"id": 1860
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1516,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setGeolocation",
								"id": 1860
							}
						},
						{
							"id": 7286,
							"name": "setHeartbeatInterval",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7287,
									"name": "setHeartbeatInterval",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7288,
											"name": "delay",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 992,
									"character": 22
								}
							]
						},
						{
							"id": 7484,
							"name": "setOrientation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7485,
									"name": "setOrientation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the screen orientation."
									},
									"parameters": [
										{
											"id": 7486,
											"name": "orientation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Either 'portrait' or 'landscape'.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "portrait"
													},
													{
														"type": "stringLiteral",
														"value": "landscape"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setOrientation",
										"id": 1788
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1270,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setOrientation",
								"id": 1788
							}
						},
						{
							"id": 7584,
							"name": "setPageLoadTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7585,
									"name": "setPageLoadTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Command.Command.get]] calls."
									},
									"parameters": [
										{
											"id": 7586,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setPageLoadTimeout",
										"id": 1888
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1622,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setPageLoadTimeout",
								"id": 1888
							}
						},
						{
							"id": 7380,
							"name": "setTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7381,
									"name": "setTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the value of a timeout for the session."
									},
									"parameters": [
										{
											"id": 7382,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of timeout to set. One of 'script', 'implicit', or\n'page load'.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7383,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of time to use for the timeout, in milliseconds. A\nvalue of 0 will cause operations to time out immediately.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setTimeout",
										"id": 1684
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 881,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setTimeout",
								"id": 1684
							}
						},
						{
							"id": 7446,
							"name": "setWindowPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7447,
									"name": "setWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the position of a window.",
										"text": "Note that this method is not part of the W3C WebDriver standard.\n"
									},
									"parameters": [
										{
											"id": 7448,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to move to, in CSS pixels, relative to\nthe left edge of the primary monitor.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7449,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to move to, in CSS pixels, relative to\nthe top edge of the primary monitor.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setWindowPosition",
										"id": 1750
									}
								},
								{
									"id": 7450,
									"name": "setWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7451,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7452,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7453,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setWindowPosition",
										"id": 1750
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1145,
									"character": 19
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1146,
									"character": 19
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1151,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setWindowPosition",
								"id": 1750
							}
						},
						{
							"id": 7432,
							"name": "setWindowSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7433,
									"name": "setWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the dimensions of a window."
									},
									"parameters": [
										{
											"id": 7434,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new width of the window, in CSS pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7435,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new height of the window, in CSS pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setWindowSize",
										"id": 1736
									}
								},
								{
									"id": 7436,
									"name": "setWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7437,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7438,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7439,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setWindowSize",
										"id": 1736
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1104,
									"character": 15
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1105,
									"character": 15
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1110,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setWindowSize",
								"id": 1736
							}
						},
						{
							"id": 7329,
							"name": "sleep",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7330,
									"name": "sleep",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Pauses execution of the next command in the chain for `ms` milliseconds."
									},
									"parameters": [
										{
											"id": 7331,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Time to delay, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.sleep",
										"id": 1633
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 501,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.sleep",
								"id": 1633
							}
						},
						{
							"id": 7589,
							"name": "submit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7590,
									"name": "submit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Submits the element, if it is a form, or the form belonging to the\nelement, if it is a form element."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.submit",
										"id": 1893
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1639,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.submit",
								"id": 1893
							}
						},
						{
							"id": 7422,
							"name": "switchToFrame",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7423,
									"name": "switchToFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused frame to a new frame."
									},
									"parameters": [
										{
											"id": 7424,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The frame to switch to. In most environments, a number or\nstring value corresponds to a key in the `window.frames` object of the\ncurrently active frame. If `null`, the topmost (default) frame will be\nused. If an Element is provided, it must correspond to a `<frame>` or\n`<iframe>` element.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Element",
														"id": 1415
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.switchToFrame",
										"id": 1726
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1057,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.switchToFrame",
								"id": 1726
							}
						},
						{
							"id": 7428,
							"name": "switchToParentFrame",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7429,
									"name": "switchToParentFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused frame to the parent of the currently\nfocused frame."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.switchToParentFrame",
										"id": 1732
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1080,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.switchToParentFrame",
								"id": 1732
							}
						},
						{
							"id": 7425,
							"name": "switchToWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7426,
									"name": "switchToWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused window to a new window.",
										"text": "In environments using the JsonWireProtocol, this value corresponds to\nthe `window.name` property of a window.\n"
									},
									"parameters": [
										{
											"id": 7427,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The handle of the window to switch to. In mobile\nenvironments and environments based on the W3C WebDriver standard, this\nshould be a handle as returned by\n[[Command.Command.getAllWindowHandles]].\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.switchToWindow",
										"id": 1729
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1072,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.switchToWindow",
								"id": 1729
							}
						},
						{
							"id": 7409,
							"name": "takeScreenshot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7410,
									"name": "takeScreenshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a screenshot of the focused window and returns it in PNG format."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Buffer"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.takeScreenshot",
										"id": 1713
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1000,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.takeScreenshot",
								"id": 1713
							}
						},
						{
							"id": 7515,
							"name": "tap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7516,
									"name": "tap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Taps an element on a touch screen device. If the element is outside of\nthe viewport, the remote driver will attempt to scroll it into view\nautomatically."
									},
									"parameters": [
										{
											"id": 7517,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element to tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.tap",
										"id": 1819
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1389,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.tap",
								"id": 1819
							}
						},
						{
							"id": 7335,
							"name": "then",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7336,
									"name": "then",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a callback to be invoked once the previously chained operation has\ncompleted.",
										"text": "This method is compatible with the `Promise#then` API, with two\nimportant differences:\n\n1. The context (`this`) of the callback is set to the Command object,\n   rather than being `undefined`. This allows promise helpers to be\n   created that can retrieve the appropriate session and element\n   contexts for execution.\n2. A second non-standard `setContext` argument is passed to the\n   callback. This `setContext` function can be called at any time before\n   the callback fulfills its return value and expects either a single\n   [[Element]] or an array of Elements to be provided as its only\n   argument. The provided element(s) will be used as the context for\n   subsequent element method invocations (`click`, etc.). If the\n   `setContext` method is not called, the element context from the\n   parent will be passed through unmodified.\n"
									},
									"typeParameter": [
										{
											"id": 7337,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 7338,
											"name": "R",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 7339,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 7340,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 7341,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 7342,
																			"name": "this",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Command",
																				"id": 1591,
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "typeParameter",
																						"name": "P"
																					},
																					{
																						"type": "typeParameter",
																						"name": "StringResult",
																						"constraint": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "array",
																									"elementType": {
																										"type": "intrinsic",
																										"name": "string"
																									}
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		{
																			"id": 7343,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 7344,
																			"name": "setContext",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "SetContextMethod",
																				"id": 2030
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "U"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "U"
																					}
																				]
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 571,
																	"character": 7
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 7345,
											"name": "errback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 7346,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 7347,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 7348,
																			"name": "this",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Command",
																				"id": 1591,
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "typeParameter",
																						"name": "P"
																					},
																					{
																						"type": "typeParameter",
																						"name": "StringResult",
																						"constraint": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "array",
																									"elementType": {
																										"type": "intrinsic",
																										"name": "string"
																									}
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		{
																			"id": 7349,
																			"name": "error",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "R"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "R"
																					}
																				]
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 579,
																	"character": 7
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "typeParameter",
														"name": "U"
													},
													{
														"type": "typeParameter",
														"name": "R"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.then",
										"id": 1639
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 569,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.then",
								"id": 1639
							}
						},
						{
							"id": 7530,
							"name": "touchScroll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7531,
									"name": "touchScroll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Scrolls the currently focused window on a touch screen device."
									},
									"parameters": [
										{
											"id": 7532,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An optional x-offset, relative to the left edge of the\nelement, in CSS pixels. If no element is specified, the offset is\nrelative to the previous scroll position of the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 7533,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An optional y-offset, relative to the top edge of the\nelement, in CSS pixels. If no element is specified, the offset is\nrelative to the previous scroll position of the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.touchScroll",
										"id": 1834
									}
								},
								{
									"id": 7534,
									"name": "touchScroll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7535,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 7536,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 7537,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.touchScroll",
										"id": 1834
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1442,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1443,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1448,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.touchScroll",
								"id": 1834
							}
						},
						{
							"id": 7593,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7594,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the element. This method works the same as the\n[[Command.Command.pressKeys]] method except that any modifier keys are\nautomatically released at the end of the command. This method should be\nused instead of [[Command.Command.pressKeys]] to type filenames into\nfile upload fields.",
										"text": "Since 1.5, if the WebDriver server supports remote file uploads, and you\ntype a path to a file on your local computer, that file will be\ntransparently uploaded to the remote server and the remote filename will\nbe typed instead. If you do not want to upload local files, use\n[[Command.Command.pressKeys]] instead.\n"
									},
									"parameters": [
										{
											"id": 7595,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type in the remote environment. See\n[[Command.Command.pressKeys]] for more information.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.type",
										"id": 1897
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1668,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.type",
								"id": 1897
							}
						},
						{
							"id": 7489,
							"name": "typeInPrompt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7490,
									"name": "typeInPrompt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the currently active prompt pop-up."
									},
									"parameters": [
										{
											"id": 7491,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type into the pop-up’s input box.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.typeInPrompt",
										"id": 1793
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1286,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.typeInPrompt",
								"id": 1793
							}
						},
						{
							"id": 7568,
							"name": "waitForDeleted",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7569,
									"name": "waitForDeleted",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements findable in the currently active window/frame\nusing the given strategy and value to be destroyed."
									},
									"parameters": [
										{
											"id": 7570,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Command.Command.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 7571,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Command.Command.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.waitForDeleted",
										"id": 814
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.waitForDeleted",
										"id": 1872
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1574,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.waitForDeleted",
								"id": 814
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.waitForDeleted",
								"id": 1872
							}
						},
						{
							"id": 7702,
							"name": "waitForDeletedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7703,
									"name": "waitForDeletedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS class\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 7704,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByClassName",
										"id": 887
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 276,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByClassName",
								"id": 887
							}
						},
						{
							"id": 7705,
							"name": "waitForDeletedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7706,
									"name": "waitForDeletedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 7707,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByCssSelector",
										"id": 890
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 286,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByCssSelector",
								"id": 890
							}
						},
						{
							"id": 7708,
							"name": "waitForDeletedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7709,
									"name": "waitForDeletedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given ID to be\ndestroyed."
									},
									"parameters": [
										{
											"id": 7710,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedById",
										"id": 893
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 296,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedById",
								"id": 893
							}
						},
						{
							"id": 7714,
							"name": "waitForDeletedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7715,
									"name": "waitForDeletedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 7716,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByLinkText",
										"id": 899
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 316,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByLinkText",
								"id": 899
							}
						},
						{
							"id": 7711,
							"name": "waitForDeletedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7712,
									"name": "waitForDeletedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given name\nattribute to be destroyed."
									},
									"parameters": [
										{
											"id": 7713,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByName",
										"id": 896
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 306,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByName",
								"id": 896
							}
						},
						{
							"id": 7717,
							"name": "waitForDeletedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7718,
									"name": "waitForDeletedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element partially matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 7719,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByPartialLinkText",
										"id": 902
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 326,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByPartialLinkText",
								"id": 902
							}
						},
						{
							"id": 7720,
							"name": "waitForDeletedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7721,
									"name": "waitForDeletedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given HTML tag\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 7722,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByTagName",
										"id": 905
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 336,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByTagName",
								"id": 905
							}
						},
						{
							"id": 7723,
							"name": "waitForDeletedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7724,
									"name": "waitForDeletedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given XPath\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 7725,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByXpath",
										"id": 908
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 346,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByXpath",
								"id": 908
							}
						},
						{
							"id": 7299,
							"name": "addElementMethod",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7300,
									"name": "addElementMethod",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Augments `target` with a method that will call `key` on all context\nelements stored within `target`. This can be used to easily add new\nmethods from any custom object that implements the Element API to any\ntarget object that implements the Command API.",
										"text": "Functions that are copied may have the following extra properties in\norder to change the way that Command works with these functions:\n\n* `createsContext` (boolean): If this property is specified, the return\n  value from the function will be used as the new context for the\n  returned Command.\n"
									},
									"typeParameter": [
										{
											"id": 7301,
											"name": "Us",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 7302,
											"name": "Ps",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 7303,
											"name": "Ss",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 7304,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Command",
												"id": 1591,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Us"
													},
													{
														"type": "typeParameter",
														"name": "Ps"
													},
													{
														"type": "typeParameter",
														"name": "Ss",
														"constraint": {
															"type": "union",
															"types": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 7305,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.addElementMethod",
										"id": 1603
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 285,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.addElementMethod",
								"id": 1603
							}
						},
						{
							"id": 7291,
							"name": "addSessionMethod",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7292,
									"name": "addSessionMethod",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Augments `target` with a conversion of the `originalFn` method that\nenables its use with a Command object. This can be used to easily add\nnew methods from any custom object that implements the Session API to\nany target object that implements the Command API.",
										"text": "Functions that are copied may have the following extra properties in\norder to change the way that Command works with these functions:\n\n* `createsContext` (boolean): If this property is specified, the return\n  value from the function will be used as the new context for the\n  returned Command.\n* `usesElement` (boolean): If this property is specified, element(s)\n  from the current context will be used as the first argument to the\n  function, if the explicitly specified first argument is not already an\n  element.\n"
									},
									"typeParameter": [
										{
											"id": 7293,
											"name": "Us",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 7294,
											"name": "Ps",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 7295,
											"name": "Ss",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 7296,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Command",
												"id": 1591,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Us"
													},
													{
														"type": "typeParameter",
														"name": "Ps"
													},
													{
														"type": "typeParameter",
														"name": "Ss",
														"constraint": {
															"type": "union",
															"types": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 7297,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7298,
											"name": "originalFn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.addSessionMethod",
										"id": 1595
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 196,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.addSessionMethod",
								"id": 1595
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								7306
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7284,
								7285
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								7325,
								7321,
								7327,
								7323
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								7492,
								7419,
								7363,
								7350,
								7468,
								7598,
								7587,
								7504,
								7430,
								7417,
								7470,
								7494,
								7513,
								7538,
								7332,
								7615,
								7399,
								7404,
								7358,
								7365,
								7369,
								7657,
								7660,
								7666,
								7663,
								7669,
								7672,
								7675,
								7633,
								7636,
								7639,
								7645,
								7642,
								7648,
								7651,
								7654,
								7373,
								7678,
								7681,
								7684,
								7690,
								7687,
								7693,
								7696,
								7699,
								7544,
								7390,
								7477,
								7413,
								7487,
								7386,
								7564,
								7607,
								7411,
								7562,
								7630,
								7463,
								7388,
								7384,
								7572,
								7577,
								7554,
								7559,
								7482,
								7582,
								7473,
								7475,
								7620,
								7611,
								7625,
								7604,
								7596,
								7377,
								7591,
								7454,
								7440,
								7395,
								7393,
								7618,
								7602,
								7415,
								7600,
								7541,
								7460,
								7526,
								7496,
								7518,
								7479,
								7507,
								7566,
								7397,
								7522,
								7510,
								7465,
								7574,
								7579,
								7556,
								7286,
								7484,
								7584,
								7380,
								7446,
								7432,
								7329,
								7589,
								7422,
								7428,
								7425,
								7409,
								7515,
								7335,
								7530,
								7593,
								7489,
								7568,
								7702,
								7705,
								7708,
								7714,
								7711,
								7717,
								7720,
								7723,
								7299,
								7291
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 989,
							"character": 23
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Command",
							"id": 1591,
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "PromiseLike",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				},
				{
					"id": 7726,
					"name": "TunnelMessage",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 7728,
							"name": "progress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 997,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "DownloadProgressEvent",
								"id": 2424
							}
						},
						{
							"id": 7729,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 998,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 7727,
							"name": "tunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/executors/Node.ts",
									"line": 996,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Tunnel",
								"id": 2303
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7728,
								7729,
								7727
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 995,
							"character": 30
						}
					]
				},
				{
					"id": 7780,
					"name": "process",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 57,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Process"
					},
					"defaultValue": " global.process"
				},
				{
					"id": 7787,
					"name": "getNormalizedBrowserName",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 7788,
							"name": "getNormalizedBrowserName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 7789,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 1089,
							"character": 33
						}
					]
				},
				{
					"id": 7784,
					"name": "isLocalEnvironment",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 7785,
							"name": "isLocalEnvironment",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 7786,
									"name": "environment",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EnvironmentSpec",
										"id": 5090
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 1085,
							"character": 27
						}
					]
				},
				{
					"id": 7781,
					"name": "isRemoteEnvironment",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 7782,
							"name": "isRemoteEnvironment",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 7783,
									"name": "environment",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EnvironmentSpec",
										"id": 5090
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/executors/Node.ts",
							"line": 1081,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						7753,
						7070
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						7730,
						7280,
						7770,
						7283,
						7726
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						7780
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						7787,
						7784,
						7781
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/executors/Node.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3953,
			"name": "\"core/lib/interfaces/bdd\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/interfaces/bdd.ts",
			"children": [
				{
					"id": 3954,
					"name": "BddInterface",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3966,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3967,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3968,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "SuiteLifecycleFunction",
														"id": 3636
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TddLifecycleInterface.after",
										"id": 3902
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 42,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TddLifecycleInterface.after",
								"id": 3902
							}
						},
						{
							"id": 3972,
							"name": "afterEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3973,
									"name": "afterEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3974,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "TestLifecycleFunction",
														"id": 3640
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TddLifecycleInterface.afterEach",
										"id": 3908
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 44,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TddLifecycleInterface.afterEach",
								"id": 3908
							}
						},
						{
							"id": 3963,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3964,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3965,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "SuiteLifecycleFunction",
														"id": 3636
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TddLifecycleInterface.before",
										"id": 3899
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 41,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TddLifecycleInterface.before",
								"id": 3899
							}
						},
						{
							"id": 3969,
							"name": "beforeEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3970,
									"name": "beforeEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3971,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "TestLifecycleFunction",
														"id": 3640
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TddLifecycleInterface.beforeEach",
										"id": 3905
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 43,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TddLifecycleInterface.beforeEach",
								"id": 3905
							}
						},
						{
							"id": 3955,
							"name": "describe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3956,
									"name": "describe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3957,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3958,
											"name": "factory",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TddSuiteFactory",
												"id": 3911
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/bdd.ts",
									"line": 16,
									"character": 10
								}
							]
						},
						{
							"id": 3959,
							"name": "it",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3960,
									"name": "it",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3961,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3962,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TestFunction",
												"id": 3540
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/bdd.ts",
									"line": 17,
									"character": 4
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3966,
								3972,
								3963,
								3969,
								3955,
								3959
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/bdd.ts",
							"line": 15,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TddLifecycleInterface",
							"id": 3898
						}
					]
				},
				{
					"id": 3975,
					"name": "getInterface",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3976,
							"name": "getInterface",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3977,
									"name": "executor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BddInterface",
								"id": 3954
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/bdd.ts",
							"line": 24,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3954
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						3975
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/interfaces/bdd.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4527,
			"name": "\"core/lib/interfaces/benchmark\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/interfaces/benchmark.ts",
			"comment": {
				"shortText": "Interface for registering benchmark suites"
			},
			"children": [
				{
					"id": 4528,
					"name": "BenchmarkInterface",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4533,
							"name": "async",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/benchmark.ts",
									"line": 55,
									"character": 7
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4534,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 4535,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 4536,
													"name": "testFunction",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "BenchmarkDeferredTestFunction",
														"id": 4046
													}
												},
												{
													"id": 4537,
													"name": "numCallsUntilResolution",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BenchmarkTestFunction",
												"id": 4039
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/interfaces/benchmark.ts",
											"line": 55,
											"character": 8
										}
									]
								}
							}
						},
						{
							"id": 4529,
							"name": "registerSuite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4530,
									"name": "registerSuite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4531,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 4532,
											"name": "descriptor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BenchmarkSuiteDescriptor",
														"id": 4541
													},
													{
														"type": "reference",
														"name": "BenchmarkSuiteFactory",
														"id": 4544
													},
													{
														"type": "reference",
														"name": "BenchmarkTests",
														"id": 4538
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/benchmark.ts",
									"line": 47,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4533
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4529
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/benchmark.ts",
							"line": 46,
							"character": 35
						}
					]
				},
				{
					"id": 4541,
					"name": "BenchmarkSuiteDescriptor",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4542,
							"name": "tests",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/benchmark.ts",
									"line": 70,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkTests",
								"id": 4538
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4542
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/benchmark.ts",
							"line": 68,
							"character": 41
						}
					],
					"extendedTypes": [
						{
							"type": "reflection",
							"declaration": {
								"id": 4543,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"sources": [
									{
										"fileName": "src/core/lib/interfaces/benchmark.ts",
										"line": 69,
										"character": 9
									}
								]
							}
						}
					]
				},
				{
					"id": 4544,
					"name": "BenchmarkSuiteFactory",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4545,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "BenchmarkSuiteDescriptor",
										"id": 4541
									},
									{
										"type": "reference",
										"name": "BenchmarkTests",
										"id": 4538
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/benchmark.ts",
							"line": 73,
							"character": 38
						}
					]
				},
				{
					"id": 4538,
					"name": "BenchmarkTests",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 4539,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 4540,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "BenchmarkSuiteDescriptor",
										"id": 4541
									},
									{
										"type": "reference",
										"name": "BenchmarkTestFunction",
										"id": 4039
									},
									{
										"type": "reference",
										"name": "BenchmarkTests",
										"id": 4538
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/benchmark.ts",
							"line": 61,
							"character": 31
						}
					]
				},
				{
					"id": 4559,
					"name": "_registerSuite",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 4560,
							"name": "_registerSuite",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4561,
									"name": "executor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									}
								},
								{
									"id": 4562,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4563,
									"name": "descriptorOrFactory",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BenchmarkSuiteDescriptor",
												"id": 4541
											},
											{
												"type": "reference",
												"name": "BenchmarkSuiteFactory",
												"id": 4544
											},
											{
												"type": "reference",
												"name": "BenchmarkTests",
												"id": 4538
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/benchmark.ts",
							"line": 77,
							"character": 23
						}
					]
				},
				{
					"id": 4550,
					"name": "getInterface",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4551,
							"name": "getInterface",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Interface factory used by Executor"
							},
							"parameters": [
								{
									"id": 4552,
									"name": "executor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4553,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 4558,
											"name": "async",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/interfaces/benchmark.ts",
													"line": 42,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "async",
												"id": 4000
											},
											"defaultValue": " BenchmarkTest.async"
										},
										{
											"id": 4554,
											"name": "registerSuite",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 4555,
													"name": "registerSuite",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 4556,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 4557,
															"name": "descriptorOrFactory",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"name": "BenchmarkSuiteDescriptor",
																		"id": 4541
																	},
																	{
																		"type": "reference",
																		"name": "BenchmarkSuiteFactory",
																		"id": 4544
																	},
																	{
																		"type": "reference",
																		"name": "BenchmarkTests",
																		"id": 4538
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/interfaces/benchmark.ts",
													"line": 32,
													"character": 17
												}
											]
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												4558
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												4554
											]
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/benchmark.ts",
							"line": 30,
							"character": 28
						}
					]
				},
				{
					"id": 4546,
					"name": "registerSuite",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4547,
							"name": "registerSuite",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Importable interface that uses the currently installed global executor"
							},
							"parameters": [
								{
									"id": 4548,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 4549,
									"name": "descriptorOrFactory",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BenchmarkSuiteDescriptor",
												"id": 4541
											},
											{
												"type": "reference",
												"name": "BenchmarkSuiteFactory",
												"id": 4544
											},
											{
												"type": "reference",
												"name": "BenchmarkTests",
												"id": 4538
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/benchmark.ts",
							"line": 17,
							"character": 37
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						4528,
						4541,
						4544,
						4538
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						4559,
						4550,
						4546
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/interfaces/benchmark.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3829,
			"name": "\"core/lib/interfaces/object\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/interfaces/object.ts",
			"comment": {
				"shortText": "This is the object interface for registering suites. Typically it will be\naccessed using [[lib/executors/Executor.Executor.getInterface]], like:",
				"text": "```js\nconst { registerSuite } = intern.getInterface('object');\n```\n\nIt may also be imported as a module, like\n\n```js\nimport registerSuite from 'intern/lib/interfaces/object';\n```\n\nSuites are described using objects. The object structure is a subset of suite\nproperties, specifically name, the lifecycle methods, and tests.\n\n```js\nregisterSuite('foo', {\n    before() {},\n    afterEach() {},\n    tests: {\n        bar() {},\n        baz() {}\n    }\n});\n```\n\nTests may also describe sub-suites:\n\n```js\nregisterSuite('foo', {\n    tests: {\n        fooStuff {\n            tests: {\n                bar() {},\n                baz() {}\n            }\n        }\n    }\n});\n```\n\nSub-suites don't need name properties, and may also omit the 'tests' nesting\nif no lifecycle functions are in use. The rule is that if a 'tests' property\nisn't in the sub-suite object, then every property is assumed to refer to a\ntest.\n\n```js\nregisterSuite('foo', {\n    fooStuff {\n        bar() {},\n        baz() {}\n    }\n});\n```\n"
			},
			"children": [
				{
					"id": 3830,
					"name": "ObjectInterface",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3831,
							"name": "registerSuite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3832,
									"name": "registerSuite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3833,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3834,
											"name": "mainDescriptor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ObjectSuiteDescriptor",
														"id": 3838
													},
													{
														"type": "reference",
														"name": "ObjectSuiteFactory",
														"id": 3841
													},
													{
														"type": "reference",
														"name": "Tests",
														"id": 3835
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/object.ts",
									"line": 89,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3831
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/object.ts",
							"line": 88,
							"character": 32
						}
					]
				},
				{
					"id": 3838,
					"name": "ObjectSuiteDescriptor",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3839,
							"name": "tests",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/object.ts",
									"line": 100,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Tests",
								"id": 3835
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3839
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/object.ts",
							"line": 99,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reflection",
							"declaration": {
								"id": 3840,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"sources": [
									{
										"fileName": "src/core/lib/interfaces/object.ts",
										"line": 99,
										"character": 46
									}
								]
							}
						}
					]
				},
				{
					"id": 3841,
					"name": "ObjectSuiteFactory",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3842,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ObjectSuiteDescriptor",
										"id": 3838
									},
									{
										"type": "reference",
										"name": "Tests",
										"id": 3835
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/object.ts",
							"line": 103,
							"character": 35
						}
					]
				},
				{
					"id": 3835,
					"name": "Tests",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 3836,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 3837,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ObjectSuiteDescriptor",
										"id": 3838
									},
									{
										"type": "reference",
										"name": "TestFunction",
										"id": 3540
									},
									{
										"type": "reference",
										"name": "Tests",
										"id": 3835
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/object.ts",
							"line": 95,
							"character": 22
						}
					]
				},
				{
					"id": 3871,
					"name": "_registerSuite",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 3872,
							"name": "_registerSuite",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3873,
									"name": "executor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									}
								},
								{
									"id": 3874,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3875,
									"name": "descriptorOrFactory",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ObjectSuiteDescriptor",
												"id": 3838
											},
											{
												"type": "reference",
												"name": "ObjectSuiteFactory",
												"id": 3841
											},
											{
												"type": "reference",
												"name": "Tests",
												"id": 3835
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/object.ts",
							"line": 186,
							"character": 23
						}
					]
				},
				{
					"id": 3859,
					"name": "createSuite",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3860,
							"name": "createSuite",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 3861,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Suite",
										"id": 3566
									}
								},
								{
									"id": 3862,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Test",
										"id": 3484
									}
								}
							],
							"parameters": [
								{
									"id": 3863,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3864,
									"name": "parent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Suite",
										"id": 3566
									}
								},
								{
									"id": 3865,
									"name": "descriptor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ObjectSuiteDescriptor",
												"id": 3838
											},
											{
												"type": "reference",
												"name": "Tests",
												"id": 3835
											}
										]
									}
								},
								{
									"id": 3866,
									"name": "SuiteClass",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "S",
										"constraint": {
											"type": "reference",
											"name": "Suite",
											"id": 3566
										}
									}
								},
								{
									"id": 3867,
									"name": "TestClass",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"name": "Test",
											"id": 3484
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Suite",
								"id": 3566
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/object.ts",
							"line": 111,
							"character": 27
						}
					]
				},
				{
					"id": 3847,
					"name": "getInterface",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3848,
							"name": "getInterface",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Interface factory used by Executor"
							},
							"parameters": [
								{
									"id": 3849,
									"name": "executor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3850,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 3851,
											"name": "registerSuite",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 3852,
													"name": "registerSuite",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 3853,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 3854,
															"name": "descriptorOrFactory",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"name": "ObjectSuiteDescriptor",
																		"id": 3838
																	},
																	{
																		"type": "reference",
																		"name": "ObjectSuiteFactory",
																		"id": 3841
																	},
																	{
																		"type": "reference",
																		"name": "Tests",
																		"id": 3835
																	}
																]
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/interfaces/object.ts",
													"line": 79,
													"character": 17
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												3851
											]
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/object.ts",
							"line": 77,
							"character": 28
						}
					]
				},
				{
					"id": 3868,
					"name": "isObjectSuiteDescriptor",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 3869,
							"name": "isObjectSuiteDescriptor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3870,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "ObjectSuiteDescriptor"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/object.ts",
							"line": 182,
							"character": 32
						}
					]
				},
				{
					"id": 3855,
					"name": "isSuiteDescriptorFactory",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3856,
							"name": "isSuiteDescriptorFactory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 3857,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 3858,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "typeParameter",
									"name": "T"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/object.ts",
							"line": 107,
							"character": 40
						}
					]
				},
				{
					"id": 3843,
					"name": "registerSuite",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3844,
							"name": "registerSuite",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Importable interface that uses the currently installed global executor"
							},
							"parameters": [
								{
									"id": 3845,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3846,
									"name": "descriptorOrFactory",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ObjectSuiteDescriptor",
												"id": 3838
											},
											{
												"type": "reference",
												"name": "ObjectSuiteFactory",
												"id": 3841
											},
											{
												"type": "reference",
												"name": "Tests",
												"id": 3835
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/object.ts",
							"line": 67,
							"character": 37
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3830,
						3838,
						3841,
						3835
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						3871,
						3859,
						3847,
						3868,
						3855,
						3843
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/interfaces/object.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3876,
			"name": "\"core/lib/interfaces/tdd\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/interfaces/tdd.ts",
			"comment": {
				"shortText": "This is the TDD interface for registering suites. Typically it will be\naccessed using [[lib/executors/Executor.Executor.getInterface]], like:",
				"text": "```js\nconst { suite, test } = intern.getInterface('tdd');\n```\n\nIt may also be imported as a module, like\n\n```js\nimport { suite, test } from 'intern/lib/interfaces/tdd';\n```\n\nSuites are registered using callback functions, and tests can be registered\nwithin the suite callbacks.\n\n```js\nsuite('foo', () => {\n    before(() => { ... });\n    afterEach(() => { ... });\n    test('bar', () => { ... });\n    test('baz', () => { ... });\n});\n"
			},
			"children": [
				{
					"id": 3877,
					"name": "TddInterface",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3889,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3890,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3891,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "SuiteLifecycleFunction",
														"id": 3636
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TddLifecycleInterface.after",
										"id": 3902
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 42,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TddLifecycleInterface.after",
								"id": 3902
							}
						},
						{
							"id": 3895,
							"name": "afterEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3896,
									"name": "afterEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3897,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "TestLifecycleFunction",
														"id": 3640
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TddLifecycleInterface.afterEach",
										"id": 3908
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 44,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TddLifecycleInterface.afterEach",
								"id": 3908
							}
						},
						{
							"id": 3886,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3887,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3888,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "SuiteLifecycleFunction",
														"id": 3636
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TddLifecycleInterface.before",
										"id": 3899
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 41,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TddLifecycleInterface.before",
								"id": 3899
							}
						},
						{
							"id": 3892,
							"name": "beforeEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3893,
									"name": "beforeEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3894,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "TestLifecycleFunction",
														"id": 3640
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TddLifecycleInterface.beforeEach",
										"id": 3905
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 43,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "TddLifecycleInterface.beforeEach",
								"id": 3905
							}
						},
						{
							"id": 3878,
							"name": "suite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3879,
									"name": "suite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3880,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3881,
											"name": "factory",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TddSuiteFactory",
												"id": 3911
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 36,
									"character": 7
								}
							]
						},
						{
							"id": 3882,
							"name": "test",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3883,
									"name": "test",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3884,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3885,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TestFunction",
												"id": 3540
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 37,
									"character": 6
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3889,
								3895,
								3886,
								3892,
								3878,
								3882
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 35,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TddLifecycleInterface",
							"id": 3898
						}
					]
				},
				{
					"id": 3898,
					"name": "TddLifecycleInterface",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3902,
							"name": "after",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3903,
									"name": "after",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3904,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "SuiteLifecycleFunction",
														"id": 3636
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 42,
									"character": 7
								}
							]
						},
						{
							"id": 3908,
							"name": "afterEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3909,
									"name": "afterEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3910,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "TestLifecycleFunction",
														"id": 3640
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 44,
									"character": 11
								}
							]
						},
						{
							"id": 3899,
							"name": "before",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3900,
									"name": "before",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3901,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "SuiteLifecycleFunction",
														"id": 3636
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 41,
									"character": 8
								}
							]
						},
						{
							"id": 3905,
							"name": "beforeEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3906,
									"name": "beforeEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3907,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"name": "TestLifecycleFunction",
														"id": 3640
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 43,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3902,
								3908,
								3899,
								3905
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 40,
							"character": 38
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "TddInterface",
							"id": 3877
						},
						{
							"type": "reference",
							"name": "BddInterface",
							"id": 3954
						}
					]
				},
				{
					"id": 3911,
					"name": "TddSuiteFactory",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 47,
							"character": 27
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3912,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 3913,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3914,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/interfaces/tdd.ts",
									"line": 47,
									"character": 29
								}
							]
						}
					}
				},
				{
					"id": 3938,
					"name": "currentSuite",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isLet": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 102,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Suite",
								"id": 3566
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 3943,
					"name": "_suite",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 3944,
							"name": "_suite",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3945,
									"name": "executor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									}
								},
								{
									"id": 3946,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3947,
									"name": "factory",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TddSuiteFactory",
										"id": 3911
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 115,
							"character": 15
						}
					]
				},
				{
					"id": 3926,
					"name": "after",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3927,
							"name": "after",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3928,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "SuiteLifecycleFunction",
												"id": 3636
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 67,
							"character": 21
						}
					]
				},
				{
					"id": 3932,
					"name": "afterEach",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3933,
							"name": "afterEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3934,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "TestLifecycleFunction",
												"id": 3640
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 81,
							"character": 25
						}
					]
				},
				{
					"id": 3948,
					"name": "aspect",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 3949,
							"name": "aspect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3950,
									"name": "suite",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Suite",
										"id": 3566
									}
								},
								{
									"id": 3951,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "before"
											},
											{
												"type": "stringLiteral",
												"value": "after"
											},
											{
												"type": "stringLiteral",
												"value": "beforeEach"
											},
											{
												"type": "stringLiteral",
												"value": "afterEach"
											}
										]
									}
								},
								{
									"id": 3952,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "SuiteLifecycleFunction",
												"id": 3636
											},
											{
												"type": "reference",
												"name": "TestLifecycleFunction",
												"id": 3640
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 127,
							"character": 15
						}
					]
				},
				{
					"id": 3923,
					"name": "before",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3924,
							"name": "before",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3925,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "SuiteLifecycleFunction",
												"id": 3636
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 60,
							"character": 22
						}
					]
				},
				{
					"id": 3929,
					"name": "beforeEach",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3930,
							"name": "beforeEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3931,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "TestLifecycleFunction",
												"id": 3640
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 74,
							"character": 26
						}
					]
				},
				{
					"id": 3935,
					"name": "getInterface",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3936,
							"name": "getInterface",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3937,
									"name": "executor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Executor",
										"id": 4575
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TddInterface",
								"id": 3877
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 88,
							"character": 28
						}
					]
				},
				{
					"id": 3939,
					"name": "registerSuite",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 3940,
							"name": "registerSuite",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3941,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3942,
									"name": "factory",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TddSuiteFactory",
										"id": 3911
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 104,
							"character": 22
						}
					]
				},
				{
					"id": 3915,
					"name": "suite",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3916,
							"name": "suite",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3917,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3918,
									"name": "factory",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TddSuiteFactory",
										"id": 3911
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 49,
							"character": 21
						}
					]
				},
				{
					"id": 3919,
					"name": "test",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3920,
							"name": "test",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 3921,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3922,
									"name": "test",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TestFunction",
										"id": 3540
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/interfaces/tdd.ts",
							"line": 53,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3877,
						3898
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3911
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						3938
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						3943,
						3926,
						3932,
						3948,
						3923,
						3929,
						3935,
						3939,
						3915,
						3919
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/interfaces/tdd.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6271,
			"name": "\"core/lib/middleware/filterUrl\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/middleware/filterUrl.ts",
			"children": [
				{
					"id": 6272,
					"name": "filterUrl",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 6273,
							"name": "filterUrl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "RequestHandler"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/middleware/filterUrl.ts",
							"line": 3,
							"character": 33
						}
					]
				},
				{
					"id": 6274,
					"name": "removeLineNumberRequest",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 6275,
							"name": "removeLineNumberRequest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6276,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/middleware/filterUrl.ts",
							"line": 10,
							"character": 32
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6272,
						6274
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/middleware/filterUrl.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6260,
			"name": "\"core/lib/middleware/finalError\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/middleware/finalError.ts",
			"children": [
				{
					"id": 6261,
					"name": "finalError",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 6262,
							"name": "finalError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ErrorRequestHandler"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/middleware/finalError.ts",
							"line": 5,
							"character": 34
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6261
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/middleware/finalError.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6253,
			"name": "\"core/lib/middleware/instrument\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/middleware/instrument.ts",
			"children": [
				{
					"id": 6254,
					"name": "instrument",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 6255,
							"name": "instrument",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6256,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Context",
										"id": 6278
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RequestHandler"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/middleware/instrument.ts",
							"line": 9,
							"character": 34
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6254
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/middleware/instrument.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6267,
			"name": "\"core/lib/middleware/post\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/middleware/post.ts",
			"children": [
				{
					"id": 6268,
					"name": "post",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 6269,
							"name": "post",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6270,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Context",
										"id": 6278
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RequestHandler"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/middleware/post.ts",
							"line": 6,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6268
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/middleware/post.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6263,
			"name": "\"core/lib/middleware/resolveSuites\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/middleware/resolveSuites.ts",
			"children": [
				{
					"id": 6264,
					"name": "resolveSuites",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 6265,
							"name": "resolveSuites",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6266,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Context",
										"id": 6278
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RequestHandler"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/middleware/resolveSuites.ts",
							"line": 7,
							"character": 37
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6264
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/middleware/resolveSuites.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6257,
			"name": "\"core/lib/middleware/unhandled\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/middleware/unhandled.ts",
			"children": [
				{
					"id": 6258,
					"name": "unhandled",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 6259,
							"name": "unhandled",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "RequestHandler"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/middleware/unhandled.ts",
							"line": 4,
							"character": 33
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6258
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/middleware/unhandled.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5137,
			"name": "\"core/lib/node/ErrorFormatter\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/node/ErrorFormatter.ts",
			"children": [
				{
					"id": 5138,
					"name": "NodeErrorFormatter",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 5140,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5141,
									"name": "new NodeErrorFormatter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 5142,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "NodeErrorFormatter",
										"id": 5138
									},
									"overwrites": {
										"type": "reference",
										"name": "ErrorFormatter.__constructor",
										"id": 3671
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/node/ErrorFormatter.ts",
									"line": 13,
									"character": 55
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "ErrorFormatter.__constructor",
								"id": 3671
							}
						},
						{
							"id": 5139,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/node/ErrorFormatter.ts",
									"line": 10,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "ErrorFormatter.executor",
								"id": 3670
							},
							"implementationOf": {
								"type": "reference",
								"name": "ErrorFormatterProperties.executor",
								"id": 3704
							}
						},
						{
							"id": 5150,
							"name": "_createDiff",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5151,
									"name": "_createDiff",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a unified diff to explain the difference between two objects.",
										"returns": "A unified diff formatted string representing the difference\nbetween the two objects.\n"
									},
									"parameters": [
										{
											"id": 5152,
											"name": "actual",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The actual result."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 5153,
											"name": "expected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The expected result."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ErrorFormatter._createDiff",
										"id": 3681
									}
								},
								{
									"id": 5154,
									"name": "_createDiff",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5155,
											"name": "actual",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 5156,
											"name": "expected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ErrorFormatter._createDiff",
										"id": 3681
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 118,
									"character": 23
								},
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 119,
									"character": 23
								},
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 120,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ErrorFormatter._createDiff",
								"id": 3681
							}
						},
						{
							"id": 5157,
							"name": "_formatLine",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5158,
									"name": "_formatLine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return a trace line in a standardized format."
									},
									"parameters": [
										{
											"id": 5159,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 5160,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 5161,
															"name": "func",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/core/lib/common/ErrorFormatter.ts",
																	"line": 151,
																	"character": 36
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "undefined"
																	},
																	{
																		"type": "intrinsic",
																		"name": "string"
																	}
																]
															}
														},
														{
															"id": 5162,
															"name": "source",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/core/lib/common/ErrorFormatter.ts",
																	"line": 151,
																	"character": 53
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																5161,
																5162
															]
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/common/ErrorFormatter.ts",
															"line": 151,
															"character": 29
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ErrorFormatter._formatLine",
										"id": 3688
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 151,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ErrorFormatter._formatLine",
								"id": 3688
							}
						},
						{
							"id": 5143,
							"name": "_getSource",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5144,
									"name": "_getSource",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dereference the source from a traceline."
									},
									"parameters": [
										{
											"id": 5145,
											"name": "tracepath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "ErrorFormatter._getSource",
										"id": 3678
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/node/ErrorFormatter.ts",
									"line": 22,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "ErrorFormatter._getSource",
								"id": 3678
							}
						},
						{
							"id": 5163,
							"name": "_normalizeStackTrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5164,
									"name": "_normalizeStackTrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Parse a stack trace, apply any source mappings, and normalize its format."
									},
									"parameters": [
										{
											"id": 5165,
											"name": "stack",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ErrorFormatter._normalizeStackTrace",
										"id": 3694
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 161,
									"character": 32
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ErrorFormatter._normalizeStackTrace",
								"id": 3694
							}
						},
						{
							"id": 5166,
							"name": "_processChromeTrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5167,
									"name": "_processChromeTrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process Chrome, Opera, and IE traces.",
										"text": "Ex)\n  at Object._updateExpressionOptions (AxiomEditor.js:511)\n  at Object.<anonymous> (AxiomEditor.js:291)\n  at Function.m.emit (dojo.js.uncompressed.js:8875)\n"
									},
									"parameters": [
										{
											"id": 5168,
											"name": "lines",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ErrorFormatter._processChromeTrace",
										"id": 3697
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 201,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ErrorFormatter._processChromeTrace",
								"id": 3697
							}
						},
						{
							"id": 5169,
							"name": "_processSafariTrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5170,
									"name": "_processSafariTrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process Safari and Firefox traces.",
										"text": "Ex)\n  _updateExpressionOptions@http://localhost:8080/AxiomEditor.js:511:49\n  http://localhost:8080/AxiomEditor.js:291:34\n  dispatchEvent@[native code]\n  emit@http://ajax.googleapis.com/ajax/libs/dojo/1.12.2/dojo/dojo.js:118:282\n"
									},
									"parameters": [
										{
											"id": 5171,
											"name": "lines",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ErrorFormatter._processSafariTrace",
										"id": 3700
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 223,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ErrorFormatter._processSafariTrace",
								"id": 3700
							}
						},
						{
							"id": 5146,
							"name": "format",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5147,
									"name": "format",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a full error message from a plain Error object, avoiding\nduplicate error messages that might be caused by different opinions on\nwhat a stack trace should look like.",
										"returns": "A string message describing the error.\n"
									},
									"parameters": [
										{
											"id": 5148,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object describing the error."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Error"
													},
													{
														"type": "reference",
														"name": "InternError",
														"id": 3473
													}
												]
											}
										},
										{
											"id": 5149,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "ErrorFormatter.format",
										"id": 3674
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/common/ErrorFormatter.ts",
									"line": 21,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "ErrorFormatter.format",
								"id": 3674
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								5140
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5139
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								5150,
								5157,
								5143,
								5163,
								5166,
								5169,
								5146
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/node/ErrorFormatter.ts",
							"line": 9,
							"character": 39
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ErrorFormatter",
							"id": 3669
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ErrorFormatterProperties",
							"id": 3703
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						5138
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/node/ErrorFormatter.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5094,
			"name": "\"core/lib/node/process\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/node/process.ts",
			"sources": [
				{
					"fileName": "src/core/lib/node/process.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5095,
			"name": "\"core/lib/node/util\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/node/util.ts",
			"children": [
				{
					"id": 5136,
					"name": "sourceMapRegEx",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 227,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "RegExp"
					},
					"defaultValue": " /^(?:\\/{2}[#@]{1,2}|\\/\\*)\\s+sourceMappingURL\\s*=\\s*(data:(?:[^;]+;)+base64,)?(\\S+)/"
				},
				{
					"id": 5096,
					"name": "expandFiles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 5097,
							"name": "expandFiles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Expand a list of glob patterns into a flat file list. Patterns may be simple\nfile paths or glob patterns. Patterns starting with '!' denote exclusions.\nNote that exclusion rules will not apply to simple paths."
							},
							"parameters": [
								{
									"id": 5098,
									"name": "patterns",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 31,
							"character": 27
						}
					]
				},
				{
					"id": 5099,
					"name": "getConfig",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 5100,
							"name": "getConfig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the user-supplied config data, which may include command line args and a\nconfig file."
							},
							"parameters": [
								{
									"id": 5101,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "A config file"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5102,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 5103,
													"name": "config",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/lib/node/util.ts",
															"line": 73,
															"character": 30
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 5104,
													"name": "file",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/node/util.ts",
															"line": 73,
															"character": 41
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														5103,
														5104
													]
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/node/util.ts",
													"line": 73,
													"character": 22
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 5105,
							"name": "getConfig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5106,
									"name": "argv",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5107,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 5108,
													"name": "config",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/lib/node/util.ts",
															"line": 76,
															"character": 30
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 5109,
													"name": "file",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/node/util.ts",
															"line": 76,
															"character": 41
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														5108,
														5109
													]
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/node/util.ts",
													"line": 76,
													"character": 22
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 5110,
							"name": "getConfig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5111,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5112,
									"name": "argv",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5113,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 5114,
													"name": "config",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/lib/node/util.ts",
															"line": 80,
															"character": 30
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 5115,
													"name": "file",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/node/util.ts",
															"line": 80,
															"character": 41
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														5114,
														5115
													]
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/node/util.ts",
													"line": 80,
													"character": 22
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 71,
							"character": 25
						},
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 74,
							"character": 25
						},
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 77,
							"character": 25
						},
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 81,
							"character": 25
						}
					]
				},
				{
					"id": 5126,
					"name": "isErrnoException",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 5127,
							"name": "isErrnoException",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Indicate whether a value is an ErrnoException"
							},
							"parameters": [
								{
									"id": 5128,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "ErrnoException"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 196,
							"character": 32
						}
					]
				},
				{
					"id": 5116,
					"name": "loadText",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 5117,
							"name": "loadText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Loads a text resource."
							},
							"parameters": [
								{
									"id": 5118,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 143,
							"character": 24
						}
					]
				},
				{
					"id": 5129,
					"name": "mkdirp",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 5130,
							"name": "mkdirp",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Recursively create directories"
							},
							"parameters": [
								{
									"id": 5131,
									"name": "dir",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 203,
							"character": 22
						}
					]
				},
				{
					"id": 5119,
					"name": "normalizePath",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 5120,
							"name": "normalizePath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Normalize a path (e.g., resolve '..')"
							},
							"parameters": [
								{
									"id": 5121,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 159,
							"character": 29
						}
					]
				},
				{
					"id": 5122,
					"name": "readSourceMap",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 5123,
							"name": "readSourceMap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Given a source filename, and optionally code, return the file's source map if\none exists."
							},
							"parameters": [
								{
									"id": 5124,
									"name": "sourceFile",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5125,
									"name": "code",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "RawSourceMap"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 167,
							"character": 29
						}
					]
				},
				{
					"id": 5132,
					"name": "transpileSource",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 5133,
							"name": "transpileSource",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5134,
									"name": "filename",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5135,
									"name": "code",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/node/util.ts",
							"line": 213,
							"character": 31
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						5136
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						5096,
						5099,
						5126,
						5116,
						5129,
						5119,
						5122,
						5132
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/node/util.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4892,
			"name": "\"core/lib/reporters/Benchmark\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Benchmark.ts",
			"children": [
				{
					"id": 4893,
					"name": "BenchmarkReporter",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Benchmark is a reporter that can generate a baseline report and do runtime\ncomparisons against an existing baseline.",
						"text": "**Configuration**\n\nAlong with the default reporter options, Benchmark also supports a `mode`\noption. This can have two values:\n\n* `'baseline'`: Benchmark data will be written to a baseline file when\n  testing is finished\n* `'test'`: Benchmark is compared to a baseline read from a file when testing\n  starts\n\nBaseline data is stored hierarchically by environment and then by test.\n\n**Notation**\n\n* **rme:** relative margin of error -- margin of error as a percentage of the\n  mean margin of error\n* **mean:** mean execution time per function run\n* **hz:** Hertz (number of executions of a function per second). 1/Hz is the\n  mean execution time of function.\n"
					},
					"children": [
						{
							"id": 4902,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4903,
									"name": "new BenchmarkReporter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 4904,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										},
										{
											"id": 4905,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BenchmarkReporterOptions",
												"id": 4994
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkReporter",
										"id": 4893
									},
									"overwrites": {
										"type": "reference",
										"name": "Reporter.__constructor",
										"id": 4850
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 43,
									"character": 34
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Reporter.__constructor",
								"id": 4850
							}
						},
						{
							"id": 4921,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 4925,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4926,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 4927,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 4928,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 4922,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 4923,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 4924,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 4894,
							"name": "baseline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 35,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkBaseline",
								"id": 4970
							}
						},
						{
							"id": 4920,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 11,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Executor",
								"id": 4575
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							}
						},
						{
							"id": 4895,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 37,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkReporterProperties.filename",
								"id": 4988
							}
						},
						{
							"id": 4896,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 39,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkMode",
								"id": 4993
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkReporterProperties.mode",
								"id": 4989
							}
						},
						{
							"id": 4897,
							"name": "sessions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 41,
									"character": 10
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4898,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 4899,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 4900,
													"name": "sessionId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "SessionInfo",
												"id": 4978
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/reporters/Benchmark.ts",
											"line": 41,
											"character": 11
										}
									]
								}
							}
						},
						{
							"id": 4901,
							"name": "thresholds",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 43,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkThresholds",
								"id": 4951
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkReporterProperties.thresholds",
								"id": 4990
							}
						},
						{
							"id": 4929,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 4930,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 4931,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 4932,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkReporterProperties.console",
								"id": 4992
							}
						},
						{
							"id": 4933,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 4934,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 4935,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 4936,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "BenchmarkReporterProperties.output",
								"id": 4991
							}
						},
						{
							"id": 4906,
							"name": "_getSession",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4907,
									"name": "_getSession",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4908,
											"name": "testOrSuite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Test",
														"id": 3484
													},
													{
														"type": "reference",
														"name": "Suite",
														"id": 3566
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SessionInfo",
										"id": 4978
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 76,
									"character": 13
								}
							]
						},
						{
							"id": 4941,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4942,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 4937,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4938,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4939,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 4940,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 4909,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 4910,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 111,
									"character": 8
								}
							]
						},
						{
							"id": 4911,
							"name": "suiteEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 4912,
									"name": "suiteEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4913,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 136,
									"character": 10
								}
							]
						},
						{
							"id": 4914,
							"name": "suiteStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 4915,
									"name": "suiteStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4916,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 166,
									"character": 12
								}
							]
						},
						{
							"id": 4917,
							"name": "testEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 4918,
									"name": "testEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4919,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 205,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								4902
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4921,
								4925,
								4922,
								4923,
								4924,
								4894,
								4920,
								4895,
								4896,
								4897,
								4901
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								4929,
								4933
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4906,
								4941,
								4937,
								4909,
								4911,
								4914,
								4917
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 33,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Reporter",
							"id": 4840
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "BenchmarkReporterProperties",
							"id": 4987
						}
					]
				},
				{
					"id": 4962,
					"name": "BaselineEnvironment",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4963,
							"name": "client",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 369,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4965,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 371,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4966,
							"name": "tests",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 372,
									"character": 7
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4967,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 4968,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 4969,
													"name": "testId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BenchmarkData",
												"id": 4943
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/reporters/Benchmark.ts",
											"line": 372,
											"character": 8
										}
									]
								}
							}
						},
						{
							"id": 4964,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 370,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4963,
								4965,
								4966,
								4964
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 368,
							"character": 36
						}
					]
				},
				{
					"id": 4970,
					"name": "BenchmarkBaseline",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 4971,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 4972,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BaselineEnvironment",
								"id": 4962
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 375,
							"character": 34
						}
					]
				},
				{
					"id": 4943,
					"name": "BenchmarkData",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4945,
							"name": "hz",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 347,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 4946,
							"name": "stats",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 348,
									"character": 7
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4947,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 4950,
											"name": "mean",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Benchmark.ts",
													"line": 351,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 4949,
											"name": "moe",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Benchmark.ts",
													"line": 350,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 4948,
											"name": "rme",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Benchmark.ts",
													"line": 349,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												4950,
												4949,
												4948
											]
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/reporters/Benchmark.ts",
											"line": 348,
											"character": 8
										}
									]
								}
							}
						},
						{
							"id": 4944,
							"name": "times",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 346,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Times"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4945,
								4946,
								4944
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 345,
							"character": 30
						}
					]
				},
				{
					"id": 4987,
					"name": "BenchmarkReporterProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4992,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 4988,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 399,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4989,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 400,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkMode",
								"id": 4993
							}
						},
						{
							"id": 4991,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 4990,
							"name": "thresholds",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 401,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkThresholds",
								"id": 4951
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4992,
								4988,
								4989,
								4991,
								4990
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 398,
							"character": 44
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "BenchmarkReporter",
							"id": 4893
						}
					]
				},
				{
					"id": 4951,
					"name": "BenchmarkThresholds",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4957,
							"name": "fail",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 361,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 4958,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 4960,
													"name": "hz",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/reporters/Benchmark.ts",
															"line": 363,
															"character": 6
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 4961,
													"name": "mean",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/reporters/Benchmark.ts",
															"line": 364,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 4959,
													"name": "rme",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/reporters/Benchmark.ts",
															"line": 362,
															"character": 7
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														4960,
														4961,
														4959
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 4952,
							"name": "warn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 356,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 4953,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 4955,
													"name": "hz",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/reporters/Benchmark.ts",
															"line": 358,
															"character": 6
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 4956,
													"name": "mean",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/reporters/Benchmark.ts",
															"line": 359,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 4954,
													"name": "rme",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/core/lib/reporters/Benchmark.ts",
															"line": 357,
															"character": 7
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														4955,
														4956,
														4954
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4957,
								4952
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 355,
							"character": 36
						}
					]
				},
				{
					"id": 4978,
					"name": "SessionInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4986,
							"name": "environment",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 393,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "SesssionEnvironment",
								"id": 4973
							}
						},
						{
							"id": 4979,
							"name": "suites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 387,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4980,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 4981,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 4982,
													"name": "suiteId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 4983,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 4984,
															"name": "numBenchmarks",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/core/lib/reporters/Benchmark.ts",
																	"line": 389,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 4985,
															"name": "numFailedBenchmarks",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/core/lib/reporters/Benchmark.ts",
																	"line": 390,
																	"character": 25
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																4984,
																4985
															]
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/reporters/Benchmark.ts",
															"line": 388,
															"character": 22
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/reporters/Benchmark.ts",
											"line": 387,
											"character": 9
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4986,
								4979
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 386,
							"character": 28
						}
					]
				},
				{
					"id": 4973,
					"name": "SesssionEnvironment",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4974,
							"name": "client",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 380,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4977,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 383,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4976,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 382,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4975,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Benchmark.ts",
									"line": 381,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4974,
								4977,
								4976,
								4975
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 379,
							"character": 36
						}
					]
				},
				{
					"id": 4993,
					"name": "BenchmarkMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 396,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "baseline"
							},
							{
								"type": "stringLiteral",
								"value": "test"
							}
						]
					}
				},
				{
					"id": 4994,
					"name": "BenchmarkReporterOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 404,
							"character": 36
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "BenchmarkReporterProperties",
								"id": 4987
							}
						]
					}
				},
				{
					"id": 4995,
					"name": "formatSeconds",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 4996,
							"name": "formatSeconds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4997,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Benchmark.ts",
							"line": 406,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						4893
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						4962,
						4970,
						4943,
						4987,
						4951,
						4978,
						4973
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						4993,
						4994
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						4995
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Benchmark.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6825,
			"name": "\"core/lib/reporters/Cobertura\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Cobertura.ts",
			"children": [
				{
					"id": 6826,
					"name": "Cobertura",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6829,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6830,
									"name": "new Cobertura",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6831,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										},
										{
											"id": 6832,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CoberturaCoverageOptions",
												"id": 6877
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Cobertura",
										"id": 6826
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.__constructor",
										"id": 6338
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Cobertura.ts",
									"line": 7,
									"character": 34
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.__constructor",
								"id": 6338
							}
						},
						{
							"id": 6848,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 6852,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6853,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6854,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6855,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 6849,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 6850,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 6851,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 6840,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.directory",
								"id": 6336
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoberturaCoverageProperties.directory",
								"id": 6873
							}
						},
						{
							"id": 6838,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 18,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.executor",
								"id": 6334
							}
						},
						{
							"id": 6839,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.filename",
								"id": 6335
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoberturaCoverageProperties.filename",
								"id": 6872
							}
						},
						{
							"id": 6828,
							"name": "projectRoot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Cobertura.ts",
									"line": 7,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoberturaCoverageProperties.projectRoot",
								"id": 6871
							}
						},
						{
							"id": 6827,
							"name": "reportType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Cobertura.ts",
									"line": 6,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "ReportType"
							},
							"defaultValue": "\"cobertura\"",
							"overwrites": {
								"type": "reference",
								"name": "Coverage.reportType",
								"id": 6333
							}
						},
						{
							"id": 6841,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.watermarks",
								"id": 6337
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoberturaCoverageProperties.watermarks",
								"id": 6874
							}
						},
						{
							"id": 6856,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6857,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 6858,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6859,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoberturaCoverageProperties.console",
								"id": 6876
							}
						},
						{
							"id": 6860,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6861,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 6862,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6863,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoberturaCoverageProperties.output",
								"id": 6875
							}
						},
						{
							"id": 6868,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6869,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 6842,
							"name": "createCoverageReport",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6843,
									"name": "createCoverageReport",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6844,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReportType"
											}
										},
										{
											"id": 6845,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CoverageMapData"
													},
													{
														"type": "reference",
														"name": "CoverageMap"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.createCoverageReport",
										"id": 6347
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 44,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.createCoverageReport",
								"id": 6347
							}
						},
						{
							"id": 6864,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6865,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6866,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 6867,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 6833,
							"name": "getReporterOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6834,
									"name": "getReporterOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6835,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6836,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6837,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Cobertura.ts",
													"line": 17,
													"character": 23
												}
											]
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.getReporterOptions",
										"id": 6342
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Cobertura.ts",
									"line": 17,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.getReporterOptions",
								"id": 6342
							}
						},
						{
							"id": 6846,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6847,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.runEnd",
										"id": 6351
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 66,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.runEnd",
								"id": 6351
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6829
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6848,
								6852,
								6849,
								6850,
								6851,
								6840,
								6838,
								6839,
								6828,
								6827,
								6841
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6856,
								6860
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6868,
								6842,
								6864,
								6833,
								6846
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Cobertura.ts",
							"line": 4,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Coverage",
							"id": 6332
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						},
						{
							"type": "reference",
							"name": "CoberturaCoverageProperties",
							"id": 6870
						}
					]
				},
				{
					"id": 6870,
					"name": "CoberturaCoverageProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6876,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 6873,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A direcotry to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 79,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.directory",
								"id": 6377
							}
						},
						{
							"id": 6872,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A filename to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 76,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.filename",
								"id": 6376
							}
						},
						{
							"id": 6875,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 6871,
							"name": "projectRoot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Cobertura.ts",
									"line": 27,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 6874,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Watermarks used to check coverage"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 82,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.watermarks",
								"id": 6378
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6876,
								6873,
								6872,
								6875,
								6871,
								6874
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Cobertura.ts",
							"line": 26,
							"character": 44
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "Cobertura",
							"id": 6826
						}
					]
				},
				{
					"id": 6877,
					"name": "CoberturaCoverageOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Cobertura.ts",
							"line": 30,
							"character": 36
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "CoberturaCoverageProperties",
								"id": 6870
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6826
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						6870
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						6877
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Cobertura.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5861,
			"name": "\"core/lib/reporters/Console\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Console.ts",
			"children": [
				{
					"id": 5862,
					"name": "ConsoleReporter",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The console reporter outputs to the browser console."
					},
					"children": [
						{
							"id": 5863,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5864,
									"name": "new ConsoleReporter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 5865,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										},
										{
											"id": 5866,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOptions",
												"id": 4887
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "ConsoleReporter",
										"id": 5862
									},
									"overwrites": {
										"type": "reference",
										"name": "Reporter.__constructor",
										"id": 4850
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Console.ts",
									"line": 11,
									"character": 30
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Reporter.__constructor",
								"id": 4850
							}
						},
						{
							"id": 5880,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 5884,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5885,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 5886,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 5887,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 5881,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 5882,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 5883,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 5879,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 11,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Executor",
								"id": 4575
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							}
						},
						{
							"id": 5888,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 5889,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 5890,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 5891,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 5892,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 5893,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 5894,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 5895,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 5900,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5901,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 5867,
							"name": "error",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5868,
									"name": "error",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5869,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Console.ts",
									"line": 20,
									"character": 7
								}
							]
						},
						{
							"id": 5896,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5897,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5898,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 5899,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 5870,
							"name": "suiteEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5871,
									"name": "suiteEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5872,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Console.ts",
									"line": 26,
									"character": 10
								}
							]
						},
						{
							"id": 5873,
							"name": "suiteStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5874,
									"name": "suiteStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5875,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Console.ts",
									"line": 55,
									"character": 12
								}
							]
						},
						{
							"id": 5876,
							"name": "testEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5877,
									"name": "testEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5878,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Console.ts",
									"line": 61,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								5863
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5880,
								5884,
								5881,
								5882,
								5883,
								5879
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								5888,
								5892
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								5900,
								5867,
								5896,
								5870,
								5873,
								5876
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Console.ts",
							"line": 9,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Reporter",
							"id": 4840
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						5862
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Console.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6331,
			"name": "\"core/lib/reporters/Coverage\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Coverage.ts",
			"children": [
				{
					"id": 6332,
					"name": "Coverage",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"children": [
						{
							"id": 6338,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6339,
									"name": "new Coverage",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6340,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										},
										{
											"id": 6341,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CoverageOptions",
												"id": 6382
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Coverage",
										"id": 6332
									},
									"overwrites": {
										"type": "reference",
										"name": "Reporter.__constructor",
										"id": 4850
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 26
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Reporter.__constructor",
								"id": 4850
							}
						},
						{
							"id": 6353,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 6357,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6358,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6359,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6360,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 6354,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 6355,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 6356,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 6336,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.directory",
								"id": 6377
							}
						},
						{
							"id": 6334,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 18,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							}
						},
						{
							"id": 6335,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.filename",
								"id": 6376
							}
						},
						{
							"id": 6333,
							"name": "reportType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isAbstract": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 17,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"name": "ReportType"
							}
						},
						{
							"id": 6337,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.watermarks",
								"id": 6378
							}
						},
						{
							"id": 6361,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6362,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 6363,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6364,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.console",
								"id": 6380
							}
						},
						{
							"id": 6365,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6366,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 6367,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6368,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.output",
								"id": 6379
							}
						},
						{
							"id": 6373,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6374,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 6347,
							"name": "createCoverageReport",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6348,
									"name": "createCoverageReport",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6349,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReportType"
											}
										},
										{
											"id": 6350,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CoverageMapData"
													},
													{
														"type": "reference",
														"name": "CoverageMap"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 44,
									"character": 22
								}
							]
						},
						{
							"id": 6369,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6370,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6371,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 6372,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 6342,
							"name": "getReporterOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6343,
									"name": "getReporterOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6344,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6345,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6346,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Coverage.ts",
													"line": 38,
													"character": 23
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 38,
									"character": 20
								}
							]
						},
						{
							"id": 6351,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6352,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 66,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6338
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6353,
								6357,
								6354,
								6355,
								6356,
								6336,
								6334,
								6335,
								6333,
								6337
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6361,
								6365
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6373,
								6347,
								6369,
								6342,
								6351
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Coverage.ts",
							"line": 15,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Reporter",
							"id": 4840
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "TextCoverage",
							"id": 6387
						},
						{
							"type": "reference",
							"name": "Cobertura",
							"id": 6826
						},
						{
							"type": "reference",
							"name": "JsonCoverage",
							"id": 6879
						},
						{
							"type": "reference",
							"name": "HtmlCoverage",
							"id": 6923
						},
						{
							"type": "reference",
							"name": "LcovCoverage",
							"id": 6976
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						}
					]
				},
				{
					"id": 6375,
					"name": "CoverageProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6380,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 6377,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A direcotry to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 79,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 6376,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A filename to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 76,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 6379,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 6378,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Watermarks used to check coverage"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 82,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6380,
								6377,
								6376,
								6379,
								6378
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Coverage.ts",
							"line": 74,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "TextCoverageProperties",
							"id": 6431
						},
						{
							"type": "reference",
							"name": "CoberturaCoverageProperties",
							"id": 6870
						},
						{
							"type": "reference",
							"name": "HtmlCoverageProperties",
							"id": 6967
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "Cobertura",
							"id": 6826
						},
						{
							"type": "reference",
							"name": "Coverage",
							"id": 6332
						},
						{
							"type": "reference",
							"name": "HtmlCoverage",
							"id": 6923
						},
						{
							"type": "reference",
							"name": "JsonCoverage",
							"id": 6879
						},
						{
							"type": "reference",
							"name": "LcovCoverage",
							"id": 6976
						},
						{
							"type": "reference",
							"name": "Pretty",
							"id": 6440
						},
						{
							"type": "reference",
							"name": "Runner",
							"id": 6595
						},
						{
							"type": "reference",
							"name": "Simple",
							"id": 6704
						},
						{
							"type": "reference",
							"name": "TextCoverage",
							"id": 6387
						}
					]
				},
				{
					"id": 6382,
					"name": "CoverageOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Coverage.ts",
							"line": 85,
							"character": 27
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "CoverageProperties",
								"id": 6375
							}
						]
					}
				},
				{
					"id": 6381,
					"name": "eventHandler",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Coverage.ts",
							"line": 13,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					},
					"defaultValue": " createEventHandler<NodeEvents>()"
				},
				{
					"id": 6383,
					"name": "isCoverageMap",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 6384,
							"name": "isCoverageMap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6385,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "CoverageMap"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Coverage.ts",
							"line": 87,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6332
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						6375
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						6382
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						6381
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6383
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Coverage.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5808,
			"name": "\"core/lib/reporters/Dom\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Dom.ts",
			"children": [
				{
					"id": 5809,
					"name": "Dom",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Dom reporter outputs text into the DOM, essentially treating it like the\nconsole."
					},
					"children": [
						{
							"id": 5813,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5814,
									"name": "new Dom",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 5815,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										},
										{
											"id": 5816,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DomOptions",
												"id": 5860
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Dom",
										"id": 5809
									},
									"overwrites": {
										"type": "reference",
										"name": "Reporter.__constructor",
										"id": 4850
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 16,
									"character": 36
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Reporter.__constructor",
								"id": 4850
							}
						},
						{
							"id": 5833,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 5837,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5838,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 5839,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 5840,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 5834,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 5835,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 5836,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 5810,
							"name": "document",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 12,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "HTMLDocument"
							}
						},
						{
							"id": 5832,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 11,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Executor",
								"id": 4575
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							}
						},
						{
							"id": 5811,
							"name": "suiteNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 14,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "HTMLElement"
							}
						},
						{
							"id": 5812,
							"name": "testNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 16,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "HTMLElement"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 5841,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 5842,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 5843,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 5844,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 5845,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 5846,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 5847,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 5848,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 5853,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5854,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 5817,
							"name": "error",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5818,
									"name": "error",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5819,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 25,
									"character": 7
								}
							]
						},
						{
							"id": 5849,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5850,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5851,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 5852,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 5820,
							"name": "suiteEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5821,
									"name": "suiteEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5822,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 34,
									"character": 10
								}
							]
						},
						{
							"id": 5823,
							"name": "suiteStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5824,
									"name": "suiteStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5825,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 55,
									"character": 12
								}
							]
						},
						{
							"id": 5826,
							"name": "testEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5827,
									"name": "testEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5828,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 75,
									"character": 9
								}
							]
						},
						{
							"id": 5829,
							"name": "testStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5830,
									"name": "testStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5831,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 110,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								5813
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5833,
								5837,
								5834,
								5835,
								5836,
								5810,
								5832,
								5811,
								5812
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								5841,
								5845
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								5853,
								5817,
								5849,
								5820,
								5823,
								5826,
								5829
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Dom.ts",
							"line": 11,
							"character": 24
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Reporter",
							"id": 4840
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						}
					]
				},
				{
					"id": 5855,
					"name": "DomProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 5859,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 5856,
							"name": "document",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 127,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Document"
							}
						},
						{
							"id": 5858,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 5857,
							"name": "suiteNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Dom.ts",
									"line": 128,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "HTMLElement"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5859,
								5856,
								5858,
								5857
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Dom.ts",
							"line": 126,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						}
					]
				},
				{
					"id": 5860,
					"name": "DomOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Dom.ts",
							"line": 131,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "DomProperties",
								"id": 5855
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						5809
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						5855
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						5860
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Dom.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5700,
			"name": "\"core/lib/reporters/Html\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Html.ts",
			"children": [
				{
					"id": 5701,
					"name": "Html",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Html reporter displays an HTML report in the browser."
					},
					"children": [
						{
							"id": 5719,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5720,
									"name": "new Html",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 5721,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										},
										{
											"id": 5722,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "HtmlOptions",
												"id": 5777
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Html",
										"id": 5701
									},
									"overwrites": {
										"type": "reference",
										"name": "Reporter.__constructor",
										"id": 4850
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 60,
									"character": 37
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Reporter.__constructor",
								"id": 4850
							}
						},
						{
							"id": 5750,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 5754,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 5755,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 5756,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 5757,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 5751,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 5716,
							"name": "_fragment",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 56,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "DocumentFragment"
							}
						},
						{
							"id": 5752,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 5717,
							"name": "_indentLevel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 58,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 5753,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 5714,
							"name": "_passedFilter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 53,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"defaultValue": " null"
						},
						{
							"id": 5713,
							"name": "_processedTests",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 51,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 5704,
							"name": "_reportContainer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 24,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Element"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 5705,
							"name": "_reportControls",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 27,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Element"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 5706,
							"name": "_reportNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 30,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Element"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 5718,
							"name": "_runningSuites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 60,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 5715,
							"name": "_skippedFilter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 54,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"defaultValue": " null"
						},
						{
							"id": 5709,
							"name": "_suiteCount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 39,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 5707,
							"name": "_summaryNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 33,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Element"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 5708,
							"name": "_summaryNodes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 36,
									"character": 25
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Element"
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 5710,
							"name": "_testCount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 42,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 5712,
							"name": "_testIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 48,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 5711,
							"name": "_testsInSuite",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 45,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 5702,
							"name": "document",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Document"
							},
							"implementationOf": {
								"type": "reference",
								"name": "HtmlProperties.document",
								"id": 5773
							}
						},
						{
							"id": 5749,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 11,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Executor",
								"id": 4575
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							}
						},
						{
							"id": 5703,
							"name": "location",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 22,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Location"
							},
							"implementationOf": {
								"type": "reference",
								"name": "HtmlProperties.location",
								"id": 5774
							}
						},
						{
							"id": 5758,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 5759,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 5760,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 5761,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "HtmlProperties.console",
								"id": 5776
							}
						},
						{
							"id": 5762,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 5763,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 5764,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 5765,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "HtmlProperties.output",
								"id": 5775
							}
						},
						{
							"id": 5723,
							"name": "_generateSummary",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5724,
									"name": "_generateSummary",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generate the summary header at the top of the report."
									},
									"parameters": [
										{
											"id": 5725,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The root suite of the test session\n"
											},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 74,
									"character": 28
								}
							]
						},
						{
							"id": 5728,
							"name": "_getIndentLevel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5729,
									"name": "_getIndentLevel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5730,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Element"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 159,
									"character": 27
								}
							]
						},
						{
							"id": 5726,
							"name": "_injectCSS",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5727,
									"name": "_injectCSS",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 145,
									"character": 22
								}
							]
						},
						{
							"id": 5770,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5771,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 5731,
							"name": "_setCollapsed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 5732,
									"name": "_setCollapsed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the collapsed state of a node and return the new state."
									},
									"parameters": [
										{
											"id": 5733,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A suite node"
											},
											"type": {
												"type": "reference",
												"name": "Element"
											}
										},
										{
											"id": 5734,
											"name": "shouldCollapse",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 178,
									"character": 25
								}
							]
						},
						{
							"id": 5735,
							"name": "error",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5736,
									"name": "error",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5737,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 221,
									"character": 7
								}
							]
						},
						{
							"id": 5766,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5767,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5768,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 5769,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 5738,
							"name": "runStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5739,
									"name": "runStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 237,
									"character": 10
								}
							]
						},
						{
							"id": 5743,
							"name": "suiteEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5744,
									"name": "suiteEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5745,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 463,
									"character": 10
								}
							]
						},
						{
							"id": 5740,
							"name": "suiteStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5741,
									"name": "suiteStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5742,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 418,
									"character": 12
								}
							]
						},
						{
							"id": 5746,
							"name": "testEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 5747,
									"name": "testEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 5748,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 601,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								5719
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5750,
								5754,
								5751,
								5716,
								5752,
								5717,
								5753,
								5714,
								5713,
								5704,
								5705,
								5706,
								5718,
								5715,
								5709,
								5707,
								5708,
								5710,
								5712,
								5711,
								5702,
								5749,
								5703
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								5758,
								5762
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								5723,
								5728,
								5726,
								5770,
								5731,
								5735,
								5766,
								5738,
								5743,
								5740,
								5746
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 19,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Reporter",
							"id": 4840
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "HtmlProperties",
							"id": 5772
						}
					]
				},
				{
					"id": 5772,
					"name": "HtmlProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 5776,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 5773,
							"name": "document",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 698,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Document"
							}
						},
						{
							"id": 5774,
							"name": "location",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Html.ts",
									"line": 699,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Location"
							}
						},
						{
							"id": 5775,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5776,
								5773,
								5774,
								5775
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 697,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "Html",
							"id": 5701
						}
					]
				},
				{
					"id": 5777,
					"name": "HtmlOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 702,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HtmlProperties",
								"id": 5772
							}
						]
					}
				},
				{
					"id": 5782,
					"name": "addClass",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5783,
							"name": "addClass",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5784,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									}
								},
								{
									"id": 5785,
									"name": "cls",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 709,
							"character": 17
						}
					]
				},
				{
					"id": 5778,
					"name": "containsClass",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5779,
							"name": "containsClass",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5780,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									}
								},
								{
									"id": 5781,
									"name": "cls",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 704,
							"character": 22
						}
					]
				},
				{
					"id": 5804,
					"name": "createSvgNode",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5805,
							"name": "createSvgNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5806,
									"name": "svg",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5807,
									"name": "extraClass",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 778,
							"character": 22
						}
					]
				},
				{
					"id": 5801,
					"name": "formatDuration",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5802,
							"name": "formatDuration",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5803,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 759,
							"character": 23
						}
					]
				},
				{
					"id": 5790,
					"name": "getClassName",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5791,
							"name": "getClassName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5792,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 738,
							"character": 21
						}
					]
				},
				{
					"id": 5797,
					"name": "pad",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5798,
							"name": "pad",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5799,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 5800,
									"name": "size",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 746,
							"character": 12
						}
					]
				},
				{
					"id": 5786,
					"name": "removeClass",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5787,
							"name": "removeClass",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5788,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									}
								},
								{
									"id": 5789,
									"name": "cls",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 723,
							"character": 20
						}
					]
				},
				{
					"id": 5793,
					"name": "setClassName",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5794,
							"name": "setClassName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5795,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									}
								},
								{
									"id": 5796,
									"name": "cls",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Html.ts",
							"line": 742,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						5701
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						5772
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						5777
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						5782,
						5778,
						5804,
						5801,
						5790,
						5797,
						5786,
						5793
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Html.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6922,
			"name": "\"core/lib/reporters/HtmlCoverage\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/HtmlCoverage.ts",
			"children": [
				{
					"id": 6923,
					"name": "HtmlCoverage",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6926,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6927,
									"name": "new HtmlCoverage",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6928,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										},
										{
											"id": 6929,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "HtmlCoverageOptions",
												"id": 6974
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "HtmlCoverage",
										"id": 6923
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.__constructor",
										"id": 6338
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/HtmlCoverage.ts",
									"line": 7,
									"character": 31
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.__constructor",
								"id": 6338
							}
						},
						{
							"id": 6945,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 6949,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6950,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6951,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6952,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 6946,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 6947,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 6948,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 6937,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.directory",
								"id": 6336
							},
							"implementationOf": {
								"type": "reference",
								"name": "HtmlCoverageProperties.directory",
								"id": 6970
							}
						},
						{
							"id": 6935,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 18,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.executor",
								"id": 6334
							}
						},
						{
							"id": 6936,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.filename",
								"id": 6335
							},
							"implementationOf": {
								"type": "reference",
								"name": "HtmlCoverageProperties.filename",
								"id": 6969
							}
						},
						{
							"id": 6924,
							"name": "reportType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/HtmlCoverage.ts",
									"line": 6,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "ReportType"
							},
							"defaultValue": "\"html\"",
							"overwrites": {
								"type": "reference",
								"name": "Coverage.reportType",
								"id": 6333
							}
						},
						{
							"id": 6925,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/HtmlCoverage.ts",
									"line": 7,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "HtmlCoverageProperties.verbose",
								"id": 6968
							}
						},
						{
							"id": 6938,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.watermarks",
								"id": 6337
							},
							"implementationOf": {
								"type": "reference",
								"name": "HtmlCoverageProperties.watermarks",
								"id": 6971
							}
						},
						{
							"id": 6953,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6954,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 6955,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6956,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "HtmlCoverageProperties.console",
								"id": 6973
							}
						},
						{
							"id": 6957,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6958,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 6959,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6960,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "HtmlCoverageProperties.output",
								"id": 6972
							}
						},
						{
							"id": 6965,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6966,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 6939,
							"name": "createCoverageReport",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6940,
									"name": "createCoverageReport",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6941,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReportType"
											}
										},
										{
											"id": 6942,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CoverageMapData"
													},
													{
														"type": "reference",
														"name": "CoverageMap"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.createCoverageReport",
										"id": 6347
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 44,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.createCoverageReport",
								"id": 6347
							}
						},
						{
							"id": 6961,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6962,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6963,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 6964,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 6930,
							"name": "getReporterOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6931,
									"name": "getReporterOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6932,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6933,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6934,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/HtmlCoverage.ts",
													"line": 17,
													"character": 23
												}
											]
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.getReporterOptions",
										"id": 6342
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/HtmlCoverage.ts",
									"line": 17,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.getReporterOptions",
								"id": 6342
							}
						},
						{
							"id": 6943,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6944,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.runEnd",
										"id": 6351
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 66,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.runEnd",
								"id": 6351
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6926
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6945,
								6949,
								6946,
								6947,
								6948,
								6937,
								6935,
								6936,
								6924,
								6925,
								6938
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6953,
								6957
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6965,
								6939,
								6961,
								6930,
								6943
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/HtmlCoverage.ts",
							"line": 4,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Coverage",
							"id": 6332
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						},
						{
							"type": "reference",
							"name": "HtmlCoverageProperties",
							"id": 6967
						}
					]
				},
				{
					"id": 6967,
					"name": "HtmlCoverageProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6973,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 6970,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A direcotry to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 79,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.directory",
								"id": 6377
							}
						},
						{
							"id": 6969,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A filename to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 76,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.filename",
								"id": 6376
							}
						},
						{
							"id": 6972,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 6968,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/HtmlCoverage.ts",
									"line": 27,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 6971,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Watermarks used to check coverage"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 82,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.watermarks",
								"id": 6378
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6973,
								6970,
								6969,
								6972,
								6968,
								6971
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/HtmlCoverage.ts",
							"line": 26,
							"character": 39
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "HtmlCoverage",
							"id": 6923
						}
					]
				},
				{
					"id": 6974,
					"name": "HtmlCoverageOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/HtmlCoverage.ts",
							"line": 30,
							"character": 31
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HtmlCoverageProperties",
								"id": 6967
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6923
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						6967
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						6974
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/HtmlCoverage.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6760,
			"name": "\"core/lib/reporters/JUnit\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/JUnit.ts",
			"children": [
				{
					"id": 6761,
					"name": "JUnit",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "There is no formal spec for this format and everyone does it differently, so\ngood luck! We've mashed as many of the different incompatible JUnit/xUnit\nXSDs as possible into one reporter."
					},
					"children": [
						{
							"id": 6763,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6764,
									"name": "new JUnit",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6765,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										},
										{
											"id": 6766,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Partial",
												"typeArguments": [
													{
														"type": "reference",
														"name": "JUnitProperties",
														"id": 6792
													}
												]
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "JUnit",
										"id": 6761
									},
									"overwrites": {
										"type": "reference",
										"name": "Reporter.__constructor",
										"id": 4850
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 16,
									"character": 40
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Reporter.__constructor",
								"id": 4850
							}
						},
						{
							"id": 6770,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 6774,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6775,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6776,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6777,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 6771,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 6772,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 6773,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 6769,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 11,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Executor",
								"id": 4575
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							}
						},
						{
							"id": 6762,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 6778,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6779,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 6780,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6781,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 6782,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6783,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 6784,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6785,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 6790,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6791,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 6786,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6787,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6788,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 6789,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 6767,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6768,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 30,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6763
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6770,
								6774,
								6771,
								6772,
								6773,
								6769,
								6762
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6778,
								6782
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6790,
								6786,
								6767
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/JUnit.ts",
							"line": 15,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Reporter",
							"id": 4840
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						}
					]
				},
				{
					"id": 6796,
					"name": "XmlNode",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Simple XML generator.",
						"tags": [
							{
								"tag": "constructor",
								"text": ""
							},
							{
								"tag": "param",
								"text": "The node name.",
								"param": "nodeName"
							},
							{
								"tag": "param",
								"text": "Optional attributes.\n",
								"param": "attributes"
							}
						]
					},
					"children": [
						{
							"id": 6800,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 6801,
									"name": "new XmlNode",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6802,
											"name": "nodeName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6803,
											"name": "attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "XmlNode",
										"id": 6796
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 54,
									"character": 18
								}
							]
						},
						{
							"id": 6799,
							"name": "attributes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 54,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 6798,
							"name": "childNodes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 53,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 6797,
							"name": "nodeName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 52,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 6808,
							"name": "_escape",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 6809,
									"name": "_escape",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6810,
											"name": "str",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 80,
									"character": 9
								}
							]
						},
						{
							"id": 6811,
							"name": "_serializeAttributes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 6812,
									"name": "_serializeAttributes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 87,
									"character": 22
								}
							]
						},
						{
							"id": 6813,
							"name": "_serializeContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 6814,
									"name": "_serializeContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 100,
									"character": 19
								}
							]
						},
						{
							"id": 6804,
							"name": "createNode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 6805,
									"name": "createNode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new XML node and pushes it to the end of the current node.",
										"returns": "A new node.\n"
									},
									"parameters": [
										{
											"id": 6806,
											"name": "nodeName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The node name for the new node."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6807,
											"name": "attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Optional attributes for the new node."
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "XmlNode",
										"id": 6796
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 74,
									"character": 12
								}
							]
						},
						{
							"id": 6815,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 6816,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Outputs the node as a serialised XML string.",
										"returns": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 118,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6800
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6799,
								6798,
								6797
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6808,
								6811,
								6813,
								6804,
								6815
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/JUnit.ts",
							"line": 51,
							"character": 13
						}
					]
				},
				{
					"id": 6792,
					"name": "JUnitProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6795,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 6793,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JUnit.ts",
									"line": 42,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 6794,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6795,
								6793,
								6794
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/JUnit.ts",
							"line": 41,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						}
					]
				},
				{
					"id": 6817,
					"name": "createSuiteNode",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 6818,
							"name": "createSuiteNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6819,
									"name": "suite",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Suite",
										"id": 3566
									}
								},
								{
									"id": 6820,
									"name": "reporter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "JUnit",
										"id": 6761
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "XmlNode",
								"id": 6796
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/JUnit.ts",
							"line": 130,
							"character": 24
						}
					]
				},
				{
					"id": 6821,
					"name": "createTestNode",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 6822,
							"name": "createTestNode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6823,
									"name": "test",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Suite",
												"id": 3566
											},
											{
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										]
									}
								},
								{
									"id": 6824,
									"name": "reporter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "JUnit",
										"id": 6761
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "XmlNode",
								"id": 6796
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/JUnit.ts",
							"line": 141,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6761,
						6796
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						6792
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6817,
						6821
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/JUnit.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6878,
			"name": "\"core/lib/reporters/JsonCoverage\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/JsonCoverage.ts",
			"children": [
				{
					"id": 6879,
					"name": "JsonCoverage",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6885,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6886,
									"name": "new JsonCoverage",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6887,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										},
										{
											"id": 6888,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CoverageOptions",
												"id": 6382
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "JsonCoverage",
										"id": 6879
									},
									"overwrites": {
										"type": "reference",
										"name": "Reporter.__constructor",
										"id": 4850
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.__constructor",
										"id": 6338
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 26
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Reporter.__constructor",
								"id": 4850
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.__constructor",
								"id": 6338
							}
						},
						{
							"id": 6900,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 6904,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6905,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6906,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6907,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 6901,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 6902,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 6903,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 6883,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.directory",
								"id": 6336
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.directory",
								"id": 6377
							}
						},
						{
							"id": 6881,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 18,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.executor",
								"id": 6334
							}
						},
						{
							"id": 6882,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.filename",
								"id": 6335
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.filename",
								"id": 6376
							}
						},
						{
							"id": 6880,
							"name": "reportType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/JsonCoverage.ts",
									"line": 4,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "ReportType"
							},
							"defaultValue": "\"json\"",
							"overwrites": {
								"type": "reference",
								"name": "Coverage.reportType",
								"id": 6333
							}
						},
						{
							"id": 6884,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.watermarks",
								"id": 6337
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.watermarks",
								"id": 6378
							}
						},
						{
							"id": 6908,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6909,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 6910,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6911,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.console",
								"id": 6380
							}
						},
						{
							"id": 6912,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6913,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 6914,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6915,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.output",
								"id": 6379
							}
						},
						{
							"id": 6920,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6921,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 6894,
							"name": "createCoverageReport",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6895,
									"name": "createCoverageReport",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6896,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReportType"
											}
										},
										{
											"id": 6897,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CoverageMapData"
													},
													{
														"type": "reference",
														"name": "CoverageMap"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.createCoverageReport",
										"id": 6347
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 44,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.createCoverageReport",
								"id": 6347
							}
						},
						{
							"id": 6916,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6917,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6918,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 6919,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 6889,
							"name": "getReporterOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6890,
									"name": "getReporterOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6891,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6892,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6893,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Coverage.ts",
													"line": 38,
													"character": 23
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.getReporterOptions",
										"id": 6342
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 38,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.getReporterOptions",
								"id": 6342
							}
						},
						{
							"id": 6898,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6899,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.runEnd",
										"id": 6351
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 66,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.runEnd",
								"id": 6351
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6885
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6900,
								6904,
								6901,
								6902,
								6903,
								6883,
								6881,
								6882,
								6880,
								6884
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6908,
								6912
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6920,
								6894,
								6916,
								6889,
								6898
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/JsonCoverage.ts",
							"line": 3,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Coverage",
							"id": 6332
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6879
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/JsonCoverage.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6975,
			"name": "\"core/lib/reporters/Lcov\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Lcov.ts",
			"children": [
				{
					"id": 6976,
					"name": "LcovCoverage",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6982,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6983,
									"name": "new LcovCoverage",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6984,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										},
										{
											"id": 6985,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CoverageOptions",
												"id": 6382
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "LcovCoverage",
										"id": 6976
									},
									"overwrites": {
										"type": "reference",
										"name": "Reporter.__constructor",
										"id": 4850
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.__constructor",
										"id": 6338
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 26
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Reporter.__constructor",
								"id": 4850
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.__constructor",
								"id": 6338
							}
						},
						{
							"id": 6997,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 7001,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 7002,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 7003,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 7004,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 6998,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 6999,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 7000,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 6980,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.directory",
								"id": 6336
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.directory",
								"id": 6377
							}
						},
						{
							"id": 6978,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 18,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.executor",
								"id": 6334
							}
						},
						{
							"id": 6979,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.filename",
								"id": 6335
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.filename",
								"id": 6376
							}
						},
						{
							"id": 6977,
							"name": "reportType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Lcov.ts",
									"line": 4,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "ReportType"
							},
							"defaultValue": "\"lcovonly\"",
							"overwrites": {
								"type": "reference",
								"name": "Coverage.reportType",
								"id": 6333
							}
						},
						{
							"id": 6981,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.watermarks",
								"id": 6337
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.watermarks",
								"id": 6378
							}
						},
						{
							"id": 7005,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 7006,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 7007,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 7008,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.console",
								"id": 6380
							}
						},
						{
							"id": 7009,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 7010,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 7011,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 7012,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "CoverageProperties.output",
								"id": 6379
							}
						},
						{
							"id": 7017,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7018,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 6991,
							"name": "createCoverageReport",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6992,
									"name": "createCoverageReport",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6993,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReportType"
											}
										},
										{
											"id": 6994,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CoverageMapData"
													},
													{
														"type": "reference",
														"name": "CoverageMap"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.createCoverageReport",
										"id": 6347
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 44,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.createCoverageReport",
								"id": 6347
							}
						},
						{
							"id": 7013,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7014,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7015,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 7016,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 6986,
							"name": "getReporterOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6987,
									"name": "getReporterOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6988,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6989,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6990,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Coverage.ts",
													"line": 38,
													"character": 23
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.getReporterOptions",
										"id": 6342
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 38,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.getReporterOptions",
								"id": 6342
							}
						},
						{
							"id": 6995,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6996,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.runEnd",
										"id": 6351
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 66,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.runEnd",
								"id": 6351
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6982
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6997,
								7001,
								6998,
								6999,
								7000,
								6980,
								6978,
								6979,
								6977,
								6981
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								7005,
								7009
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								7017,
								6991,
								7013,
								6986,
								6995
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Lcov.ts",
							"line": 3,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Coverage",
							"id": 6332
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6976
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Lcov.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6439,
			"name": "\"core/lib/reporters/Pretty\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Pretty.ts",
			"children": [
				{
					"id": 6567,
					"name": "Result",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6570,
							"name": "FAIL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 510,
									"character": 6
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 6568,
							"name": "PASS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 508,
									"character": 6
								}
							],
							"defaultValue": "0"
						},
						{
							"id": 6569,
							"name": "SKIP",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 509,
									"character": 6
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								6570,
								6568,
								6569
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 507,
							"character": 18
						}
					]
				},
				{
					"id": 6440,
					"name": "Pretty",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Handles presentation of runner results to the user"
					},
					"children": [
						{
							"id": 6456,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6457,
									"name": "new Pretty",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6458,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										},
										{
											"id": 6459,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "PrettyOptions",
												"id": 6575
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Pretty",
										"id": 6440
									},
									"overwrites": {
										"type": "reference",
										"name": "TextCoverage.__constructor",
										"id": 6390
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 33,
									"character": 53
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "TextCoverage.__constructor",
								"id": 6390
							}
						},
						{
							"id": 6454,
							"name": "_charm",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 32,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CharmInstance"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 6505,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 6509,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6510,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6511,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6512,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 6506,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 6507,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 6449,
							"name": "_header",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 27,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 6450,
							"name": "_log",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 28,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 6508,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 6455,
							"name": "_renderTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 33,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Timer"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 6451,
							"name": "_reports",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 29,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 6452,
							"name": "_spinnerOffset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 30,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 6453,
							"name": "_total",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 31,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Report",
								"id": 6541
							}
						},
						{
							"id": 6441,
							"name": "colorReplacement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 21,
									"character": 18
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 6442,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 6443,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 6444,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/reporters/Pretty.ts",
											"line": 21,
											"character": 19
										}
									]
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "PrettyProperties.colorReplacement",
								"id": 6528
							}
						},
						{
							"id": 6445,
							"name": "dimensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"implementationOf": {
								"type": "reference",
								"name": "PrettyProperties.dimensions",
								"id": 6532
							}
						},
						{
							"id": 6499,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.directory",
								"id": 6336
							},
							"implementationOf": {
								"type": "reference",
								"name": "PrettyProperties.directory",
								"id": 6537
							}
						},
						{
							"id": 6497,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 18,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.executor",
								"id": 6334
							}
						},
						{
							"id": 6498,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.filename",
								"id": 6335
							},
							"implementationOf": {
								"type": "reference",
								"name": "PrettyProperties.filename",
								"id": 6536
							}
						},
						{
							"id": 6491,
							"name": "maxColumns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 7,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverage.maxColumns",
								"id": 6389
							},
							"implementationOf": {
								"type": "reference",
								"name": "PrettyProperties.maxColumns",
								"id": 6535
							}
						},
						{
							"id": 6447,
							"name": "maxProgressBarWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 24,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "PrettyProperties.maxProgressBarWidth",
								"id": 6533
							}
						},
						{
							"id": 6490,
							"name": "reportType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 6,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "ReportType"
							},
							"defaultValue": "\"text\"",
							"overwrites": {
								"type": "reference",
								"name": "Coverage.reportType",
								"id": 6333
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverage.reportType",
								"id": 6388
							}
						},
						{
							"id": 6446,
							"name": "titleWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 23,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "PrettyProperties.titleWidth",
								"id": 6534
							}
						},
						{
							"id": 6448,
							"name": "tunnelState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 25,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 6500,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.watermarks",
								"id": 6337
							},
							"implementationOf": {
								"type": "reference",
								"name": "PrettyProperties.watermarks",
								"id": 6538
							}
						},
						{
							"id": 6513,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6514,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 6515,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6516,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "PrettyProperties.console",
								"id": 6540
							}
						},
						{
							"id": 6517,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6518,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 6519,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6520,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "PrettyProperties.output",
								"id": 6539
							}
						},
						{
							"id": 6525,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6526,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 6460,
							"name": "close",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6461,
									"name": "close",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 62,
									"character": 7
								}
							]
						},
						{
							"id": 6466,
							"name": "coverage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6467,
									"name": "coverage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6468,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CoverageMessage",
												"id": 4788
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 133,
									"character": 10
								}
							]
						},
						{
							"id": 6501,
							"name": "createCoverageReport",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6502,
									"name": "createCoverageReport",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6503,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReportType"
											}
										},
										{
											"id": 6504,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CoverageMapData"
													},
													{
														"type": "reference",
														"name": "CoverageMap"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.createCoverageReport",
										"id": 6347
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 44,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.createCoverageReport",
								"id": 6347
							}
						},
						{
							"id": 6487,
							"name": "deprecated",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6488,
									"name": "deprecated",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6489,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DeprecationMessage",
												"id": 4792
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 206,
									"character": 12
								}
							]
						},
						{
							"id": 6484,
							"name": "error",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6485,
									"name": "error",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6486,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 198,
									"character": 7
								}
							]
						},
						{
							"id": 6521,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6522,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6523,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 6524,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 6492,
							"name": "getReporterOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6493,
									"name": "getReporterOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6494,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6495,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6496,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/TextCoverage.ts",
													"line": 17,
													"character": 23
												}
											]
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.getReporterOptions",
										"id": 6342
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TextCoverage.getReporterOptions",
										"id": 6394
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 17,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.getReporterOptions",
								"id": 6342
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverage.getReporterOptions",
								"id": 6394
							}
						},
						{
							"id": 6464,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6465,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.runEnd",
										"id": 6351
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 90,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.runEnd",
								"id": 6351
							}
						},
						{
							"id": 6462,
							"name": "runStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6463,
									"name": "runStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 69,
									"character": 10
								}
							]
						},
						{
							"id": 6472,
							"name": "suiteEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6473,
									"name": "suiteEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6474,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 157,
									"character": 10
								}
							]
						},
						{
							"id": 6469,
							"name": "suiteStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6470,
									"name": "suiteStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6471,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 140,
									"character": 12
								}
							]
						},
						{
							"id": 6475,
							"name": "testEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6476,
									"name": "testEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6477,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 169,
									"character": 9
								}
							]
						},
						{
							"id": 6478,
							"name": "tunnelDownloadProgress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6479,
									"name": "tunnelDownloadProgress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6480,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TunnelMessage",
												"id": 7726
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 184,
									"character": 24
								}
							]
						},
						{
							"id": 6481,
							"name": "tunnelStatus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6482,
									"name": "tunnelStatus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6483,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TunnelMessage",
												"id": 7726
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 193,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6456
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6454,
								6505,
								6509,
								6506,
								6507,
								6449,
								6450,
								6508,
								6455,
								6451,
								6452,
								6453,
								6441,
								6445,
								6499,
								6497,
								6498,
								6491,
								6447,
								6490,
								6446,
								6448,
								6500
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6513,
								6517
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6525,
								6460,
								6466,
								6501,
								6487,
								6484,
								6521,
								6492,
								6464,
								6462,
								6472,
								6469,
								6475,
								6478,
								6481
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 20,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextCoverage",
							"id": 6387
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						},
						{
							"type": "reference",
							"name": "TextCoverageProperties",
							"id": 6431
						},
						{
							"type": "reference",
							"name": "PrettyProperties",
							"id": 6527
						}
					]
				},
				{
					"id": 6541,
					"name": "Report",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Model tracking test results",
						"tags": [
							{
								"tag": "param",
								"text": "the environment associated with the report",
								"param": "environment"
							},
							{
								"tag": "param",
								"text": "the sessionId associated with the report\n",
								"param": "sessionId"
							}
						]
					},
					"children": [
						{
							"id": 6554,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6555,
									"name": "new Report",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6556,
											"name": "environment",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Environment",
												"id": 5580
											}
										},
										{
											"id": 6557,
											"name": "sessionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Report",
										"id": 6541
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 459,
									"character": 27
								}
							]
						},
						{
							"id": 6553,
							"name": "coverageMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 459,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "CoverageMap"
							}
						},
						{
							"id": 6542,
							"name": "environment",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 451,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Environment",
										"id": 5580
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 6546,
							"name": "numFailed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 455,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 6545,
							"name": "numPassed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 454,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 6547,
							"name": "numSkipped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 456,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 6544,
							"name": "numTotal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 453,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 6548,
							"name": "results",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 457,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 6543,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 452,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 6549,
							"name": "suiteInfo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 458,
									"character": 11
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 6550,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 6551,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 6552,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "SuiteInfo",
												"id": 6571
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/reporters/Pretty.ts",
											"line": 458,
											"character": 12
										}
									]
								}
							}
						},
						{
							"id": 6558,
							"name": "finished",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6559,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 468,
									"character": 14
								}
							]
						},
						{
							"id": 6564,
							"name": "getCompressedResults",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6565,
									"name": "getCompressedResults",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6566,
											"name": "maxWidth",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 490,
									"character": 22
								}
							]
						},
						{
							"id": 6560,
							"name": "record",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6561,
									"name": "record",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6562,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 6567
											}
										},
										{
											"id": 6563,
											"name": "count",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 472,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6554
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6553,
								6542,
								6546,
								6545,
								6547,
								6544,
								6548,
								6543,
								6549
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6558
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6564,
								6560
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 450,
							"character": 19
						}
					]
				},
				{
					"id": 6527,
					"name": "PrettyProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6528,
							"name": "colorReplacement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 437,
									"character": 18
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 6529,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 6530,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 6531,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/reporters/Pretty.ts",
											"line": 437,
											"character": 19
										}
									]
								}
							}
						},
						{
							"id": 6540,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 6532,
							"name": "dimensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 438,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 6537,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A direcotry to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 79,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.directory",
								"id": 6377
							}
						},
						{
							"id": 6536,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A filename to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 76,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.filename",
								"id": 6376
							}
						},
						{
							"id": 6535,
							"name": "maxColumns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Maximum number of columns"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 28,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverageProperties.maxColumns",
								"id": 6432
							}
						},
						{
							"id": 6533,
							"name": "maxProgressBarWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 439,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 6539,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 6534,
							"name": "titleWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 440,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 6538,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Watermarks used to check coverage"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 82,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.watermarks",
								"id": 6378
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6528,
								6540,
								6532,
								6537,
								6536,
								6535,
								6533,
								6539,
								6534,
								6538
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 436,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextCoverageProperties",
							"id": 6431
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "Pretty",
							"id": 6440
						}
					]
				},
				{
					"id": 6571,
					"name": "SuiteInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6573,
							"name": "numToReport",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 515,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 6572,
							"name": "parentId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 514,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6573,
								6572
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 513,
							"character": 26
						}
					]
				},
				{
					"id": 6575,
					"name": "PrettyOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 443,
							"character": 25
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "PrettyProperties",
								"id": 6527
							}
						]
					}
				},
				{
					"id": 6577,
					"name": "PAD",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 519,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " new Array(100).join(' ')"
				},
				{
					"id": 6578,
					"name": "SPINNER_STATES",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 520,
							"character": 20
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " ['/', '-', '\\\\', '|']"
				},
				{
					"id": 6574,
					"name": "eventHandler",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 15,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					},
					"defaultValue": " createEventHandler<NodeEvents>()"
				},
				{
					"id": 6576,
					"name": "symbols",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 518,
							"character": 13
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " ['✓', '~', '×']"
				},
				{
					"id": 6589,
					"name": "fit",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 6590,
							"name": "fit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6591,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 6592,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 6593,
									"name": "padLeft",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 534,
							"character": 12
						}
					]
				},
				{
					"id": 6586,
					"name": "pad",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 6587,
							"name": "pad",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 6588,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 530,
							"character": 12
						}
					]
				},
				{
					"id": 6579,
					"name": "BROWSERS",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 6580,
							"name": "chrome",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 522,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Chr\""
						},
						{
							"id": 6581,
							"name": "firefox",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 523,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Fx\""
						},
						{
							"id": 6584,
							"name": "internet explorer",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 526,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"IE\""
						},
						{
							"id": 6582,
							"name": "opera",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 524,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"O\""
						},
						{
							"id": 6585,
							"name": "phantomjs",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 527,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Phan\""
						},
						{
							"id": 6583,
							"name": "safari",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Pretty.ts",
									"line": 525,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Saf\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								6580,
								6581,
								6584,
								6582,
								6585,
								6583
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Pretty.ts",
							"line": 521,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						6567
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6440,
						6541
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						6527,
						6571
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						6575
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						6577,
						6578,
						6574,
						6576
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						6589,
						6586
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						6579
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Pretty.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4839,
			"name": "\"core/lib/reporters/Reporter\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Reporter.ts",
			"children": [
				{
					"id": 4840,
					"name": "Reporter",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This is a base class for reporters that provides convenienience features such\nas event handler registration and a default console."
					},
					"children": [
						{
							"id": 4850,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4851,
									"name": "new Reporter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 4852,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										},
										{
											"id": 4853,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOptions",
												"id": 4887
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Reporter",
										"id": 4840
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 72
								}
							]
						},
						{
							"id": 4842,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4846,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 4847,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 4848,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 4849,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4843,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4844,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4845,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 4841,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 11,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Executor",
								"id": 4575
							}
						},
						{
							"id": 4854,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 4855,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									}
								}
							],
							"setSignature": [
								{
									"id": 4856,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 4857,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 4858,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 4859,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									}
								}
							],
							"setSignature": [
								{
									"id": 4860,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 4861,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 4866,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 4867,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							]
						},
						{
							"id": 4862,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4863,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4864,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 4865,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								4850
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4842,
								4846,
								4843,
								4844,
								4845,
								4841
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								4854,
								4858
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4866,
								4862
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Reporter.ts",
							"line": 10,
							"character": 29
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "BenchmarkReporter",
							"id": 4893
						},
						{
							"type": "reference",
							"name": "Html",
							"id": 5701
						},
						{
							"type": "reference",
							"name": "Dom",
							"id": 5809
						},
						{
							"type": "reference",
							"name": "ConsoleReporter",
							"id": 5862
						},
						{
							"type": "reference",
							"name": "Coverage",
							"id": 6332
						},
						{
							"type": "reference",
							"name": "JUnit",
							"id": 6761
						},
						{
							"type": "reference",
							"name": "TeamCity",
							"id": 7020
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						}
					]
				},
				{
					"id": 4871,
					"name": "ReporterOutput",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A stream that reporters can write to"
					},
					"children": [
						{
							"id": 4877,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4878,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4879,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Buffer"
													}
												]
											}
										},
										{
											"id": 4880,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 4881,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 154,
									"character": 5
								}
							]
						},
						{
							"id": 4872,
							"name": "write",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 4873,
									"name": "write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4874,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Buffer"
													}
												]
											}
										},
										{
											"id": 4875,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 4876,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 153,
									"character": 7
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4877,
								4872
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Reporter.ts",
							"line": 152,
							"character": 31
						}
					]
				},
				{
					"id": 4868,
					"name": "ReporterProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4870,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							}
						},
						{
							"id": 4869,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4870,
								4869
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Reporter.ts",
							"line": 142,
							"character": 35
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "BenchmarkReporterProperties",
							"id": 4987
						},
						{
							"type": "reference",
							"name": "HtmlProperties",
							"id": 5772
						},
						{
							"type": "reference",
							"name": "DomProperties",
							"id": 5855
						},
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						},
						{
							"type": "reference",
							"name": "JUnitProperties",
							"id": 6792
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "BenchmarkReporter",
							"id": 4893
						},
						{
							"type": "reference",
							"name": "Cobertura",
							"id": 6826
						},
						{
							"type": "reference",
							"name": "ConsoleReporter",
							"id": 5862
						},
						{
							"type": "reference",
							"name": "Coverage",
							"id": 6332
						},
						{
							"type": "reference",
							"name": "Dom",
							"id": 5809
						},
						{
							"type": "reference",
							"name": "Html",
							"id": 5701
						},
						{
							"type": "reference",
							"name": "HtmlCoverage",
							"id": 6923
						},
						{
							"type": "reference",
							"name": "JUnit",
							"id": 6761
						},
						{
							"type": "reference",
							"name": "JsonCoverage",
							"id": 6879
						},
						{
							"type": "reference",
							"name": "LcovCoverage",
							"id": 6976
						},
						{
							"type": "reference",
							"name": "Pretty",
							"id": 6440
						},
						{
							"type": "reference",
							"name": "Reporter",
							"id": 4840
						},
						{
							"type": "reference",
							"name": "Runner",
							"id": 6595
						},
						{
							"type": "reference",
							"name": "Simple",
							"id": 6704
						},
						{
							"type": "reference",
							"name": "TeamCity",
							"id": 7020
						},
						{
							"type": "reference",
							"name": "TextCoverage",
							"id": 6387
						}
					]
				},
				{
					"id": 4887,
					"name": "ReporterOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Reporter.ts",
							"line": 147,
							"character": 27
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "ReporterProperties",
								"id": 4868
							}
						]
					}
				},
				{
					"id": 4886,
					"name": "eventHandler",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "The default event handler decorator."
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Reporter.ts",
							"line": 140,
							"character": 25
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					},
					"defaultValue": " createEventHandler()"
				},
				{
					"id": 4882,
					"name": "createEventHandler",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 4883,
							"name": "createEventHandler",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a decorator that will add a decorated method to a class's list of\nevent handlers."
							},
							"typeParameter": [
								{
									"id": 4884,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Events",
										"id": 4799
									}
								},
								{
									"id": 4885,
									"name": "N",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NoDataEvents",
										"id": 4838
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Reporter.ts",
							"line": 100,
							"character": 34
						}
					]
				},
				{
					"id": 4888,
					"name": "getConsole",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 4889,
							"name": "getConsole",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Console"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Reporter.ts",
							"line": 157,
							"character": 19
						}
					]
				},
				{
					"id": 4890,
					"name": "noop",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 4891,
							"name": "noop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Reporter.ts",
							"line": 178,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						4840
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						4871,
						4868
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						4887
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						4886
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						4882,
						4888,
						4890
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Reporter.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6594,
			"name": "\"core/lib/reporters/Runner\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Runner.ts",
			"children": [
				{
					"id": 6595,
					"name": "Runner",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6612,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6613,
									"name": "new Runner",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6614,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										},
										{
											"id": 6615,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Partial",
												"typeArguments": [
													{
														"type": "reference",
														"name": "RunnerProperties",
														"id": 6691
													}
												]
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Runner",
										"id": 6595
									},
									"overwrites": {
										"type": "reference",
										"name": "TextCoverage.__constructor",
										"id": 6390
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 36,
									"character": 25
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "TextCoverage.__constructor",
								"id": 6390
							}
						},
						{
							"id": 6669,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 6673,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6674,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6675,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6676,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 6670,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 6671,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 6672,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 6611,
							"name": "charm",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 36,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Charm",
								"id": 6701
							}
						},
						{
							"id": 6663,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.directory",
								"id": 6336
							},
							"implementationOf": {
								"type": "reference",
								"name": "RunnerProperties.directory",
								"id": 6697
							}
						},
						{
							"id": 6661,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 18,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.executor",
								"id": 6334
							}
						},
						{
							"id": 6662,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.filename",
								"id": 6335
							},
							"implementationOf": {
								"type": "reference",
								"name": "RunnerProperties.filename",
								"id": 6696
							}
						},
						{
							"id": 6605,
							"name": "hasRunErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 27,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 6606,
							"name": "hasSuiteErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 28,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 6607,
							"name": "hidePassed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 29,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "RunnerProperties.hidePassed",
								"id": 6692
							}
						},
						{
							"id": 6608,
							"name": "hideSkipped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 30,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "RunnerProperties.hideSkipped",
								"id": 6693
							}
						},
						{
							"id": 6609,
							"name": "hideTunnelDownloadProgress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 31,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "RunnerProperties.hideTunnelDownloadProgress",
								"id": 6694
							}
						},
						{
							"id": 6655,
							"name": "maxColumns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 7,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverage.maxColumns",
								"id": 6389
							},
							"implementationOf": {
								"type": "reference",
								"name": "RunnerProperties.maxColumns",
								"id": 6695
							}
						},
						{
							"id": 6654,
							"name": "reportType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 6,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "ReportType"
							},
							"defaultValue": "\"text\"",
							"overwrites": {
								"type": "reference",
								"name": "Coverage.reportType",
								"id": 6333
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverage.reportType",
								"id": 6388
							}
						},
						{
							"id": 6610,
							"name": "serveOnly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 32,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 6596,
							"name": "sessions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 19,
									"character": 10
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 6597,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 6598,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 6599,
													"name": "sessionId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 6600,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 6603,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 6604,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"children": [
														{
															"id": 6601,
															"name": "coverage",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/core/lib/reporters/Runner.ts",
																	"line": 21,
																	"character": 14
																}
															],
															"type": {
																"type": "reference",
																"name": "CoverageMap"
															}
														},
														{
															"id": 6602,
															"name": "suite",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/core/lib/reporters/Runner.ts",
																	"line": 22,
																	"character": 11
																}
															],
															"type": {
																"type": "reference",
																"name": "Suite",
																"id": 3566
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																6601,
																6602
															]
														}
													],
													"sources": [
														{
															"fileName": "src/core/lib/reporters/Runner.ts",
															"line": 20,
															"character": 24
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "src/core/lib/reporters/Runner.ts",
											"line": 19,
											"character": 11
										}
									]
								}
							}
						},
						{
							"id": 6664,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.watermarks",
								"id": 6337
							},
							"implementationOf": {
								"type": "reference",
								"name": "RunnerProperties.watermarks",
								"id": 6698
							}
						},
						{
							"id": 6677,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6678,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 6679,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6680,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "RunnerProperties.console",
								"id": 6700
							}
						},
						{
							"id": 6681,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6682,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 6683,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6684,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "RunnerProperties.output",
								"id": 6699
							}
						},
						{
							"id": 6689,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6690,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 6616,
							"name": "coverage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6617,
									"name": "coverage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6618,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CoverageMessage",
												"id": 4788
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 59,
									"character": 10
								}
							]
						},
						{
							"id": 6665,
							"name": "createCoverageReport",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6666,
									"name": "createCoverageReport",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6667,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReportType"
											}
										},
										{
											"id": 6668,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CoverageMapData"
													},
													{
														"type": "reference",
														"name": "CoverageMap"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.createCoverageReport",
										"id": 6347
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 44,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.createCoverageReport",
								"id": 6347
							}
						},
						{
							"id": 6619,
							"name": "deprecated",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6620,
									"name": "deprecated",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6621,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DeprecationMessage",
												"id": 4792
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 74,
									"character": 12
								}
							]
						},
						{
							"id": 6622,
							"name": "error",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6623,
									"name": "error",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6624,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 104,
									"character": 7
								}
							]
						},
						{
							"id": 6685,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6686,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6687,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 6688,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 6656,
							"name": "getReporterOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6657,
									"name": "getReporterOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6658,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6659,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6660,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/TextCoverage.ts",
													"line": 17,
													"character": 23
												}
											]
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.getReporterOptions",
										"id": 6342
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TextCoverage.getReporterOptions",
										"id": 6394
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 17,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.getReporterOptions",
								"id": 6342
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverage.getReporterOptions",
								"id": 6394
							}
						},
						{
							"id": 6628,
							"name": "log",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6629,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6630,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 124,
									"character": 5
								}
							]
						},
						{
							"id": 6631,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6632,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.runEnd",
										"id": 6351
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 131,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.runEnd",
								"id": 6351
							}
						},
						{
							"id": 6633,
							"name": "serverStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6634,
									"name": "serverStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6635,
											"name": "server",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Server",
												"id": 6285
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 193,
									"character": 13
								}
							]
						},
						{
							"id": 6636,
							"name": "suiteEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6637,
									"name": "suiteEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6638,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 209,
									"character": 10
								}
							]
						},
						{
							"id": 6639,
							"name": "suiteStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6640,
									"name": "suiteStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6641,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 274,
									"character": 12
								}
							]
						},
						{
							"id": 6642,
							"name": "testEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6643,
									"name": "testEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6644,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 291,
									"character": 9
								}
							]
						},
						{
							"id": 6645,
							"name": "tunnelDownloadProgress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6646,
									"name": "tunnelDownloadProgress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6647,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TunnelMessage",
												"id": 7726
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 322,
									"character": 24
								}
							]
						},
						{
							"id": 6648,
							"name": "tunnelStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6649,
									"name": "tunnelStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6650,
											"name": "_",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TunnelMessage",
												"id": 7726
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 336,
									"character": 13
								}
							]
						},
						{
							"id": 6651,
							"name": "tunnelStatus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6652,
									"name": "tunnelStatus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6653,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TunnelMessage",
												"id": 7726
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 341,
									"character": 14
								}
							]
						},
						{
							"id": 6625,
							"name": "warning",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6626,
									"name": "warning",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6627,
											"name": "warning",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Error"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 114,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6612
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6669,
								6673,
								6670,
								6671,
								6672,
								6611,
								6663,
								6661,
								6662,
								6605,
								6606,
								6607,
								6608,
								6609,
								6655,
								6654,
								6610,
								6596,
								6664
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6677,
								6681
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6689,
								6616,
								6665,
								6619,
								6622,
								6685,
								6656,
								6628,
								6631,
								6633,
								6636,
								6639,
								6642,
								6645,
								6648,
								6651,
								6625
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Runner.ts",
							"line": 18,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextCoverage",
							"id": 6387
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						},
						{
							"type": "reference",
							"name": "TextCoverageProperties",
							"id": 6431
						},
						{
							"type": "reference",
							"name": "RunnerProperties",
							"id": 6691
						}
					]
				},
				{
					"id": 6691,
					"name": "RunnerProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6700,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 6697,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A direcotry to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 79,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.directory",
								"id": 6377
							}
						},
						{
							"id": 6696,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A filename to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 76,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.filename",
								"id": 6376
							}
						},
						{
							"id": 6692,
							"name": "hidePassed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 347,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 6693,
							"name": "hideSkipped",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 348,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 6694,
							"name": "hideTunnelDownloadProgress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Runner.ts",
									"line": 349,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 6695,
							"name": "maxColumns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Maximum number of columns"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 28,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverageProperties.maxColumns",
								"id": 6432
							}
						},
						{
							"id": 6699,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 6698,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Watermarks used to check coverage"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 82,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.watermarks",
								"id": 6378
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6700,
								6697,
								6696,
								6692,
								6693,
								6694,
								6695,
								6699,
								6698
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Runner.ts",
							"line": 346,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextCoverageProperties",
							"id": 6431
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "Runner",
							"id": 6595
						}
					]
				},
				{
					"id": 6701,
					"name": "Charm",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Runner.ts",
							"line": 14,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "CharmInstance"
					}
				},
				{
					"id": 6702,
					"name": "eventHandler",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Runner.ts",
							"line": 16,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					},
					"defaultValue": " createEventHandler<NodeEvents>()"
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6595
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						6691
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						6701
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						6702
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Runner.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6703,
			"name": "\"core/lib/reporters/Simple\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/Simple.ts",
			"children": [
				{
					"id": 6704,
					"name": "Simple",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Simple reporter outputs to the terminal console."
					},
					"children": [
						{
							"id": 6719,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6720,
									"name": "new Simple",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6721,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										},
										{
											"id": 6722,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TextCoverageOptions",
												"id": 6438
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Simple",
										"id": 6704
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.__constructor",
										"id": 6338
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TextCoverage.__constructor",
										"id": 6390
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 7,
									"character": 33
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.__constructor",
								"id": 6338
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverage.__constructor",
								"id": 6390
							}
						},
						{
							"id": 6738,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 6742,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6743,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6744,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6745,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 6739,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 6740,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 6741,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 6730,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.directory",
								"id": 6336
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.directory",
								"id": 6434
							}
						},
						{
							"id": 6728,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 18,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.executor",
								"id": 6334
							}
						},
						{
							"id": 6729,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.filename",
								"id": 6335
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.filename",
								"id": 6433
							}
						},
						{
							"id": 6718,
							"name": "maxColumns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 7,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverage.maxColumns",
								"id": 6389
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.maxColumns",
								"id": 6432
							}
						},
						{
							"id": 6717,
							"name": "reportType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 6,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "ReportType"
							},
							"defaultValue": "\"text\"",
							"overwrites": {
								"type": "reference",
								"name": "Coverage.reportType",
								"id": 6333
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverage.reportType",
								"id": 6388
							}
						},
						{
							"id": 6731,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.watermarks",
								"id": 6337
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.watermarks",
								"id": 6435
							}
						},
						{
							"id": 6746,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6747,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 6748,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6749,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.console",
								"id": 6437
							}
						},
						{
							"id": 6750,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6751,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 6752,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6753,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.output",
								"id": 6436
							}
						},
						{
							"id": 6758,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6759,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 6732,
							"name": "createCoverageReport",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6733,
									"name": "createCoverageReport",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6734,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReportType"
											}
										},
										{
											"id": 6735,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CoverageMapData"
													},
													{
														"type": "reference",
														"name": "CoverageMap"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.createCoverageReport",
										"id": 6347
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 44,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.createCoverageReport",
								"id": 6347
							}
						},
						{
							"id": 6705,
							"name": "error",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6706,
									"name": "error",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6707,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Simple.ts",
									"line": 11,
									"character": 7
								}
							]
						},
						{
							"id": 6754,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6755,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6756,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 6757,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 6723,
							"name": "getReporterOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6724,
									"name": "getReporterOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6725,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6726,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6727,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/TextCoverage.ts",
													"line": 17,
													"character": 23
												}
											]
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.getReporterOptions",
										"id": 6342
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "TextCoverage.getReporterOptions",
										"id": 6394
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 17,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.getReporterOptions",
								"id": 6342
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TextCoverage.getReporterOptions",
								"id": 6394
							}
						},
						{
							"id": 6708,
							"name": "log",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6709,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6710,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Simple.ts",
									"line": 16,
									"character": 5
								}
							]
						},
						{
							"id": 6736,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6737,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.runEnd",
										"id": 6351
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 66,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.runEnd",
								"id": 6351
							}
						},
						{
							"id": 6711,
							"name": "suiteEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6712,
									"name": "suiteEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6713,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Simple.ts",
									"line": 23,
									"character": 10
								}
							]
						},
						{
							"id": 6714,
							"name": "testEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6715,
									"name": "testEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6716,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Simple.ts",
									"line": 45,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6719
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6738,
								6742,
								6739,
								6740,
								6741,
								6730,
								6728,
								6729,
								6718,
								6717,
								6731
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6746,
								6750
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6758,
								6732,
								6705,
								6754,
								6723,
								6708,
								6736,
								6711,
								6714
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/Simple.ts",
							"line": 9,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TextCoverage",
							"id": 6387
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						},
						{
							"type": "reference",
							"name": "TextCoverageProperties",
							"id": 6431
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6704
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/Simple.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7019,
			"name": "\"core/lib/reporters/TeamCity\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/TeamCity.ts",
			"children": [
				{
					"id": 7020,
					"name": "TeamCity",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This reporter enables Intern to interact with TeamCity.\nhttp://confluence.jetbrains.com/display/TCD8/Build+Script+Interaction+with+TeamCity",
						"text": "Portions of this module are based on functions from\nteamcity-service-messages:\nhttps://github.com/pifantastic/teamcity-service-messages.\n"
					},
					"children": [
						{
							"id": 7051,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7052,
									"name": "new TeamCity",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 7053,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Executor",
												"id": 4575
											}
										},
										{
											"id": 7054,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOptions",
												"id": 4887
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "TeamCity",
										"id": 7020
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.__constructor",
										"id": 4850
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 72
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.__constructor",
								"id": 4850
							}
						},
						{
							"id": 7043,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 7047,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 7048,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 7049,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 7050,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 7044,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 7045,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 7021,
							"name": "_ignoredTestIds",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TeamCity.ts",
									"line": 14,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 7022,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 7023,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 7024,
															"name": "sessionId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 7025,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 7026,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 7027,
																			"name": "testId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/core/lib/reporters/TeamCity.ts",
																	"line": 15,
																	"character": 28
																}
															]
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/TeamCity.ts",
													"line": 15,
													"character": 5
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 7046,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 7042,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 11,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Executor",
								"id": 4575
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							}
						},
						{
							"id": 7055,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 7056,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 7057,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 7058,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 7059,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 7060,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 7061,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 7062,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 7067,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 7068,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 7063,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 7064,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7065,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 7066,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 7028,
							"name": "runStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 7029,
									"name": "runStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TeamCity.ts",
									"line": 19,
									"character": 10
								}
							]
						},
						{
							"id": 7039,
							"name": "suiteEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 7040,
									"name": "suiteEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7041,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TeamCity.ts",
									"line": 71,
									"character": 10
								}
							]
						},
						{
							"id": 7036,
							"name": "suiteStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 7037,
									"name": "suiteStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7038,
											"name": "suite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Suite",
												"id": 3566
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TeamCity.ts",
									"line": 62,
									"character": 12
								}
							]
						},
						{
							"id": 7033,
							"name": "testEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 7034,
									"name": "testEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7035,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TeamCity.ts",
									"line": 32,
									"character": 9
								}
							]
						},
						{
							"id": 7030,
							"name": "testStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 7031,
									"name": "testStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 7032,
											"name": "test",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Test",
												"id": 3484
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TeamCity.ts",
									"line": 24,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								7051
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7043,
								7047,
								7044,
								7045,
								7021,
								7046,
								7042
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								7055,
								7059
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								7067,
								7063,
								7028,
								7039,
								7036,
								7033,
								7030
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/TeamCity.ts",
							"line": 13,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Reporter",
							"id": 4840
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						7020
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/TeamCity.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 6386,
			"name": "\"core/lib/reporters/TextCoverage\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/TextCoverage.ts",
			"children": [
				{
					"id": 6387,
					"name": "TextCoverage",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6390,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6391,
									"name": "new TextCoverage",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 6392,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Node",
												"id": 7070
											}
										},
										{
											"id": 6393,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TextCoverageOptions",
												"id": 6438
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "TextCoverage",
										"id": 6387
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.__constructor",
										"id": 6338
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 7,
									"character": 33
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.__constructor",
								"id": 6338
							}
						},
						{
							"id": 6409,
							"name": "_console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Console"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._console",
								"id": 4842
							}
						},
						{
							"id": 6413,
							"name": "_eventHandlers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "A mapping from event names to the names of methods on this object. This\nproperty should be defined on the class prototype. It is automatically\ncreated by the @eventHandler decorator."
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 23,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 6414,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6415,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6416,
															"name": "eventName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/Reporter.ts",
													"line": 23,
													"character": 27
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._eventHandlers",
								"id": 4846
							}
						},
						{
							"id": 6410,
							"name": "_executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 14,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Executor",
										"id": 4575
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._executor",
								"id": 4843
							}
						},
						{
							"id": 6411,
							"name": "_handles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 15,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Handle",
											"id": 133
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._handles",
								"id": 4844
							}
						},
						{
							"id": 6412,
							"name": "_output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._output",
								"id": 4845
							}
						},
						{
							"id": 6401,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.directory",
								"id": 6336
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.directory",
								"id": 6434
							}
						},
						{
							"id": 6399,
							"name": "executor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 18,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Node",
								"id": 7070
							},
							"overwrites": {
								"type": "reference",
								"name": "Reporter.executor",
								"id": 4841
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.executor",
								"id": 6334
							}
						},
						{
							"id": 6400,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 20,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.filename",
								"id": 6335
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.filename",
								"id": 6433
							}
						},
						{
							"id": 6389,
							"name": "maxColumns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 7,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.maxColumns",
								"id": 6432
							}
						},
						{
							"id": 6388,
							"name": "reportType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 6,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "ReportType"
							},
							"defaultValue": "\"text\"",
							"overwrites": {
								"type": "reference",
								"name": "Coverage.reportType",
								"id": 6333
							}
						},
						{
							"id": 6402,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.watermarks",
								"id": 6337
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.watermarks",
								"id": 6435
							}
						},
						{
							"id": 6417,
							"name": "console",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6418,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Console"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"setSignature": [
								{
									"id": 6419,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6420,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Console"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.console",
										"id": 4854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 36,
									"character": 13
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.console",
								"id": 4854
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.console",
								"id": 6437
							}
						},
						{
							"id": 6421,
							"name": "output",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 6422,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReporterOutput",
										"id": 4871
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"setSignature": [
								{
									"id": 6423,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"parameters": [
										{
											"id": 6424,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterOutput",
												"id": 4871
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.output",
										"id": 4858
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 47,
									"character": 12
								},
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 70,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.output",
								"id": 4858
							},
							"implementationOf": {
								"type": "reference",
								"name": "TextCoverageProperties.output",
								"id": 6436
							}
						},
						{
							"id": 6429,
							"name": "_registerEventHandlers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 6430,
									"name": "_registerEventHandlers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register any handlers added to the class event handlers map"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter._registerEventHandlers",
										"id": 4866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 81,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter._registerEventHandlers",
								"id": 4866
							}
						},
						{
							"id": 6403,
							"name": "createCoverageReport",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6404,
									"name": "createCoverageReport",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6405,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReportType"
											}
										},
										{
											"id": 6406,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CoverageMapData"
													},
													{
														"type": "reference",
														"name": "CoverageMap"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.createCoverageReport",
										"id": 6347
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 44,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.createCoverageReport",
								"id": 6347
							}
						},
						{
							"id": 6425,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6426,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 6427,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 6428,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions",
												"id": 3705
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reporter.formatError",
										"id": 4862
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 74,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reporter.formatError",
								"id": 4862
							}
						},
						{
							"id": 6394,
							"name": "getReporterOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6395,
									"name": "getReporterOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 6396,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 6397,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 6398,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/reporters/TextCoverage.ts",
													"line": 17,
													"character": 23
												}
											]
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Coverage.getReporterOptions",
										"id": 6342
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 17,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Coverage.getReporterOptions",
								"id": 6342
							}
						},
						{
							"id": 6407,
							"name": "runEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "eventHandler",
									"type": {
										"type": "reference",
										"name": "eventHandler"
									},
									"arguments": {
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 6408,
									"name": "runEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Coverage.runEnd",
										"id": 6351
									}
								}
							],
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 66,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Coverage.runEnd",
								"id": 6351
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6390
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6409,
								6413,
								6410,
								6411,
								6412,
								6401,
								6399,
								6400,
								6389,
								6388,
								6402
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								6417,
								6421
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								6429,
								6403,
								6425,
								6394,
								6407
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/TextCoverage.ts",
							"line": 4,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Coverage",
							"id": 6332
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Pretty",
							"id": 6440
						},
						{
							"type": "reference",
							"name": "Runner",
							"id": 6595
						},
						{
							"type": "reference",
							"name": "Simple",
							"id": 6704
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ReporterProperties",
							"id": 4868
						},
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						},
						{
							"type": "reference",
							"name": "TextCoverageProperties",
							"id": 6431
						}
					]
				},
				{
					"id": 6431,
					"name": "TextCoverageProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 6437,
							"name": "console",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 144,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Console"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.console",
								"id": 4870
							}
						},
						{
							"id": 6434,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A direcotry to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 79,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.directory",
								"id": 6377
							}
						},
						{
							"id": 6433,
							"name": "filename",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A filename to write coverage data to"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 76,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.filename",
								"id": 6376
							}
						},
						{
							"id": 6432,
							"name": "maxColumns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Maximum number of columns"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/TextCoverage.ts",
									"line": 28,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 6436,
							"name": "output",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Reporter.ts",
									"line": 143,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterOutput",
								"id": 4871
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReporterProperties.output",
								"id": 4869
							}
						},
						{
							"id": 6435,
							"name": "watermarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Watermarks used to check coverage"
							},
							"sources": [
								{
									"fileName": "src/core/lib/reporters/Coverage.ts",
									"line": 82,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Watermarks"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "CoverageProperties.watermarks",
								"id": 6378
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6437,
								6434,
								6433,
								6432,
								6436,
								6435
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/reporters/TextCoverage.ts",
							"line": 26,
							"character": 39
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "CoverageProperties",
							"id": 6375
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "PrettyProperties",
							"id": 6527
						},
						{
							"type": "reference",
							"name": "RunnerProperties",
							"id": 6691
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "Pretty",
							"id": 6440
						},
						{
							"type": "reference",
							"name": "Runner",
							"id": 6595
						},
						{
							"type": "reference",
							"name": "Simple",
							"id": 6704
						},
						{
							"type": "reference",
							"name": "TextCoverage",
							"id": 6387
						}
					]
				},
				{
					"id": 6438,
					"name": "TextCoverageOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/TextCoverage.ts",
							"line": 31,
							"character": 31
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "TextCoverageProperties",
								"id": 6431
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						6387
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						6431
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						6438
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/TextCoverage.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5693,
			"name": "\"core/lib/reporters/html/icons\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/reporters/html/icons.ts",
			"children": [
				{
					"id": 5696,
					"name": "failIcon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/html/icons.ts",
							"line": 28,
							"character": 21
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M6.576 6.576c-5.205 5.205-5.205 13.643 0 18.849s13.643 5.205 18.849-0c5.206-5.206 5.206-13.643 0-18.849s-13.643-5.205-18.849 0zM24.67 24.67c-4.781 4.781-12.56 4.781-17.341 0s-4.781-12.56 0-17.341c4.781-4.781 12.56-4.781 17.341 0s4.78 12.56-0 17.341z\" fill=\"#000000\"></path>\n<path d=\"M10.722 9.969l-0.754 0.754 5.278 5.278-5.253 5.253 0.754 0.754 5.253-5.253 5.253 5.253 0.754-0.754-5.253-5.253 5.278-5.278-0.754-0.754-5.278 5.278z\" fill=\"#000000\"></path>\n</svg>"
					},
					"defaultValue": " `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M6.576 6.576c-5.205 5.205-5.205 13.643 0 18.849s13.643 5.205 18.849-0c5.206-5.206 5.206-13.643 0-18.849s-13.643-5.205-18.849 0zM24.67 24.67c-4.781 4.781-12.56 4.781-17.341 0s-4.781-12.56 0-17.341c4.781-4.781 12.56-4.781 17.341 0s4.78 12.56-0 17.341z\" fill=\"#000000\"></path>\n<path d=\"M10.722 9.969l-0.754 0.754 5.278 5.278-5.253 5.253 0.754 0.754 5.253-5.253 5.253 5.253 0.754-0.754-5.253-5.253 5.278-5.278-0.754-0.754-5.278 5.278z\" fill=\"#000000\"></path>\n</svg>`"
				},
				{
					"id": 5695,
					"name": "passIcon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/html/icons.ts",
							"line": 17,
							"character": 21
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M16 2.672c-7.361 0-13.328 5.967-13.328 13.328s5.968 13.328 13.328 13.328c7.361 0 13.328-5.967 13.328-13.328s-5.967-13.328-13.328-13.328zM16 28.262c-6.761 0-12.262-5.501-12.262-12.262s5.5-12.262 12.262-12.262c6.761 0 12.262 5.501 12.262 12.262s-5.5 12.262-12.262 12.262z\" fill=\"#000000\"></path>\n<path d=\"M22.667 11.241l-8.559 8.299-2.998-2.998c-0.312-0.312-0.818-0.312-1.131 0s-0.312 0.818 0 1.131l3.555 3.555c0.156 0.156 0.361 0.234 0.565 0.234 0.2 0 0.401-0.075 0.556-0.225l9.124-8.848c0.317-0.308 0.325-0.814 0.018-1.131-0.309-0.318-0.814-0.325-1.131-0.018z\" fill=\"#000000\"></path>\n</svg>"
					},
					"defaultValue": " `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M16 2.672c-7.361 0-13.328 5.967-13.328 13.328s5.968 13.328 13.328 13.328c7.361 0 13.328-5.967 13.328-13.328s-5.967-13.328-13.328-13.328zM16 28.262c-6.761 0-12.262-5.501-12.262-12.262s5.5-12.262 12.262-12.262c6.761 0 12.262 5.501 12.262 12.262s-5.5 12.262-12.262 12.262z\" fill=\"#000000\"></path>\n<path d=\"M22.667 11.241l-8.559 8.299-2.998-2.998c-0.312-0.312-0.818-0.312-1.131 0s-0.312 0.818 0 1.131l3.555 3.555c0.156 0.156 0.361 0.234 0.565 0.234 0.2 0 0.401-0.075 0.556-0.225l9.124-8.848c0.317-0.308 0.325-0.814 0.018-1.131-0.309-0.318-0.814-0.325-1.131-0.018z\" fill=\"#000000\"></path>\n</svg>`"
				},
				{
					"id": 5698,
					"name": "skipIcon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/html/icons.ts",
							"line": 49,
							"character": 21
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M16 2.672c-7.362 0-13.328 5.966-13.328 13.328s5.966 13.328 13.328 13.328c7.362 0 13.328-5.966 13.328-13.328s-5.966-13.328-13.328-13.328zM16 28.262c-6.761 0-12.262-5.501-12.262-12.262s5.501-12.262 12.262-12.262c6.761 0 12.262 5.501 12.262 12.262s-5.501 12.262-12.262 12.262z\" fill=\"#000000\"></path>\n<path d=\"M9.105 15.467h13.826v1.066h-13.826v-1.066z\" fill=\"#000000\"></path>\n</svg>"
					},
					"defaultValue": " `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M16 2.672c-7.362 0-13.328 5.966-13.328 13.328s5.966 13.328 13.328 13.328c7.362 0 13.328-5.966 13.328-13.328s-5.966-13.328-13.328-13.328zM16 28.262c-6.761 0-12.262-5.501-12.262-12.262s5.501-12.262 12.262-12.262c6.761 0 12.262 5.501 12.262 12.262s-5.501 12.262-12.262 12.262z\" fill=\"#000000\"></path>\n<path d=\"M9.105 15.467h13.826v1.066h-13.826v-1.066z\" fill=\"#000000\"></path>\n</svg>`"
				},
				{
					"id": 5694,
					"name": "suitesIcon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/html/icons.ts",
							"line": 5,
							"character": 23
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M1.606 7.47v21.325h28.789v-21.325h-28.789zM29.328 27.729h-26.656v-19.192h26.656v19.192z\" fill=\"#000000\"></path>\n<path d=\"M3.738 5.338h24.524v1.066h-24.524v-1.066z\" fill=\"#000000\"></path>\n<path d=\"M5.871 3.205h20.259v1.066h-20.259v-1.066z\" fill=\"#000000\"></path>\n</svg>"
					},
					"defaultValue": " `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M1.606 7.47v21.325h28.789v-21.325h-28.789zM29.328 27.729h-26.656v-19.192h26.656v19.192z\" fill=\"#000000\"></path>\n<path d=\"M3.738 5.338h24.524v1.066h-24.524v-1.066z\" fill=\"#000000\"></path>\n<path d=\"M5.871 3.205h20.259v1.066h-20.259v-1.066z\" fill=\"#000000\"></path>\n</svg>`"
				},
				{
					"id": 5697,
					"name": "testsIcon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/html/icons.ts",
							"line": 39,
							"character": 22
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M18.726 3.773l-1.375 11.16h6.088l-10.165 13.293 1.376-11.16h-6.088l10.165-13.293zM20.265 0.006l-13.861 18.126h7.040l-1.709 13.861 13.861-18.126h-7.040l1.709-13.861z\" fill=\"#000000\"></path>\n</svg>"
					},
					"defaultValue": " `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M18.726 3.773l-1.375 11.16h6.088l-10.165 13.293 1.376-11.16h-6.088l10.165-13.293zM20.265 0.006l-13.861 18.126h7.040l-1.709 13.861 13.861-18.126h-7.040l1.709-13.861z\" fill=\"#000000\"></path>\n</svg>`"
				},
				{
					"id": 5699,
					"name": "timeIcon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/reporters/html/icons.ts",
							"line": 60,
							"character": 21
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M25.039 8.781l0.902-0.902 0.914 0.914 1.131-1.131-2.582-2.582-1.131 1.131 0.914 0.914-0.902 0.902c-1.999-1.833-4.607-3.008-7.485-3.195v-2.161h-1.599v2.161c-6.399 0.412-11.462 5.73-11.462 12.234 0 6.772 5.49 12.262 12.262 12.262s12.262-5.489 12.262-12.262c0-3.195-1.222-6.103-3.223-8.285zM16 28.262c-6.173 0-11.196-5.023-11.196-11.196s5.023-11.196 11.196-11.196 11.196 5.022 11.196 11.196c0 6.173-5.023 11.196-11.196 11.196z\" fill=\"#000000\"></path>\n<path d=\"M16.533 15.565v-7.029h-1.066v7.029c-0.62 0.221-1.066 0.806-1.066 1.502s0.447 1.281 1.066 1.502v2.23h1.066v-2.23c0.62-0.221 1.066-0.806 1.066-1.502s-0.447-1.281-1.066-1.502z\" fill=\"#000000\"></path>\n</svg>"
					},
					"defaultValue": " `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generated by IcoMoon.io -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<g id=\"icomoon-ignore\">\n</g>\n<path d=\"M25.039 8.781l0.902-0.902 0.914 0.914 1.131-1.131-2.582-2.582-1.131 1.131 0.914 0.914-0.902 0.902c-1.999-1.833-4.607-3.008-7.485-3.195v-2.161h-1.599v2.161c-6.399 0.412-11.462 5.73-11.462 12.234 0 6.772 5.49 12.262 12.262 12.262s12.262-5.489 12.262-12.262c0-3.195-1.222-6.103-3.223-8.285zM16 28.262c-6.173 0-11.196-5.023-11.196-11.196s5.023-11.196 11.196-11.196 11.196 5.022 11.196 11.196c0 6.173-5.023 11.196-11.196 11.196z\" fill=\"#000000\"></path>\n<path d=\"M16.533 15.565v-7.029h-1.066v7.029c-0.62 0.221-1.066 0.806-1.066 1.502s0.447 1.281 1.066 1.502v2.23h1.066v-2.23c0.62-0.221 1.066-0.806 1.066-1.502s-0.447-1.281-1.066-1.502z\" fill=\"#000000\"></path>\n</svg>`"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						5696,
						5695,
						5698,
						5694,
						5697,
						5699
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/reporters/html/icons.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5597,
			"name": "\"core/lib/resolveEnvironments\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/resolveEnvironments.ts",
			"children": [
				{
					"id": 5598,
					"name": "EnvironmentOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 5601,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 5602,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 5599,
							"name": "browserName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/resolveEnvironments.ts",
									"line": 55,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 5600,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/resolveEnvironments.ts",
									"line": 56,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5599,
								5600
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 54,
							"character": 35
						}
					]
				},
				{
					"id": 5603,
					"name": "FlatEnvironment",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 5606,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 5607,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 5604,
							"name": "browserName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/resolveEnvironments.ts",
									"line": 61,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5605,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/resolveEnvironments.ts",
									"line": 62,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5604,
								5605
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 60,
							"character": 32
						}
					]
				},
				{
					"id": 5646,
					"name": "createPermutations",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5647,
							"name": "createPermutations",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Builds permutations of an object by flattening properties holding array\nvalues into a collection of objects representing all combinations of objects\nfor all arrays in the object.",
								"returns": "a flattened collection of sources\n"
							},
							"parameters": [
								{
									"id": 5648,
									"name": "base",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a base set of properties applied to each source"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 5649,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 5650,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 5651,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/resolveEnvironments.ts",
													"line": 344,
													"character": 7
												}
											]
										}
									}
								},
								{
									"id": 5652,
									"name": "sources",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "a list of sources to flatten"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EnvironmentOptions",
											"id": 5598
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "FlatEnvironment",
									"id": 5603
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 343,
							"character": 27
						}
					]
				},
				{
					"id": 5616,
					"name": "expandPwd",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5617,
							"name": "expandPwd",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Expands {pwd} placeholders in a value. The value is assumed to be a string,\nsimple object, or array of strings or simple objects."
							},
							"typeParameter": [
								{
									"id": 5618,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 5619,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 70,
							"character": 18
						}
					]
				},
				{
					"id": 5626,
					"name": "expandVersionRange",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5627,
							"name": "expandVersionRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Expands a range of versions using available environments"
							},
							"parameters": [
								{
									"id": 5628,
									"name": "left",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5629,
									"name": "right",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5630,
									"name": "availableVersions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 112,
							"character": 27
						}
					]
				},
				{
					"id": 5638,
					"name": "getVersions",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5639,
							"name": "getVersions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get a list of versions from a list of available environments filtered by the\ncurrent environment.",
								"returns": "a list of version numbers from available filtered by the current\nenvironment\n"
							},
							"parameters": [
								{
									"id": 5640,
									"name": "environment",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the environment for which versions should match"
									},
									"type": {
										"type": "reference",
										"name": "EnvironmentOptions",
										"id": 5598
									}
								},
								{
									"id": 5641,
									"name": "available",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a list of available environments"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "NormalizedEnvironment",
											"id": 2444
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 220,
							"character": 20
						}
					]
				},
				{
					"id": 5653,
					"name": "normalizeBrowserNames",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5654,
							"name": "normalizeBrowserNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 5655,
									"name": "environments",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EnvironmentOptions",
											"id": 5598
										}
									}
								},
								{
									"id": 5656,
									"name": "available",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "NormalizedEnvironment",
											"id": 2444
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "EnvironmentOptions",
									"id": 5598
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 393,
							"character": 30
						}
					]
				},
				{
					"id": 5620,
					"name": "normalizeVersion",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5621,
							"name": "normalizeVersion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Ensure environment has both `version` and `browserVersion` properties with\nthe same value"
							},
							"parameters": [
								{
									"id": 5622,
									"name": "env",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EnvironmentOptions",
										"id": 5598
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 5623,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 5624,
											"name": "browserVersion",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/resolveEnvironments.ts",
													"line": 104,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 5625,
											"name": "version",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/lib/resolveEnvironments.ts",
													"line": 105,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"defaultValue": " browserVersion"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												5624,
												5625
											]
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 100,
							"character": 25
						}
					]
				},
				{
					"id": 5608,
					"name": "resolveEnvironments",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 5609,
							"name": "resolveEnvironments",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Resolves a collection of Intern test environments to a list of service\nenvironments",
								"returns": "a list of flattened service environments\n"
							},
							"parameters": [
								{
									"id": 5610,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a base set of capabilities for all environments"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 5611,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 5612,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 5613,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/core/lib/resolveEnvironments.ts",
													"line": 17,
													"character": 15
												}
											]
										}
									}
								},
								{
									"id": 5614,
									"name": "environments",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a list of user-requested enviromnents"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EnvironmentOptions",
											"id": 5598
										}
									}
								},
								{
									"id": 5615,
									"name": "available",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "a list of available environments"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "NormalizedEnvironment",
											"id": 2444
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Environment",
									"id": 5580
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 16,
							"character": 43
						}
					]
				},
				{
					"id": 5631,
					"name": "resolveVersionAlias",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5632,
							"name": "resolveVersionAlias",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Resolves a version alias from a list of available versions.",
								"text": "Assumes availableVersions is sorted in ascending order. Acceptable versions\nare:\n\n* '{number}'\n* 'latest'\n* 'latest-{number}'\n"
							},
							"parameters": [
								{
									"id": 5633,
									"name": "version",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 5634,
									"name": "availableVersions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 140,
							"character": 28
						}
					]
				},
				{
					"id": 5642,
					"name": "resolveVersions",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5643,
							"name": "resolveVersions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Resolves version aliases (e.g. latest, latest - 1) and version ranges (e.g.\n36 .. latest or latest - 3 .. latest) using the environment list returned by\ntunnel#getEnvironments().",
								"returns": "the environment with resolved version aliases\n"
							},
							"parameters": [
								{
									"id": 5644,
									"name": "environment",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an object with an optional version property"
									},
									"type": {
										"type": "reference",
										"name": "FlatEnvironment",
										"id": 5603
									}
								},
								{
									"id": 5645,
									"name": "available",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "a list of environment available on the target service"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "NormalizedEnvironment",
											"id": 2444
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 286,
							"character": 24
						}
					]
				},
				{
					"id": 5635,
					"name": "splitVersions",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 5636,
							"name": "splitVersions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Splits a version into one or two version strings using the '..' delimiter",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 5637,
									"name": "versionSpec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/resolveEnvironments.ts",
							"line": 199,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						5598,
						5603
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						5646,
						5616,
						5626,
						5638,
						5653,
						5620,
						5608,
						5631,
						5642,
						5635
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/resolveEnvironments.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3472,
			"name": "\"core/lib/types\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/lib/types.ts",
			"children": [
				{
					"id": 3473,
					"name": "InternError",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 3478,
							"name": "actual",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/types.ts",
									"line": 8,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 3479,
							"name": "expected",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/types.ts",
									"line": 9,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 3475,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/types.ts",
									"line": 5,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3474,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/types.ts",
									"line": 4,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3480,
							"name": "relatedTest",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/types.ts",
									"line": 10,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Test",
								"id": 3484
							}
						},
						{
							"id": 3481,
							"name": "reported",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/types.ts",
									"line": 11,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 3477,
							"name": "showDiff",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/types.ts",
									"line": 7,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 3476,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/lib/types.ts",
									"line": 6,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3478,
								3479,
								3475,
								3474,
								3480,
								3481,
								3477,
								3476
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/lib/types.ts",
							"line": 3,
							"character": 28
						}
					]
				},
				{
					"id": 3482,
					"name": "RuntimeEnvironment",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/core/lib/types.ts",
							"line": 14,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "node"
							},
							{
								"type": "stringLiteral",
								"value": "browser"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3473
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3482
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/lib/types.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7887,
			"name": "\"core/loaders/default\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/loaders/default.ts",
			"sources": [
				{
					"fileName": "src/core/loaders/default.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7888,
			"name": "\"core/loaders/dojo\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/loaders/dojo.ts",
			"sources": [
				{
					"fileName": "src/core/loaders/dojo.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7889,
			"name": "\"core/loaders/dojo2\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/loaders/dojo2.ts",
			"sources": [
				{
					"fileName": "src/core/loaders/dojo2.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7890,
			"name": "\"core/loaders/esm\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/loaders/esm.ts",
			"sources": [
				{
					"fileName": "src/core/loaders/esm.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7891,
			"name": "\"core/loaders/systemjs\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/loaders/systemjs.ts",
			"sources": [
				{
					"fileName": "src/core/loaders/systemjs.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7892,
			"name": "\"core/tasks/intern\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/core/tasks/intern.ts",
			"children": [
				{
					"id": 7893,
					"name": "TaskOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"indexSignature": [
						{
							"id": 7894,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 7895,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 7897,
							"name": "files",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/grunt/index.d.ts",
									"line": 1027,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ITaskOptions.files"
							}
						},
						{
							"id": 7896,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/grunt/index.d.ts",
									"line": 1023,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ITaskOptions.options"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7897,
								7896
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/tasks/intern.ts",
							"line": 31,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ITaskOptions"
						},
						{
							"type": "reflection",
							"declaration": {
								"id": 7898,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"sources": [
									{
										"fileName": "src/core/tasks/intern.ts",
										"line": 31,
										"character": 54
									}
								]
							}
						}
					]
				},
				{
					"id": 7899,
					"name": "getConfigAndOptions",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 7900,
							"name": "getConfigAndOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 7901,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TaskOptions",
										"id": 7893
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 7902,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 7903,
													"name": "config",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/tasks/intern.ts",
															"line": 38,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Partial",
														"typeArguments": [
															{
																"type": "reference",
																"name": "Config",
																"id": 4999
															}
														]
													}
												},
												{
													"id": 7904,
													"name": "options",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/tasks/intern.ts",
															"line": 39,
															"character": 9
														}
													],
													"type": {
														"type": "reference",
														"name": "TaskOptions",
														"id": 7893
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														7903,
														7904
													]
												}
											],
											"sources": [
												{
													"fileName": "src/core/tasks/intern.ts",
													"line": 37,
													"character": 11
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/core/tasks/intern.ts",
							"line": 35,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						7893
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						7899
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/tasks/intern.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2793,
			"name": "\"tunnels/BrowserStackTunnel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/tunnels/BrowserStackTunnel.ts",
			"children": [
				{
					"id": 2794,
					"name": "BrowserStackTunnel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A BrowserStack tunnel.",
						"text": "The accessKey and username properties will be initialized using\nBROWSERSTACK_ACCESS_KEY and BROWSERSTACK_USERNAME.\n"
					},
					"typeParameter": [
						{
							"id": 2882,
							"name": "O",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 2801,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2802,
									"name": "new BrowserStackTunnel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2803,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "BrowserStackOptions",
												"id": 2927
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BrowserStackTunnel",
										"id": 2794
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.__constructor",
										"id": 2326
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 53,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.__constructor",
								"id": 2326
							}
						},
						{
							"id": 2883,
							"name": "__typeMap__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 20,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "M",
								"id": 189
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.__typeMap__",
								"id": 192
							}
						},
						{
							"id": 2846,
							"name": "_handle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 126,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._handle",
								"id": 2323
							}
						},
						{
							"id": 2847,
							"name": "_process",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 127,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ChildProcess"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._process",
								"id": 2324
							}
						},
						{
							"id": 2844,
							"name": "_startTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 124,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._startTask",
								"id": 2321
							}
						},
						{
							"id": 2848,
							"name": "_state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 128,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "stopped"
									},
									{
										"type": "stringLiteral",
										"value": "starting"
									},
									{
										"type": "stringLiteral",
										"value": "running"
									},
									{
										"type": "stringLiteral",
										"value": "stopping"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._state",
								"id": 2325
							}
						},
						{
							"id": 2845,
							"name": "_stopTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 125,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stopTask",
								"id": 2322
							}
						},
						{
							"id": 2831,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel access key. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 35,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.accessKey",
								"id": 2305
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.accessKey",
								"id": 2913
							}
						},
						{
							"id": 2833,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The architecture the tunnel will run against. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 47,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.architecture",
								"id": 2307
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.architecture",
								"id": 2911
							}
						},
						{
							"id": 2795,
							"name": "automateOnly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to start the tunnel with only WebDriver support. Setting\nthis value to `false` is not supported."
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 26,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.automateOnly",
								"id": 2905
							}
						},
						{
							"id": 2834,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The directory where the tunnel software will be extracted. If the\ndirectory does not exist, it will be created. This value is set by the\ntunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 60,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.directory",
								"id": 2309
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.directory",
								"id": 2924
							}
						},
						{
							"id": 2796,
							"name": "environmentUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a service that provides a list of environments supported by\nthe tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 32,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.environmentUrl",
								"id": 2304
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.environmentUrl",
								"id": 2910
							}
						},
						{
							"id": 2800,
							"name": "forceLocal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, route all traffic via the local machine."
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 53,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.forceLocal",
								"id": 2909
							}
						},
						{
							"id": 2835,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The host on which a WebDriver client can access the service provided by\nthe tunnel. This may or may not be the host where the tunnel application\nis running."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 73,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.hostname",
								"id": 2311
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.hostname",
								"id": 2915
							}
						},
						{
							"id": 2797,
							"name": "killOtherTunnels",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If true, any other tunnels running on the account will be killed when\nthe tunnel is started."
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 38,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.killOtherTunnels",
								"id": 2906
							}
						},
						{
							"id": 2884,
							"name": "listenersMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "map of listeners keyed by event type"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 24,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										]
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EventedCallback",
											"id": 223,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeParameter",
													"name": "O",
													"constraint": {
														"type": "reference",
														"name": "EventObject",
														"id": 219,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												}
											]
										}
									}
								]
							},
							"defaultValue": " new Map()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.listenersMap",
								"id": 193
							}
						},
						{
							"id": 2836,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path that a WebDriver client should use to access the service\nprovided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 79,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.pathname",
								"id": 2312
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.pathname",
								"id": 2916
							}
						},
						{
							"id": 2837,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operating system the tunnel will run on. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 85,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.platform",
								"id": 2313
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.platform",
								"id": 2917
							}
						},
						{
							"id": 2838,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The local port where the WebDriver server should be exposed by the\ntunnel. This is typed as a string for Url compatibility, but should be a\nnumber."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 92,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.port",
								"id": 2314
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.port",
								"id": 2918
							}
						},
						{
							"id": 2839,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The protocol (e.g., 'http') that a WebDriver client should use to access\nthe service provided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 98,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.protocol",
								"id": 2315
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.protocol",
								"id": 2919
							}
						},
						{
							"id": 2840,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 104,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.proxy",
								"id": 2316
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.proxy",
								"id": 2925
							}
						},
						{
							"id": 2798,
							"name": "servers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of server URLs that should be proxied by the tunnel. Only the\nhostname, port, and protocol are used."
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 44,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"name": "Url"
										}
									]
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.servers",
								"id": 2907
							}
						},
						{
							"id": 2799,
							"name": "skipServerValidation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Skip verification that the proxied servers are online and responding at\nthe time the tunnel starts."
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 50,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.skipServerValidation",
								"id": 2908
							}
						},
						{
							"id": 2842,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A unique identifier for the newly created tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 116,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelId",
								"id": 2318
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.tunnelId",
								"id": 2921
							}
						},
						{
							"id": 2841,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used.",
								"text": "This overrides the `proxy` configuration allowing independent\nconfiguration for the Tunnel binary process only.\n"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 113,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelProxy",
								"id": 2317
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.tunnelProxy",
								"id": 2920
							}
						},
						{
							"id": 2832,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel username. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 41,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.username",
								"id": 2306
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.username",
								"id": 2922
							}
						},
						{
							"id": 2843,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to tell the tunnel to provide verbose logging output."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 122,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.verbose",
								"id": 2320
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.verbose",
								"id": 2923
							}
						},
						{
							"id": 2804,
							"name": "auth",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2805,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.auth",
										"id": 2308
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 77,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.auth",
								"id": 2308
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.auth",
								"id": 2912
							}
						},
						{
							"id": 2849,
							"name": "clientUrl",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
							},
							"getSignature": [
								{
									"id": 2850,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.clientUrl",
										"id": 2329
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 152,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.clientUrl",
								"id": 2329
							}
						},
						{
							"id": 2806,
							"name": "executable",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2807,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.executable",
										"id": 2310
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 81,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.executable",
								"id": 2310
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.executable",
								"id": 2914
							}
						},
						{
							"id": 2808,
							"name": "extraCapabilities",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2809,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Object"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.extraCapabilities",
										"id": 2331
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 88,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.extraCapabilities",
								"id": 2331
							}
						},
						{
							"id": 2851,
							"name": "isDownloaded",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel software has already been downloaded."
							},
							"getSignature": [
								{
									"id": 2852,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel software has already been downloaded."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isDownloaded",
										"id": 2333
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 167,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isDownloaded",
								"id": 2333
							}
						},
						{
							"id": 2853,
							"name": "isRunning",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently running."
							},
							"getSignature": [
								{
									"id": 2854,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently running."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isRunning",
										"id": 2335
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 174,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isRunning",
								"id": 2335
							}
						},
						{
							"id": 2855,
							"name": "isStarting",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently starting up."
							},
							"getSignature": [
								{
									"id": 2856,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently starting up."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStarting",
										"id": 2337
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 181,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStarting",
								"id": 2337
							}
						},
						{
							"id": 2857,
							"name": "isStopping",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently stopping."
							},
							"getSignature": [
								{
									"id": 2858,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently stopping."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStopping",
										"id": 2339
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 188,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStopping",
								"id": 2339
							}
						},
						{
							"id": 2810,
							"name": "url",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2811,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.url",
										"id": 2319
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 100,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.url",
								"id": 2319
							},
							"implementationOf": {
								"type": "reference",
								"name": "BrowserStackProperties.url",
								"id": 2926
							}
						},
						{
							"id": 2868,
							"name": "_downloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2869,
									"name": "_downloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2870,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 2871,
											"name": "proxy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 2872,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._downloadFile",
										"id": 2354
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 371,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._downloadFile",
								"id": 2354
							}
						},
						{
							"id": 2816,
							"name": "_makeArgs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2817,
									"name": "_makeArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2818,
											"name": "_values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._makeArgs",
										"id": 2359
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 133,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._makeArgs",
								"id": 2359
							}
						},
						{
							"id": 2873,
							"name": "_makeChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2874,
									"name": "_makeChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a newly spawned child process for the tunnel software.\nImplementations should call this method to create the tunnel process.",
										"text": "Arguments passed to this method will be passed as-is to\n[[Tunnel._makeArgs]] and [[Tunnel._makeOptions]].\n",
										"returns": "An object containing a newly spawned Process and a Deferred that\nwill be resolved once the tunnel has started successfully.\n"
									},
									"parameters": [
										{
											"id": 2875,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										},
										{
											"id": 2876,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeChild",
										"id": 2362
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 443,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeChild",
								"id": 2362
							}
						},
						{
							"id": 2877,
							"name": "_makeOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2878,
									"name": "_makeOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the set of options to use when spawning the tunnel process.\nImplementations should override this method to provide the appropriate\noptions for the tunnel software.",
										"text": "Arguments passed to [[Tunnel._makeChild]] will be passed as-is to this\nmethod.\n",
										"returns": "A set of options matching those provided to Node.js\n`child_process.spawn`.\n"
									},
									"parameters": [
										{
											"id": 2879,
											"name": "_values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2880,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2881,
													"name": "env",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/tunnels/Tunnel.ts",
															"line": 544,
															"character": 16
														}
													],
													"type": {
														"type": "reference",
														"name": "ProcessEnv"
													},
													"defaultValue": " process.env"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														2881
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeOptions",
										"id": 2366
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 543,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeOptions",
								"id": 2366
							}
						},
						{
							"id": 2828,
							"name": "_normalizeEnvironment",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2829,
									"name": "_normalizeEnvironment",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attempt to normalize a BrowserStack described environment with the\nstandard Selenium capabilities",
										"text": "BrowserStack returns a list of environments that looks like:\n\n{\n    \"browser\": \"opera\",\n    \"os_version\": \"Lion\",\n    \"browser_version\":\"12.15\",\n    \"device\": null,\n    \"os\": \"OS X\"\n}\n",
										"returns": "a normalized descriptor\n"
									},
									"parameters": [
										{
											"id": 2830,
											"name": "environment",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a BrowserStack environment descriptor"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "NormalizedEnvironment",
										"id": 2444
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._normalizeEnvironment",
										"id": 2371
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 283,
									"character": 33
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._normalizeEnvironment",
								"id": 2371
							}
						},
						{
							"id": 2812,
							"name": "_postDownloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2813,
									"name": "_postDownloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2814,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Buffer"
											}
										},
										{
											"id": 2815,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._postDownloadFile",
										"id": 2374
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 123,
									"character": 29
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._postDownloadFile",
								"id": 2374
							}
						},
						{
							"id": 2823,
							"name": "_start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2824,
									"name": "_start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2825,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._start",
										"id": 2378
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 202,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._start",
								"id": 2378
							}
						},
						{
							"id": 2826,
							"name": "_stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2827,
									"name": "_stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._stop",
										"id": 2381
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 237,
									"character": 17
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._stop",
								"id": 2381
							}
						},
						{
							"id": 2902,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2903,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Destrpys all handers registered for the instance",
										"text": "Returns a promise that resolves once all handles have been destroyed\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.destroy",
										"id": 213
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 113,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.destroy",
								"id": 213
							}
						},
						{
							"id": 2859,
							"name": "download",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2860,
									"name": "download",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Downloads and extracts the tunnel software if it is not already\ndownloaded.",
										"text": "This method can be extended by implementations to perform any necessary\npost-processing, such as setting appropriate file permissions on the\ndownloaded executable.\n",
										"returns": "A promise that resolves once the download and extraction process\nhas completed.\n"
									},
									"parameters": [
										{
											"id": 2861,
											"name": "forceDownload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Force downloading the software even if it already\nhas been downloaded."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.download",
										"id": 2341
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 205,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.download",
								"id": 2341
							}
						},
						{
							"id": 2885,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2886,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the event object for the specified type"
									},
									"typeParameter": [
										{
											"id": 2887,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 2888,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the event to emit\n"
											},
											"type": {
												"type": "unknown",
												"name": "M[K]"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								},
								{
									"id": 2889,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2890,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "O",
												"constraint": {
													"type": "reference",
													"name": "EventObject",
													"id": 219,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 38,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 39,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 40,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.emit",
								"id": 196
							}
						},
						{
							"id": 2862,
							"name": "getEnvironments",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2863,
									"name": "getEnvironments",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a list of environments available on the service.",
										"text": "This method should be overridden and use a specific implementation that\nreturns normalized environments from the service. E.g.\n\n```js\n{\n    browserName: 'firefox',\n    version: '12',\n    platform: 'windows',\n    descriptor: { <original returned environment> }\n}\n```\n",
										"returns": "An object containing the response and helper functions\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NormalizedEnvironment",
													"id": 2444
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.getEnvironments",
										"id": 2344
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 229,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.getEnvironments",
								"id": 2344
							}
						},
						{
							"id": 2891,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2892,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catch all handler for various call signatures. The signatures are defined in\n`BaseEventedEvents`.  You can add your own event type -> handler types by extending\n`BaseEventedEvents`.  See example for details."
									},
									"typeParameter": [
										{
											"id": 2893,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 2894,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "K",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "TunnelEvents"
													}
												}
											}
										},
										{
											"id": 2895,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"name": "TunnelEvents"
															}
														}
													},
													{
														"type": "unknown",
														"name": "M[K]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								},
								{
									"id": 2896,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2897,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2898,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "typeParameter",
														"name": "O",
														"constraint": {
															"type": "reference",
															"name": "EventObject",
															"id": 219,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "T"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 66,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 70,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 71,
									"character": 4
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.on",
								"id": 202
							}
						},
						{
							"id": 2899,
							"name": "own",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2900,
									"name": "own",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register handles for the instance that will be destroyed when\n`this.destroy` is called",
										"text": "Returns a handle for the handle, removes the handle for the instance and\ncalls destroy\n"
									},
									"parameters": [
										{
											"id": 2901,
											"name": "handles",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Handle",
														"id": 133
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Handle",
															"id": 133
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.own",
										"id": 210
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 94,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.own",
								"id": 210
							}
						},
						{
							"id": 2819,
							"name": "sendJobState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2820,
									"name": "sendJobState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2821,
											"name": "jobId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2822,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "JobState",
												"id": 2294
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.sendJobState",
										"id": 2346
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 175,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.sendJobState",
								"id": 2346
							}
						},
						{
							"id": 2864,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2865,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts the tunnel, automatically downloading dependencies if necessary.",
										"returns": "A promise that resolves once the tunnel has been established.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.start",
										"id": 2350
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 275,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.start",
								"id": 2350
							}
						},
						{
							"id": 2866,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2867,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stops the tunnel.",
										"returns": "A promise that resolves to the exit code for the tunnel once it\nhas been terminated.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.stop",
										"id": 2352
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 332,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.stop",
								"id": 2352
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2801
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2883,
								2846,
								2847,
								2844,
								2848,
								2845,
								2831,
								2833,
								2795,
								2834,
								2796,
								2800,
								2835,
								2797,
								2884,
								2836,
								2837,
								2838,
								2839,
								2840,
								2798,
								2799,
								2842,
								2841,
								2832,
								2843
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2804,
								2849,
								2806,
								2808,
								2851,
								2853,
								2855,
								2857,
								2810
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2868,
								2816,
								2873,
								2877,
								2828,
								2812,
								2823,
								2826,
								2902,
								2859,
								2885,
								2862,
								2891,
								2899,
								2819,
								2864,
								2866
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/BrowserStackTunnel.ts",
							"line": 20,
							"character": 39
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Tunnel",
							"id": 2303
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						},
						{
							"type": "reference",
							"name": "BrowserStackProperties",
							"id": 2904
						}
					]
				},
				{
					"id": 2904,
					"name": "BrowserStackProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2913,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.accessKey|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 738,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.accessKey",
								"id": 2460
							}
						},
						{
							"id": 2911,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.architecture|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 732,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.architecture",
								"id": 2458
							}
						},
						{
							"id": 2912,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.auth|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 735,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.auth",
								"id": 2459
							}
						},
						{
							"id": 2905,
							"name": "automateOnly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[BrowserStackTunnel.BrowserStackTunnel.automateOnly|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 331,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						},
						{
							"id": 2924,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 699,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.directory",
								"id": 2441
							}
						},
						{
							"id": 2910,
							"name": "environmentUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[BrowserStackTunnel.BrowserStackTunnel.environmentUrl|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 346,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2914,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.executable|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 741,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.executable",
								"id": 2461
							}
						},
						{
							"id": 2909,
							"name": "forceLocal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[BrowserStackTunnel.BrowserStackTunnel.forceLocal|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 343,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2915,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.hostname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 744,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.hostname",
								"id": 2462
							}
						},
						{
							"id": 2906,
							"name": "killOtherTunnels",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[BrowserStackTunnel.BrowserStackTunnel.killOtherTunnels|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 334,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2916,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.pathname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 747,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.pathname",
								"id": 2463
							}
						},
						{
							"id": 2917,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.platform|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 750,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.platform",
								"id": 2464
							}
						},
						{
							"id": 2918,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.port|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 753,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.port",
								"id": 2465
							}
						},
						{
							"id": 2919,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.protocol|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 756,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.protocol",
								"id": 2466
							}
						},
						{
							"id": 2925,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 700,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.proxy",
								"id": 2442
							}
						},
						{
							"id": 2907,
							"name": "servers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[BrowserStackTunnel.BrowserStackTunnel.servers|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 337,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"name": "Url"
										}
									]
								}
							}
						},
						{
							"id": 2908,
							"name": "skipServerValidation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[BrowserStackTunnel.BrowserStackTunnel.skipServerValidation|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/BrowserStackTunnel.ts",
									"line": 340,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2921,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelId|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 762,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.tunnelId",
								"id": 2468
							}
						},
						{
							"id": 2920,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelProxy|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 759,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.tunnelProxy",
								"id": 2467
							}
						},
						{
							"id": 2926,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 701,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.url",
								"id": 2443
							}
						},
						{
							"id": 2922,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.username|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 765,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.username",
								"id": 2469
							}
						},
						{
							"id": 2923,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.verbose|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 768,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.verbose",
								"id": 2470
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2913,
								2911,
								2912,
								2905,
								2924,
								2910,
								2914,
								2909,
								2915,
								2906,
								2916,
								2917,
								2918,
								2919,
								2925,
								2907,
								2908,
								2921,
								2920,
								2926,
								2922,
								2923
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/BrowserStackTunnel.ts",
							"line": 329,
							"character": 39
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "BrowserStackTunnel",
							"id": 2794
						}
					]
				},
				{
					"id": 2927,
					"name": "BrowserStackOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/BrowserStackTunnel.ts",
							"line": 349,
							"character": 31
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "BrowserStackProperties",
								"id": 2904
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2794
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2904
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						2927
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tunnels/BrowserStackTunnel.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3224,
			"name": "\"tunnels/CrossBrowserTestingTunnel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/tunnels/CrossBrowserTestingTunnel.ts",
			"children": [
				{
					"id": 3225,
					"name": "CrossBrowserTestingTunnel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A CrossBrowserTesting tunnel.",
						"text": "This tunnel requires some non-standard configuration options (vs the other\ntunnels):\n\n1. The capabilities must include the username, API key, browser_api_name, and\n   os_api_name properties\n2. The Intern proxyUrl must use 'local' instead of 'localhost'\n\nAn Intern config using this tunnel might be look like:\n\n```js\n{\n    \"serverUrl\": \"http://local:9000\",\n    \"tunnel\": \"cbt\",\n    \"environments\": [\n        {\n            \"browserName\": \"chrome\",\n            \"os_api_name\": \"Win10\",\n            \"browser_api_name\": \"Chrome52\"\n        }\n    ],\n\t   // Other Intern config options...\n}\n```\n\nThe username and accessKey properties will be initialized using CBT_USERNAME\nand CBT_APIKEY.\n"
					},
					"typeParameter": [
						{
							"id": 3310,
							"name": "O",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 3227,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3228,
									"name": "new CrossBrowserTestingTunnel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3229,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "CrossBrowserTestingOptions",
												"id": 3351
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CrossBrowserTestingTunnel",
										"id": 3225
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.__constructor",
										"id": 2326
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 54,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.__constructor",
								"id": 2326
							}
						},
						{
							"id": 3311,
							"name": "__typeMap__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 20,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "M",
								"id": 189
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.__typeMap__",
								"id": 192
							}
						},
						{
							"id": 3273,
							"name": "_handle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 126,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._handle",
								"id": 2323
							}
						},
						{
							"id": 3274,
							"name": "_process",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 127,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ChildProcess"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._process",
								"id": 2324
							}
						},
						{
							"id": 3271,
							"name": "_startTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 124,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._startTask",
								"id": 2321
							}
						},
						{
							"id": 3275,
							"name": "_state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 128,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "stopped"
									},
									{
										"type": "stringLiteral",
										"value": "starting"
									},
									{
										"type": "stringLiteral",
										"value": "running"
									},
									{
										"type": "stringLiteral",
										"value": "stopping"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._state",
								"id": 2325
							}
						},
						{
							"id": 3272,
							"name": "_stopTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 125,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stopTask",
								"id": 2322
							}
						},
						{
							"id": 3256,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel access key. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 35,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.accessKey",
								"id": 2305
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.accessKey",
								"id": 3336
							}
						},
						{
							"id": 3258,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The architecture the tunnel will run against. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 47,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.architecture",
								"id": 2307
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.architecture",
								"id": 3334
							}
						},
						{
							"id": 3226,
							"name": "cbtVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The version of the cbt_tunnels package to use"
							},
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 54,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.cbtVersion",
								"id": 3333
							}
						},
						{
							"id": 3259,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The directory where the tunnel software will be extracted. If the\ndirectory does not exist, it will be created. This value is set by the\ntunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 60,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.directory",
								"id": 2309
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.directory",
								"id": 3347
							}
						},
						{
							"id": 3255,
							"name": "environmentUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a service that provides a list of environments supported by\nthe tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 29,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.environmentUrl",
								"id": 2304
							}
						},
						{
							"id": 3260,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The executable to spawn in order to create a tunnel. This value is set\nby the tunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 66,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.executable",
								"id": 2310
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.executable",
								"id": 3337
							}
						},
						{
							"id": 3261,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The host on which a WebDriver client can access the service provided by\nthe tunnel. This may or may not be the host where the tunnel application\nis running."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 73,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.hostname",
								"id": 2311
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.hostname",
								"id": 3338
							}
						},
						{
							"id": 3312,
							"name": "listenersMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "map of listeners keyed by event type"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 24,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										]
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EventedCallback",
											"id": 223,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeParameter",
													"name": "O",
													"constraint": {
														"type": "reference",
														"name": "EventObject",
														"id": 219,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												}
											]
										}
									}
								]
							},
							"defaultValue": " new Map()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.listenersMap",
								"id": 193
							}
						},
						{
							"id": 3262,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path that a WebDriver client should use to access the service\nprovided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 79,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.pathname",
								"id": 2312
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.pathname",
								"id": 3339
							}
						},
						{
							"id": 3263,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operating system the tunnel will run on. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 85,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.platform",
								"id": 2313
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.platform",
								"id": 3340
							}
						},
						{
							"id": 3264,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The local port where the WebDriver server should be exposed by the\ntunnel. This is typed as a string for Url compatibility, but should be a\nnumber."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 92,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.port",
								"id": 2314
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.port",
								"id": 3341
							}
						},
						{
							"id": 3265,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The protocol (e.g., 'http') that a WebDriver client should use to access\nthe service provided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 98,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.protocol",
								"id": 2315
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.protocol",
								"id": 3342
							}
						},
						{
							"id": 3266,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 104,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.proxy",
								"id": 2316
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.proxy",
								"id": 3348
							}
						},
						{
							"id": 3268,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A unique identifier for the newly created tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 116,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelId",
								"id": 2318
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.tunnelId",
								"id": 3344
							}
						},
						{
							"id": 3267,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used.",
								"text": "This overrides the `proxy` configuration allowing independent\nconfiguration for the Tunnel binary process only.\n"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 113,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelProxy",
								"id": 2317
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.tunnelProxy",
								"id": 3343
							}
						},
						{
							"id": 3269,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL where the tunnel software can be downloaded."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 119,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.url",
								"id": 2319
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.url",
								"id": 3349
							}
						},
						{
							"id": 3257,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel username. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 41,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.username",
								"id": 2306
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.username",
								"id": 3345
							}
						},
						{
							"id": 3270,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to tell the tunnel to provide verbose logging output."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 122,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.verbose",
								"id": 2320
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.verbose",
								"id": 3346
							}
						},
						{
							"id": 3230,
							"name": "auth",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 3231,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.auth",
										"id": 2308
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 74,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.auth",
								"id": 2308
							},
							"implementationOf": {
								"type": "reference",
								"name": "CrossBrowserTestingProperties.auth",
								"id": 3335
							}
						},
						{
							"id": 3276,
							"name": "clientUrl",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
							},
							"getSignature": [
								{
									"id": 3277,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.clientUrl",
										"id": 2329
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 152,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.clientUrl",
								"id": 2329
							}
						},
						{
							"id": 3232,
							"name": "extraCapabilities",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 3233,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 3234,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 3236,
													"name": "password",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
															"line": 81,
															"character": 14
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													},
													"defaultValue": " this.accessKey"
												},
												{
													"id": 3235,
													"name": "username",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
															"line": 80,
															"character": 14
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													},
													"defaultValue": " this.username"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														3236,
														3235
													]
												}
											]
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.extraCapabilities",
										"id": 2331
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 78,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.extraCapabilities",
								"id": 2331
							}
						},
						{
							"id": 3237,
							"name": "isDownloaded",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 3238,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.isDownloaded",
										"id": 2333
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 85,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.isDownloaded",
								"id": 2333
							}
						},
						{
							"id": 3278,
							"name": "isRunning",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently running."
							},
							"getSignature": [
								{
									"id": 3279,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently running."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isRunning",
										"id": 2335
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 174,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isRunning",
								"id": 2335
							}
						},
						{
							"id": 3280,
							"name": "isStarting",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently starting up."
							},
							"getSignature": [
								{
									"id": 3281,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently starting up."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStarting",
										"id": 2337
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 181,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStarting",
								"id": 2337
							}
						},
						{
							"id": 3282,
							"name": "isStopping",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently stopping."
							},
							"getSignature": [
								{
									"id": 3283,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently stopping."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStopping",
										"id": 2339
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 188,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStopping",
								"id": 2339
							}
						},
						{
							"id": 3290,
							"name": "_downloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3291,
									"name": "_downloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3292,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3293,
											"name": "proxy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3294,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._downloadFile",
										"id": 2354
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 371,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._downloadFile",
								"id": 2354
							}
						},
						{
							"id": 3242,
							"name": "_makeArgs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3243,
									"name": "_makeArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3244,
											"name": "readyFile",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._makeArgs",
										"id": 2359
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 113,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._makeArgs",
								"id": 2359
							}
						},
						{
							"id": 3295,
							"name": "_makeChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3296,
									"name": "_makeChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a newly spawned child process for the tunnel software.\nImplementations should call this method to create the tunnel process.",
										"text": "Arguments passed to this method will be passed as-is to\n[[Tunnel._makeArgs]] and [[Tunnel._makeOptions]].\n",
										"returns": "An object containing a newly spawned Process and a Deferred that\nwill be resolved once the tunnel has started successfully.\n"
									},
									"parameters": [
										{
											"id": 3297,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										},
										{
											"id": 3298,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeChild",
										"id": 2362
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 443,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeChild",
								"id": 2362
							}
						},
						{
							"id": 3299,
							"name": "_makeOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3300,
									"name": "_makeOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the set of options to use when spawning the tunnel process.\nImplementations should override this method to provide the appropriate\noptions for the tunnel software.",
										"text": "Arguments passed to [[Tunnel._makeChild]] will be passed as-is to this\nmethod.\n",
										"returns": "A set of options matching those provided to Node.js\n`child_process.spawn`.\n"
									},
									"parameters": [
										{
											"id": 3301,
											"name": "_values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 3302,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 3303,
													"name": "env",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/tunnels/Tunnel.ts",
															"line": 544,
															"character": 16
														}
													],
													"type": {
														"type": "reference",
														"name": "ProcessEnv"
													},
													"defaultValue": " process.env"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														3303
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeOptions",
										"id": 2366
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 543,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeOptions",
								"id": 2366
							}
						},
						{
							"id": 3252,
							"name": "_normalizeEnvironment",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3253,
									"name": "_normalizeEnvironment",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attempt to normalize a TestingBot described environment with the standard\nSelenium capabilities",
										"text": "TestingBot returns a list of environments that looks like:\n\n{\n    \"selenium_name\": \"Chrome36\",\n    \"name\": \"googlechrome\",\n    \"platform\": \"CAPITAN\",\n    \"version\":\"36\"\n}\n",
										"returns": "a normalized descriptor\n"
									},
									"parameters": [
										{
											"id": 3254,
											"name": "environment",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a TestingBot environment descriptor"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "NormalizedEnvironment",
										"id": 2444
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._normalizeEnvironment",
										"id": 2371
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 226,
									"character": 33
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._normalizeEnvironment",
								"id": 2371
							}
						},
						{
							"id": 3304,
							"name": "_postDownloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3305,
									"name": "_postDownloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called with the response after a file download has completed"
									},
									"parameters": [
										{
											"id": 3306,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Buffer"
											}
										},
										{
											"id": 3307,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._postDownloadFile",
										"id": 2374
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 561,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._postDownloadFile",
								"id": 2374
							}
						},
						{
							"id": 3249,
							"name": "_start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3250,
									"name": "_start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3251,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._start",
										"id": 2378
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 169,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._start",
								"id": 2378
							}
						},
						{
							"id": 3308,
							"name": "_stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3309,
									"name": "_stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This method provides the implementation that actually stops the tunnel.",
										"text": "The default implementation that assumes the tunnel has been closed once\nthe child process has exited. This method should be reimplemented by\nother tunnel launchers to implement correct shutdown logic, if necessary.\n",
										"returns": "A promise that resolves once the tunnel has shut down.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._stop",
										"id": 2381
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 619,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stop",
								"id": 2381
							}
						},
						{
							"id": 3330,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3331,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Destrpys all handers registered for the instance",
										"text": "Returns a promise that resolves once all handles have been destroyed\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.destroy",
										"id": 213
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 113,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.destroy",
								"id": 213
							}
						},
						{
							"id": 3239,
							"name": "download",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3240,
									"name": "download",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3241,
											"name": "forceDownload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.download",
										"id": 2341
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 94,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.download",
								"id": 2341
							}
						},
						{
							"id": 3313,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3314,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the event object for the specified type"
									},
									"typeParameter": [
										{
											"id": 3315,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 3316,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the event to emit\n"
											},
											"type": {
												"type": "unknown",
												"name": "M[K]"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								},
								{
									"id": 3317,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3318,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "O",
												"constraint": {
													"type": "reference",
													"name": "EventObject",
													"id": 219,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 38,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 39,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 40,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.emit",
								"id": 196
							}
						},
						{
							"id": 3284,
							"name": "getEnvironments",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3285,
									"name": "getEnvironments",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a list of environments available on the service.",
										"text": "This method should be overridden and use a specific implementation that\nreturns normalized environments from the service. E.g.\n\n```js\n{\n    browserName: 'firefox',\n    version: '12',\n    platform: 'windows',\n    descriptor: { <original returned environment> }\n}\n```\n",
										"returns": "An object containing the response and helper functions\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NormalizedEnvironment",
													"id": 2444
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.getEnvironments",
										"id": 2344
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 229,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.getEnvironments",
								"id": 2344
							}
						},
						{
							"id": 3319,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3320,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catch all handler for various call signatures. The signatures are defined in\n`BaseEventedEvents`.  You can add your own event type -> handler types by extending\n`BaseEventedEvents`.  See example for details."
									},
									"typeParameter": [
										{
											"id": 3321,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 3322,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "K",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "TunnelEvents"
													}
												}
											}
										},
										{
											"id": 3323,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"name": "TunnelEvents"
															}
														}
													},
													{
														"type": "unknown",
														"name": "M[K]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								},
								{
									"id": 3324,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3325,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3326,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "typeParameter",
														"name": "O",
														"constraint": {
															"type": "reference",
															"name": "EventObject",
															"id": 219,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "T"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 66,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 70,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 71,
									"character": 4
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.on",
								"id": 202
							}
						},
						{
							"id": 3327,
							"name": "own",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3328,
									"name": "own",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register handles for the instance that will be destroyed when\n`this.destroy` is called",
										"text": "Returns a handle for the handle, removes the handle for the instance and\ncalls destroy\n"
									},
									"parameters": [
										{
											"id": 3329,
											"name": "handles",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Handle",
														"id": 133
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Handle",
															"id": 133
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.own",
										"id": 210
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 94,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.own",
								"id": 210
							}
						},
						{
							"id": 3245,
							"name": "sendJobState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3246,
									"name": "sendJobState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3247,
											"name": "jobId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3248,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "JobState",
												"id": 2294
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.sendJobState",
										"id": 2346
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 131,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.sendJobState",
								"id": 2346
							}
						},
						{
							"id": 3286,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3287,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts the tunnel, automatically downloading dependencies if necessary.",
										"returns": "A promise that resolves once the tunnel has been established.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.start",
										"id": 2350
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 275,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.start",
								"id": 2350
							}
						},
						{
							"id": 3288,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3289,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stops the tunnel.",
										"returns": "A promise that resolves to the exit code for the tunnel once it\nhas been terminated.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.stop",
										"id": 2352
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 332,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.stop",
								"id": 2352
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3227
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3311,
								3273,
								3274,
								3271,
								3275,
								3272,
								3256,
								3258,
								3226,
								3259,
								3255,
								3260,
								3261,
								3312,
								3262,
								3263,
								3264,
								3265,
								3266,
								3268,
								3267,
								3269,
								3257,
								3270
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								3230,
								3276,
								3232,
								3237,
								3278,
								3280,
								3282
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3290,
								3242,
								3295,
								3299,
								3252,
								3304,
								3249,
								3308,
								3330,
								3239,
								3313,
								3284,
								3319,
								3327,
								3245,
								3286,
								3288
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
							"line": 51,
							"character": 46
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Tunnel",
							"id": 2303
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						},
						{
							"type": "reference",
							"name": "CrossBrowserTestingProperties",
							"id": 3332
						}
					]
				},
				{
					"id": 3332,
					"name": "CrossBrowserTestingProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options specific to the CrossBrowserTestingTunnel"
					},
					"children": [
						{
							"id": 3336,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.accessKey|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 738,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.accessKey",
								"id": 2460
							}
						},
						{
							"id": 3334,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.architecture|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 732,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.architecture",
								"id": 2458
							}
						},
						{
							"id": 3335,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.auth|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 735,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.auth",
								"id": 2459
							}
						},
						{
							"id": 3333,
							"name": "cbtVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[CrossBrowserTestingTunnel.CrossBrowserTestingTunnel.cbtVersion|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
									"line": 255,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3347,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 699,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.directory",
								"id": 2441
							}
						},
						{
							"id": 3337,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.executable|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 741,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.executable",
								"id": 2461
							}
						},
						{
							"id": 3338,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.hostname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 744,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.hostname",
								"id": 2462
							}
						},
						{
							"id": 3339,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.pathname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 747,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.pathname",
								"id": 2463
							}
						},
						{
							"id": 3340,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.platform|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 750,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.platform",
								"id": 2464
							}
						},
						{
							"id": 3341,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.port|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 753,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.port",
								"id": 2465
							}
						},
						{
							"id": 3342,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.protocol|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 756,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.protocol",
								"id": 2466
							}
						},
						{
							"id": 3348,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 700,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.proxy",
								"id": 2442
							}
						},
						{
							"id": 3344,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelId|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 762,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.tunnelId",
								"id": 2468
							}
						},
						{
							"id": 3343,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelProxy|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 759,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.tunnelProxy",
								"id": 2467
							}
						},
						{
							"id": 3349,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 701,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.url",
								"id": 2443
							}
						},
						{
							"id": 3345,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.username|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 765,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.username",
								"id": 2469
							}
						},
						{
							"id": 3346,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.verbose|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 768,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.verbose",
								"id": 2470
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3336,
								3334,
								3335,
								3333,
								3347,
								3337,
								3338,
								3339,
								3340,
								3341,
								3342,
								3348,
								3344,
								3343,
								3349,
								3345,
								3346
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
							"line": 253,
							"character": 46
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "CrossBrowserTestingTunnel",
							"id": 3225
						}
					]
				},
				{
					"id": 3351,
					"name": "CrossBrowserTestingOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
							"line": 258,
							"character": 38
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "CrossBrowserTestingProperties",
								"id": 3332
							}
						]
					}
				},
				{
					"id": 3350,
					"name": "cbtVersion",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
							"line": 19,
							"character": 16
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "0.9.12"
					},
					"defaultValue": "\"0.9.12\""
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3225
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3332
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3351
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						3350
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tunnels/CrossBrowserTestingTunnel.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3352,
			"name": "\"tunnels/NullTunnel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/tunnels/NullTunnel.ts",
			"children": [
				{
					"id": 3353,
					"name": "NullTunnel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A no-op tunnel."
					},
					"typeParameter": [
						{
							"id": 3430,
							"name": "O",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 3354,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3355,
									"name": "new NullTunnel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3356,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Partial",
												"typeArguments": [
													{
														"type": "reference",
														"name": "TunnelProperties",
														"id": 2457
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "NullTunnel",
										"id": 3353
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.__constructor",
										"id": 2326
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/NullTunnel.ts",
									"line": 7,
									"character": 48
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.__constructor",
								"id": 2326
							}
						},
						{
							"id": 3431,
							"name": "__typeMap__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 20,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "M",
								"id": 189
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.__typeMap__",
								"id": 192
							}
						},
						{
							"id": 3386,
							"name": "_handle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 126,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._handle",
								"id": 2323
							}
						},
						{
							"id": 3387,
							"name": "_process",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 127,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ChildProcess"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._process",
								"id": 2324
							}
						},
						{
							"id": 3384,
							"name": "_startTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 124,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._startTask",
								"id": 2321
							}
						},
						{
							"id": 3388,
							"name": "_state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 128,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "stopped"
									},
									{
										"type": "stringLiteral",
										"value": "starting"
									},
									{
										"type": "stringLiteral",
										"value": "running"
									},
									{
										"type": "stringLiteral",
										"value": "stopping"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._state",
								"id": 2325
							}
						},
						{
							"id": 3385,
							"name": "_stopTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 125,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stopTask",
								"id": 2322
							}
						},
						{
							"id": 3368,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel access key. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 35,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.accessKey",
								"id": 2305
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.accessKey",
								"id": 2460
							}
						},
						{
							"id": 3370,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The architecture the tunnel will run against. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 47,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.architecture",
								"id": 2307
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.architecture",
								"id": 2458
							}
						},
						{
							"id": 3371,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An HTTP authorization string to use when initiating connections to the\ntunnel. This value of this property is defined by Tunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 53,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.auth",
								"id": 2308
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.auth",
								"id": 2459
							}
						},
						{
							"id": 3372,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The directory where the tunnel software will be extracted. If the\ndirectory does not exist, it will be created. This value is set by the\ntunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 60,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.directory",
								"id": 2309
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.directory",
								"id": 2471
							}
						},
						{
							"id": 3367,
							"name": "environmentUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a service that provides a list of environments supported by\nthe tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 29,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.environmentUrl",
								"id": 2304
							}
						},
						{
							"id": 3373,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The executable to spawn in order to create a tunnel. This value is set\nby the tunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 66,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.executable",
								"id": 2310
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.executable",
								"id": 2461
							}
						},
						{
							"id": 3374,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The host on which a WebDriver client can access the service provided by\nthe tunnel. This may or may not be the host where the tunnel application\nis running."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 73,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.hostname",
								"id": 2311
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.hostname",
								"id": 2462
							}
						},
						{
							"id": 3432,
							"name": "listenersMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "map of listeners keyed by event type"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 24,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										]
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EventedCallback",
											"id": 223,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeParameter",
													"name": "O",
													"constraint": {
														"type": "reference",
														"name": "EventObject",
														"id": 219,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												}
											]
										}
									}
								]
							},
							"defaultValue": " new Map()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.listenersMap",
								"id": 193
							}
						},
						{
							"id": 3375,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path that a WebDriver client should use to access the service\nprovided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 79,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.pathname",
								"id": 2312
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.pathname",
								"id": 2463
							}
						},
						{
							"id": 3376,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operating system the tunnel will run on. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 85,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.platform",
								"id": 2313
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.platform",
								"id": 2464
							}
						},
						{
							"id": 3377,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The local port where the WebDriver server should be exposed by the\ntunnel. This is typed as a string for Url compatibility, but should be a\nnumber."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 92,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.port",
								"id": 2314
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.port",
								"id": 2465
							}
						},
						{
							"id": 3378,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The protocol (e.g., 'http') that a WebDriver client should use to access\nthe service provided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 98,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.protocol",
								"id": 2315
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.protocol",
								"id": 2466
							}
						},
						{
							"id": 3379,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 104,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.proxy",
								"id": 2316
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.proxy",
								"id": 2472
							}
						},
						{
							"id": 3381,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A unique identifier for the newly created tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 116,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelId",
								"id": 2318
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.tunnelId",
								"id": 2468
							}
						},
						{
							"id": 3380,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used.",
								"text": "This overrides the `proxy` configuration allowing independent\nconfiguration for the Tunnel binary process only.\n"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 113,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelProxy",
								"id": 2317
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.tunnelProxy",
								"id": 2467
							}
						},
						{
							"id": 3382,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL where the tunnel software can be downloaded."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 119,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.url",
								"id": 2319
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.url",
								"id": 2473
							}
						},
						{
							"id": 3369,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel username. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 41,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.username",
								"id": 2306
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.username",
								"id": 2469
							}
						},
						{
							"id": 3383,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to tell the tunnel to provide verbose logging output."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 122,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.verbose",
								"id": 2320
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.verbose",
								"id": 2470
							}
						},
						{
							"id": 3389,
							"name": "clientUrl",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
							},
							"getSignature": [
								{
									"id": 3390,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.clientUrl",
										"id": 2329
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 152,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.clientUrl",
								"id": 2329
							}
						},
						{
							"id": 3391,
							"name": "extraCapabilities",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A map of additional capabilities that need to be sent to the provider\nwhen a new session is being created."
							},
							"getSignature": [
								{
									"id": 3392,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "A map of additional capabilities that need to be sent to the provider\nwhen a new session is being created."
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.extraCapabilities",
										"id": 2331
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 160,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.extraCapabilities",
								"id": 2331
							}
						},
						{
							"id": 3357,
							"name": "isDownloaded",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 3358,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.isDownloaded",
										"id": 2333
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/NullTunnel.ts",
									"line": 19,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.isDownloaded",
								"id": 2333
							}
						},
						{
							"id": 3393,
							"name": "isRunning",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently running."
							},
							"getSignature": [
								{
									"id": 3394,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently running."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isRunning",
										"id": 2335
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 174,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isRunning",
								"id": 2335
							}
						},
						{
							"id": 3395,
							"name": "isStarting",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently starting up."
							},
							"getSignature": [
								{
									"id": 3396,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently starting up."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStarting",
										"id": 2337
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 181,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStarting",
								"id": 2337
							}
						},
						{
							"id": 3397,
							"name": "isStopping",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently stopping."
							},
							"getSignature": [
								{
									"id": 3398,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently stopping."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStopping",
										"id": 2339
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 188,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStopping",
								"id": 2339
							}
						},
						{
							"id": 3401,
							"name": "_downloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3402,
									"name": "_downloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3403,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3404,
											"name": "proxy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3405,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._downloadFile",
										"id": 2354
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 371,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._downloadFile",
								"id": 2354
							}
						},
						{
							"id": 3406,
							"name": "_makeArgs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3407,
									"name": "_makeArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the list of command-line arguments to be passed to the spawned\ntunnel. Implementations should override this method to provide the\nappropriate command-line arguments.",
										"text": "Arguments passed to [[Tunnel._makeChild]] will be passed as-is to this\nmethod.\n",
										"returns": "A list of command-line arguments.\n"
									},
									"parameters": [
										{
											"id": 3408,
											"name": "_values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeArgs",
										"id": 2359
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 429,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeArgs",
								"id": 2359
							}
						},
						{
							"id": 3409,
							"name": "_makeChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3410,
									"name": "_makeChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a newly spawned child process for the tunnel software.\nImplementations should call this method to create the tunnel process.",
										"text": "Arguments passed to this method will be passed as-is to\n[[Tunnel._makeArgs]] and [[Tunnel._makeOptions]].\n",
										"returns": "An object containing a newly spawned Process and a Deferred that\nwill be resolved once the tunnel has started successfully.\n"
									},
									"parameters": [
										{
											"id": 3411,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										},
										{
											"id": 3412,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeChild",
										"id": 2362
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 443,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeChild",
								"id": 2362
							}
						},
						{
							"id": 3413,
							"name": "_makeOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3414,
									"name": "_makeOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the set of options to use when spawning the tunnel process.\nImplementations should override this method to provide the appropriate\noptions for the tunnel software.",
										"text": "Arguments passed to [[Tunnel._makeChild]] will be passed as-is to this\nmethod.\n",
										"returns": "A set of options matching those provided to Node.js\n`child_process.spawn`.\n"
									},
									"parameters": [
										{
											"id": 3415,
											"name": "_values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 3416,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 3417,
													"name": "env",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/tunnels/Tunnel.ts",
															"line": 544,
															"character": 16
														}
													],
													"type": {
														"type": "reference",
														"name": "ProcessEnv"
													},
													"defaultValue": " process.env"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														3417
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeOptions",
										"id": 2366
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 543,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeOptions",
								"id": 2366
							}
						},
						{
							"id": 3418,
							"name": "_normalizeEnvironment",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3419,
									"name": "_normalizeEnvironment",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Normalizes a specific Tunnel environment descriptor to a general form. To\nbe overriden by a child implementation.",
										"returns": "a normalized environment\n"
									},
									"parameters": [
										{
											"id": 3420,
											"name": "environment",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an environment descriptor specific to the Tunnel"
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "NormalizedEnvironment",
										"id": 2444
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._normalizeEnvironment",
										"id": 2371
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 554,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._normalizeEnvironment",
								"id": 2371
							}
						},
						{
							"id": 3421,
							"name": "_postDownloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3422,
									"name": "_postDownloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called with the response after a file download has completed"
									},
									"parameters": [
										{
											"id": 3423,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Buffer"
											}
										},
										{
											"id": 3424,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._postDownloadFile",
										"id": 2374
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 561,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._postDownloadFile",
								"id": 2374
							}
						},
						{
							"id": 3425,
							"name": "_start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3426,
									"name": "_start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This method provides the implementation that actually starts the tunnel\nand any other logic for emitting events on the Tunnel based on data\npassed by the tunnel software.",
										"text": "The default implementation that assumes the tunnel is ready for use once\nthe child process has written to `stdout` or `stderr`. This method should\nbe reimplemented by other tunnel launchers to implement correct launch\ndetection logic.\n",
										"returns": "An object containing a reference to the child process, and a\nDeferred that is resolved once the tunnel is ready for use. Normally this\nwill be the object returned from a call to [[Tunnel._makeChild]].\n"
									},
									"parameters": [
										{
											"id": 3427,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._start",
										"id": 2378
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 590,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._start",
								"id": 2378
							}
						},
						{
							"id": 3428,
							"name": "_stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3429,
									"name": "_stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This method provides the implementation that actually stops the tunnel.",
										"text": "The default implementation that assumes the tunnel has been closed once\nthe child process has exited. This method should be reimplemented by\nother tunnel launchers to implement correct shutdown logic, if necessary.\n",
										"returns": "A promise that resolves once the tunnel has shut down.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._stop",
										"id": 2381
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 619,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stop",
								"id": 2381
							}
						},
						{
							"id": 3450,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3451,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Destrpys all handers registered for the instance",
										"text": "Returns a promise that resolves once all handles have been destroyed\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.destroy",
										"id": 213
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 113,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.destroy",
								"id": 213
							}
						},
						{
							"id": 3359,
							"name": "download",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3360,
									"name": "download",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.download",
										"id": 2341
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/NullTunnel.ts",
									"line": 23,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.download",
								"id": 2341
							}
						},
						{
							"id": 3433,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3434,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the event object for the specified type"
									},
									"typeParameter": [
										{
											"id": 3435,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 3436,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the event to emit\n"
											},
											"type": {
												"type": "unknown",
												"name": "M[K]"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								},
								{
									"id": 3437,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3438,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "O",
												"constraint": {
													"type": "reference",
													"name": "EventObject",
													"id": 219,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 38,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 39,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 40,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.emit",
								"id": 196
							}
						},
						{
							"id": 3399,
							"name": "getEnvironments",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3400,
									"name": "getEnvironments",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a list of environments available on the service.",
										"text": "This method should be overridden and use a specific implementation that\nreturns normalized environments from the service. E.g.\n\n```js\n{\n    browserName: 'firefox',\n    version: '12',\n    platform: 'windows',\n    descriptor: { <original returned environment> }\n}\n```\n",
										"returns": "An object containing the response and helper functions\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NormalizedEnvironment",
													"id": 2444
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.getEnvironments",
										"id": 2344
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 229,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.getEnvironments",
								"id": 2344
							}
						},
						{
							"id": 3439,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3440,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catch all handler for various call signatures. The signatures are defined in\n`BaseEventedEvents`.  You can add your own event type -> handler types by extending\n`BaseEventedEvents`.  See example for details."
									},
									"typeParameter": [
										{
											"id": 3441,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 3442,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "K",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "TunnelEvents"
													}
												}
											}
										},
										{
											"id": 3443,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"name": "TunnelEvents"
															}
														}
													},
													{
														"type": "unknown",
														"name": "M[K]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								},
								{
									"id": 3444,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3445,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3446,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "typeParameter",
														"name": "O",
														"constraint": {
															"type": "reference",
															"name": "EventObject",
															"id": 219,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "T"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 66,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 70,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 71,
									"character": 4
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.on",
								"id": 202
							}
						},
						{
							"id": 3447,
							"name": "own",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3448,
									"name": "own",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register handles for the instance that will be destroyed when\n`this.destroy` is called",
										"text": "Returns a handle for the handle, removes the handle for the instance and\ncalls destroy\n"
									},
									"parameters": [
										{
											"id": 3449,
											"name": "handles",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Handle",
														"id": 133
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Handle",
															"id": 133
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.own",
										"id": 210
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 94,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.own",
								"id": 210
							}
						},
						{
							"id": 3365,
							"name": "sendJobState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3366,
									"name": "sendJobState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.sendJobState",
										"id": 2346
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/NullTunnel.ts",
									"line": 37,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.sendJobState",
								"id": 2346
							}
						},
						{
							"id": 3361,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3362,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.start",
										"id": 2350
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/NullTunnel.ts",
									"line": 27,
									"character": 7
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.start",
								"id": 2350
							}
						},
						{
							"id": 3363,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3364,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.stop",
										"id": 2352
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/NullTunnel.ts",
									"line": 32,
									"character": 6
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.stop",
								"id": 2352
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3354
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3431,
								3386,
								3387,
								3384,
								3388,
								3385,
								3368,
								3370,
								3371,
								3372,
								3367,
								3373,
								3374,
								3432,
								3375,
								3376,
								3377,
								3378,
								3379,
								3381,
								3380,
								3382,
								3369,
								3383
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								3389,
								3391,
								3357,
								3393,
								3395,
								3397
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3401,
								3406,
								3409,
								3413,
								3418,
								3421,
								3425,
								3428,
								3450,
								3359,
								3433,
								3399,
								3439,
								3447,
								3365,
								3361,
								3363
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/NullTunnel.ts",
							"line": 7,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Tunnel",
							"id": 2303
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3353
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tunnels/NullTunnel.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2928,
			"name": "\"tunnels/SauceLabsTunnel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/tunnels/SauceLabsTunnel.ts",
			"children": [
				{
					"id": 2929,
					"name": "SauceLabsTunnel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Sauce Labs tunnel. This tunnel uses Sauce Connect 4 on platforms where it\nis supported, and Sauce Connect 3 on all other platforms.",
						"text": "The accessKey and username properties will be initialized using\nSAUCE_ACCESS_KEY and SAUCE_USERNAME.\n\nSee [[SauceLabsTunnel.SauceLabsProperties]] for a list of options specific to\nthis tunnel class.\n"
					},
					"typeParameter": [
						{
							"id": 3034,
							"name": "O",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 2948,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2949,
									"name": "new SauceLabsTunnel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2950,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SauceLabsOptions",
												"id": 3089
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SauceLabsTunnel",
										"id": 2929
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.__constructor",
										"id": 2326
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 121,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.__constructor",
								"id": 2326
							}
						},
						{
							"id": 3035,
							"name": "__typeMap__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 20,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "M",
								"id": 189
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.__typeMap__",
								"id": 192
							}
						},
						{
							"id": 2998,
							"name": "_handle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 126,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._handle",
								"id": 2323
							}
						},
						{
							"id": 2999,
							"name": "_process",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 127,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ChildProcess"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._process",
								"id": 2324
							}
						},
						{
							"id": 2996,
							"name": "_startTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 124,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._startTask",
								"id": 2321
							}
						},
						{
							"id": 3000,
							"name": "_state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 128,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "stopped"
									},
									{
										"type": "stringLiteral",
										"value": "starting"
									},
									{
										"type": "stringLiteral",
										"value": "running"
									},
									{
										"type": "stringLiteral",
										"value": "stopping"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._state",
								"id": 2325
							}
						},
						{
							"id": 2997,
							"name": "_stopTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 125,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stopTask",
								"id": 2322
							}
						},
						{
							"id": 2930,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 29,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.accessKey",
								"id": 2305
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.accessKey",
								"id": 3074
							}
						},
						{
							"id": 2985,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The architecture the tunnel will run against. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 47,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.architecture",
								"id": 2307
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.architecture",
								"id": 3072
							}
						},
						{
							"id": 2931,
							"name": "directDomains",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of domains that should not be proxied by the tunnel on the remote\nVM."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 35,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.directDomains",
								"id": 3057
							}
						},
						{
							"id": 2986,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The directory where the tunnel software will be extracted. If the\ndirectory does not exist, it will be created. This value is set by the\ntunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 60,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.directory",
								"id": 2309
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.directory",
								"id": 3085
							}
						},
						{
							"id": 2933,
							"name": "domainAuthentication",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of URLs that require additional HTTP authentication. Only the\nhostname, port, and auth are used. This property is only supported by\nSauce Connect 4 tunnels."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 47,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.domainAuthentication",
								"id": 3059
							}
						},
						{
							"id": 2984,
							"name": "environmentUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a service that provides a list of environments supported by\nthe tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 29,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.environmentUrl",
								"id": 2304
							}
						},
						{
							"id": 2934,
							"name": "fastFailDomains",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of regular expressions corresponding to domains whose connections\nshould fail immediately if the VM attempts to make a connection to them."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 53,
									"character": 17
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.fastFailDomains",
								"id": 3060
							}
						},
						{
							"id": 2987,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The host on which a WebDriver client can access the service provided by\nthe tunnel. This may or may not be the host where the tunnel application\nis running."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 73,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.hostname",
								"id": 2311
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.hostname",
								"id": 3076
							}
						},
						{
							"id": 2935,
							"name": "isSharedTunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Allows the tunnel to also be used by sub-accounts of the user that\nstarted the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 59,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.isSharedTunnel",
								"id": 3061
							}
						},
						{
							"id": 3036,
							"name": "listenersMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "map of listeners keyed by event type"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 24,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										]
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EventedCallback",
											"id": 223,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeParameter",
													"name": "O",
													"constraint": {
														"type": "reference",
														"name": "EventObject",
														"id": 219,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												}
											]
										}
									}
								]
							},
							"defaultValue": " new Map()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.listenersMap",
								"id": 193
							}
						},
						{
							"id": 2936,
							"name": "logFile",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A filename where additional logs from the tunnel should be output."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 62,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.logFile",
								"id": 3062
							}
						},
						{
							"id": 2939,
							"name": "logFileSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Specifies the maximum log filesize before rotation, in bytes. This\nproperty is only supported by Sauce Connect 3 tunnels."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 78,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.logFileSize",
								"id": 3065
							}
						},
						{
							"id": 2940,
							"name": "logTrafficStats",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Log statistics about HTTP traffic every `logTrafficStats` milliseconds.\nThis property is only supported by Sauce Connect 4 tunnels."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 84,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.logTrafficStats",
								"id": 3066
							}
						},
						{
							"id": 2937,
							"name": "pacFile",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The absolute filepath (or URL) of a file which Sauce Connect should use\nfor additional proxy configuration. Sauce Connect suggests using either\nthis or `proxy`, but not both."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 69,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.pacFile",
								"id": 3063
							}
						},
						{
							"id": 2988,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path that a WebDriver client should use to access the service\nprovided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 79,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.pathname",
								"id": 2312
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.pathname",
								"id": 3077
							}
						},
						{
							"id": 2938,
							"name": "pidFile",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A filename where Sauce Connect stores its process information."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 72,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.pidFile",
								"id": 3064
							}
						},
						{
							"id": 2989,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operating system the tunnel will run on. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 85,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.platform",
								"id": 2313
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.platform",
								"id": 3078
							}
						},
						{
							"id": 2990,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The local port where the WebDriver server should be exposed by the\ntunnel. This is typed as a string for Url compatibility, but should be a\nnumber."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 92,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.port",
								"id": 2314
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.port",
								"id": 3079
							}
						},
						{
							"id": 2991,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The protocol (e.g., 'http') that a WebDriver client should use to access\nthe service provided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 98,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.protocol",
								"id": 2315
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.protocol",
								"id": 3080
							}
						},
						{
							"id": 2992,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 104,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.proxy",
								"id": 2316
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.proxy",
								"id": 3086
							}
						},
						{
							"id": 2941,
							"name": "restUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An alternative URL for the Sauce REST API. This property is only\nsupported by Sauce Connect 3 tunnels."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 90,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.restUrl",
								"id": 3067
							}
						},
						{
							"id": 2946,
							"name": "scVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The version of Sauce Connect that should be used"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 119,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2942,
							"name": "skipSslDomains",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of domains that should not have their SSL connections re-encrypted\nwhen going through the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 96,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.skipSslDomains",
								"id": 3068
							}
						},
						{
							"id": 2943,
							"name": "squidOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An additional set of options to use with the Squid proxy for the remote\nVM. This property is only supported by Sauce Connect 3 tunnels."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 102,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.squidOptions",
								"id": 3069
							}
						},
						{
							"id": 2932,
							"name": "tunnelDomains",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of domains that will be proxied by the tunnel on the remote VM."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 40,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.tunnelDomains",
								"id": 3058
							}
						},
						{
							"id": 2994,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A unique identifier for the newly created tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 116,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelId",
								"id": 2318
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.tunnelId",
								"id": 3082
							}
						},
						{
							"id": 2993,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used.",
								"text": "This overrides the `proxy` configuration allowing independent\nconfiguration for the Tunnel binary process only.\n"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 113,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelProxy",
								"id": 2317
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.tunnelProxy",
								"id": 3081
							}
						},
						{
							"id": 2944,
							"name": "useProxyForTunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to use the proxy defined at [[Tunnel.proxy]] for the\ntunnel connection itself."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 108,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.useProxyForTunnel",
								"id": 3070
							}
						},
						{
							"id": 2947,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 121,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.username",
								"id": 2306
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.username",
								"id": 3083
							}
						},
						{
							"id": 2995,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to tell the tunnel to provide verbose logging output."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 122,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.verbose",
								"id": 2320
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.verbose",
								"id": 3084
							}
						},
						{
							"id": 2945,
							"name": "vmVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Overrides the version of the VM created on Sauce Labs. This property is\nonly supported by Sauce Connect 3 tunnels."
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 114,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.vmVersion",
								"id": 3071
							}
						},
						{
							"id": 2951,
							"name": "auth",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2952,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.auth",
										"id": 2308
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 147,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.auth",
								"id": 2308
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.auth",
								"id": 3073
							}
						},
						{
							"id": 3001,
							"name": "clientUrl",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
							},
							"getSignature": [
								{
									"id": 3002,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.clientUrl",
										"id": 2329
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 152,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.clientUrl",
								"id": 2329
							}
						},
						{
							"id": 2953,
							"name": "executable",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2954,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.executable",
										"id": 2310
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 151,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.executable",
								"id": 2310
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.executable",
								"id": 3075
							}
						},
						{
							"id": 2955,
							"name": "extraCapabilities",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2956,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.extraCapabilities",
										"id": 2331
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 174,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.extraCapabilities",
								"id": 2331
							}
						},
						{
							"id": 2957,
							"name": "isDownloaded",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2958,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.isDownloaded",
										"id": 2333
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 184,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.isDownloaded",
								"id": 2333
							}
						},
						{
							"id": 3003,
							"name": "isRunning",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently running."
							},
							"getSignature": [
								{
									"id": 3004,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently running."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isRunning",
										"id": 2335
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 174,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isRunning",
								"id": 2335
							}
						},
						{
							"id": 3005,
							"name": "isStarting",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently starting up."
							},
							"getSignature": [
								{
									"id": 3006,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently starting up."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStarting",
										"id": 2337
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 181,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStarting",
								"id": 2337
							}
						},
						{
							"id": 3007,
							"name": "isStopping",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently stopping."
							},
							"getSignature": [
								{
									"id": 3008,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently stopping."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStopping",
										"id": 2339
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 188,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStopping",
								"id": 2339
							}
						},
						{
							"id": 2959,
							"name": "url",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2960,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.url",
										"id": 2319
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 192,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.url",
								"id": 2319
							},
							"implementationOf": {
								"type": "reference",
								"name": "SauceLabsProperties.url",
								"id": 3087
							}
						},
						{
							"id": 3018,
							"name": "_downloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3019,
									"name": "_downloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3020,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3021,
											"name": "proxy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3022,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._downloadFile",
										"id": 2354
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 371,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._downloadFile",
								"id": 2354
							}
						},
						{
							"id": 2971,
							"name": "_makeArgs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2972,
									"name": "_makeArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2973,
											"name": "readyFile",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._makeArgs",
										"id": 2359
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 275,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._makeArgs",
								"id": 2359
							}
						},
						{
							"id": 3023,
							"name": "_makeChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3024,
									"name": "_makeChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a newly spawned child process for the tunnel software.\nImplementations should call this method to create the tunnel process.",
										"text": "Arguments passed to this method will be passed as-is to\n[[Tunnel._makeArgs]] and [[Tunnel._makeOptions]].\n",
										"returns": "An object containing a newly spawned Process and a Deferred that\nwill be resolved once the tunnel has started successfully.\n"
									},
									"parameters": [
										{
											"id": 3025,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										},
										{
											"id": 3026,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeChild",
										"id": 2362
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 443,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeChild",
								"id": 2362
							}
						},
						{
							"id": 2968,
							"name": "_makeJavaArgs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2969,
									"name": "_makeJavaArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2970,
											"name": "proxy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Url",
												"id": 5675
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 251,
									"character": 25
								}
							]
						},
						{
							"id": 2965,
							"name": "_makeNativeArgs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2966,
									"name": "_makeNativeArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2967,
											"name": "proxy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Url",
												"id": 5675
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 221,
									"character": 27
								}
							]
						},
						{
							"id": 3027,
							"name": "_makeOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3028,
									"name": "_makeOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the set of options to use when spawning the tunnel process.\nImplementations should override this method to provide the appropriate\noptions for the tunnel software.",
										"text": "Arguments passed to [[Tunnel._makeChild]] will be passed as-is to this\nmethod.\n",
										"returns": "A set of options matching those provided to Node.js\n`child_process.spawn`.\n"
									},
									"parameters": [
										{
											"id": 3029,
											"name": "_values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 3030,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 3031,
													"name": "env",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/tunnels/Tunnel.ts",
															"line": 544,
															"character": 16
														}
													],
													"type": {
														"type": "reference",
														"name": "ProcessEnv"
													},
													"defaultValue": " process.env"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														3031
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeOptions",
										"id": 2366
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 543,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeOptions",
								"id": 2366
							}
						},
						{
							"id": 2981,
							"name": "_normalizeEnvironment",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2982,
									"name": "_normalizeEnvironment",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attempt to normalize a SauceLabs described environment with the standard\nSelenium capabilities",
										"text": "SauceLabs returns a list of environments that looks like:\n\n{\n    \"short_version\": \"25\",\n    \"long_name\": \"Firefox\",\n    \"api_name\": \"firefox\",\n    \"long_version\": \"25.0b2.\",\n    \"latest_stable_version\": \"\",\n    \"automation_backend\": \"webdriver\",\n    \"os\": \"Windows 2003\"\n}\n",
										"returns": "a normalized descriptor\n"
									},
									"parameters": [
										{
											"id": 2983,
											"name": "environment",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a SauceLabs environment descriptor"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "NormalizedEnvironment",
										"id": 2444
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._normalizeEnvironment",
										"id": 2371
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 516,
									"character": 33
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._normalizeEnvironment",
								"id": 2371
							}
						},
						{
							"id": 2961,
							"name": "_postDownloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2962,
									"name": "_postDownloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2963,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Buffer"
											}
										},
										{
											"id": 2964,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._postDownloadFile",
										"id": 2374
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 210,
									"character": 29
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._postDownloadFile",
								"id": 2374
							}
						},
						{
							"id": 2978,
							"name": "_start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2979,
									"name": "_start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2980,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._start",
										"id": 2378
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 351,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._start",
								"id": 2378
							}
						},
						{
							"id": 3032,
							"name": "_stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3033,
									"name": "_stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This method provides the implementation that actually stops the tunnel.",
										"text": "The default implementation that assumes the tunnel has been closed once\nthe child process has exited. This method should be reimplemented by\nother tunnel launchers to implement correct shutdown logic, if necessary.\n",
										"returns": "A promise that resolves once the tunnel has shut down.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._stop",
										"id": 2381
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 619,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stop",
								"id": 2381
							}
						},
						{
							"id": 3054,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3055,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Destrpys all handers registered for the instance",
										"text": "Returns a promise that resolves once all handles have been destroyed\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.destroy",
										"id": 213
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 113,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.destroy",
								"id": 213
							}
						},
						{
							"id": 3009,
							"name": "download",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3010,
									"name": "download",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Downloads and extracts the tunnel software if it is not already\ndownloaded.",
										"text": "This method can be extended by implementations to perform any necessary\npost-processing, such as setting appropriate file permissions on the\ndownloaded executable.\n",
										"returns": "A promise that resolves once the download and extraction process\nhas completed.\n"
									},
									"parameters": [
										{
											"id": 3011,
											"name": "forceDownload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Force downloading the software even if it already\nhas been downloaded."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.download",
										"id": 2341
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 205,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.download",
								"id": 2341
							}
						},
						{
							"id": 3037,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3038,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the event object for the specified type"
									},
									"typeParameter": [
										{
											"id": 3039,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 3040,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the event to emit\n"
											},
											"type": {
												"type": "unknown",
												"name": "M[K]"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								},
								{
									"id": 3041,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3042,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "O",
												"constraint": {
													"type": "reference",
													"name": "EventObject",
													"id": 219,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 38,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 39,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 40,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.emit",
								"id": 196
							}
						},
						{
							"id": 3012,
							"name": "getEnvironments",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3013,
									"name": "getEnvironments",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a list of environments available on the service.",
										"text": "This method should be overridden and use a specific implementation that\nreturns normalized environments from the service. E.g.\n\n```js\n{\n    browserName: 'firefox',\n    version: '12',\n    platform: 'windows',\n    descriptor: { <original returned environment> }\n}\n```\n",
										"returns": "An object containing the response and helper functions\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NormalizedEnvironment",
													"id": 2444
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.getEnvironments",
										"id": 2344
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 229,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.getEnvironments",
								"id": 2344
							}
						},
						{
							"id": 3043,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3044,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catch all handler for various call signatures. The signatures are defined in\n`BaseEventedEvents`.  You can add your own event type -> handler types by extending\n`BaseEventedEvents`.  See example for details."
									},
									"typeParameter": [
										{
											"id": 3045,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 3046,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "K",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "TunnelEvents"
													}
												}
											}
										},
										{
											"id": 3047,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"name": "TunnelEvents"
															}
														}
													},
													{
														"type": "unknown",
														"name": "M[K]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								},
								{
									"id": 3048,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3049,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3050,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "typeParameter",
														"name": "O",
														"constraint": {
															"type": "reference",
															"name": "EventObject",
															"id": 219,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "T"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 66,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 70,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 71,
									"character": 4
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.on",
								"id": 202
							}
						},
						{
							"id": 3051,
							"name": "own",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3052,
									"name": "own",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register handles for the instance that will be destroyed when\n`this.destroy` is called",
										"text": "Returns a handle for the handle, removes the handle for the instance and\ncalls destroy\n"
									},
									"parameters": [
										{
											"id": 3053,
											"name": "handles",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Handle",
														"id": 133
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Handle",
															"id": 133
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.own",
										"id": 210
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 94,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.own",
								"id": 210
							}
						},
						{
							"id": 2974,
							"name": "sendJobState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2975,
									"name": "sendJobState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2976,
											"name": "jobId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2977,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "JobState",
												"id": 2294
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.sendJobState",
										"id": 2346
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 306,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.sendJobState",
								"id": 2346
							}
						},
						{
							"id": 3014,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3015,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts the tunnel, automatically downloading dependencies if necessary.",
										"returns": "A promise that resolves once the tunnel has been established.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.start",
										"id": 2350
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 275,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.start",
								"id": 2350
							}
						},
						{
							"id": 3016,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3017,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stops the tunnel.",
										"returns": "A promise that resolves to the exit code for the tunnel once it\nhas been terminated.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.stop",
										"id": 2352
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 332,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.stop",
								"id": 2352
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2948
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3035,
								2998,
								2999,
								2996,
								3000,
								2997,
								2930,
								2985,
								2931,
								2986,
								2933,
								2984,
								2934,
								2987,
								2935,
								3036,
								2936,
								2939,
								2940,
								2937,
								2988,
								2938,
								2989,
								2990,
								2991,
								2992,
								2941,
								2946,
								2942,
								2943,
								2932,
								2994,
								2993,
								2944,
								2947,
								2995,
								2945
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2951,
								3001,
								2953,
								2955,
								2957,
								3003,
								3005,
								3007,
								2959
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3018,
								2971,
								3023,
								2968,
								2965,
								3027,
								2981,
								2961,
								2978,
								3032,
								3054,
								3009,
								3037,
								3012,
								3043,
								3051,
								2974,
								3014,
								3016
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SauceLabsTunnel.ts",
							"line": 27,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Tunnel",
							"id": 2303
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						},
						{
							"type": "reference",
							"name": "SauceLabsProperties",
							"id": 3056
						}
					]
				},
				{
					"id": 3056,
					"name": "SauceLabsProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options specific to the SauceLabsTunnel"
					},
					"children": [
						{
							"id": 3074,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.accessKey|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 738,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.accessKey",
								"id": 2460
							}
						},
						{
							"id": 3072,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.architecture|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 732,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.architecture",
								"id": 2458
							}
						},
						{
							"id": 3073,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.auth|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 735,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.auth",
								"id": 2459
							}
						},
						{
							"id": 3057,
							"name": "directDomains",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.directDomains|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 572,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 3085,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 699,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.directory",
								"id": 2441
							}
						},
						{
							"id": 3059,
							"name": "domainAuthentication",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.domainAuthentication|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 578,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 3075,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.executable|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 741,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.executable",
								"id": 2461
							}
						},
						{
							"id": 3060,
							"name": "fastFailDomains",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.fastFailDomains|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 581,
									"character": 17
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 3076,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.hostname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 744,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.hostname",
								"id": 2462
							}
						},
						{
							"id": 3061,
							"name": "isSharedTunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.isSharedTunnel|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 584,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3062,
							"name": "logFile",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.logFile|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 587,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3065,
							"name": "logFileSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.logFileSize|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 596,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3066,
							"name": "logTrafficStats",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.logTrafficStats|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 599,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 3063,
							"name": "pacFile",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.pacFile|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 590,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3077,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.pathname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 747,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.pathname",
								"id": 2463
							}
						},
						{
							"id": 3064,
							"name": "pidFile",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.pidFile|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 593,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3078,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.platform|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 750,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.platform",
								"id": 2464
							}
						},
						{
							"id": 3079,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.port|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 753,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.port",
								"id": 2465
							}
						},
						{
							"id": 3080,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.protocol|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 756,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.protocol",
								"id": 2466
							}
						},
						{
							"id": 3086,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 700,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.proxy",
								"id": 2442
							}
						},
						{
							"id": 3067,
							"name": "restUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.restUrl|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 602,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3068,
							"name": "skipSslDomains",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.skipSslDomains|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 605,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 3069,
							"name": "squidOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.squidOptions|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 608,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 3058,
							"name": "tunnelDomains",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.tunnelDomains|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 575,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 3082,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelId|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 762,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.tunnelId",
								"id": 2468
							}
						},
						{
							"id": 3081,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelProxy|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 759,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.tunnelProxy",
								"id": 2467
							}
						},
						{
							"id": 3087,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 701,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.url",
								"id": 2443
							}
						},
						{
							"id": 3070,
							"name": "useProxyForTunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.useProxyForTunnel|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 611,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3083,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.username|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 765,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.username",
								"id": 2469
							}
						},
						{
							"id": 3084,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.verbose|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 768,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.verbose",
								"id": 2470
							}
						},
						{
							"id": 3071,
							"name": "vmVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SauceLabsTunnel.SauceLabsTunnel.vmVersion|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SauceLabsTunnel.ts",
									"line": 614,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3074,
								3072,
								3073,
								3057,
								3085,
								3059,
								3075,
								3060,
								3076,
								3061,
								3062,
								3065,
								3066,
								3063,
								3077,
								3064,
								3078,
								3079,
								3080,
								3086,
								3067,
								3068,
								3069,
								3058,
								3082,
								3081,
								3087,
								3070,
								3083,
								3084,
								3071
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SauceLabsTunnel.ts",
							"line": 570,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "SauceLabsTunnel",
							"id": 2929
						}
					]
				},
				{
					"id": 3089,
					"name": "SauceLabsOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/SauceLabsTunnel.ts",
							"line": 617,
							"character": 28
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "SauceLabsProperties",
								"id": 3056
							}
						]
					}
				},
				{
					"id": 3088,
					"name": "scVersion",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/SauceLabsTunnel.ts",
							"line": 15,
							"character": 15
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "4.5.3"
					},
					"defaultValue": "\"4.5.3\""
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2929
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3056
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3089
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						3088
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tunnels/SauceLabsTunnel.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2481,
			"name": "\"tunnels/SeleniumTunnel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/tunnels/SeleniumTunnel.ts",
			"children": [
				{
					"id": 2643,
					"name": "ChromeConfig",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 2648,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2649,
									"name": "new ChromeConfig",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2650,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChromeOptions",
												"id": 2776
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ChromeConfig",
										"id": 2643
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.__constructor",
										"id": 2632
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 378,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.__constructor",
								"id": 2632
							}
						},
						{
							"id": 2644,
							"name": "arch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 375,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ChromeProperties.arch",
								"id": 2639
							}
						},
						{
							"id": 2645,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 376,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ChromeProperties.baseUrl",
								"id": 2640
							}
						},
						{
							"id": 2646,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 377,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ChromeProperties.platform",
								"id": 2641
							}
						},
						{
							"id": 2647,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 378,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "ChromeProperties.version",
								"id": 2642
							}
						},
						{
							"id": 2651,
							"name": "artifact",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2652,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 394,
									"character": 14
								}
							]
						},
						{
							"id": 2653,
							"name": "directory",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2654,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 410,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.directory",
								"id": 2596
							}
						},
						{
							"id": 2657,
							"name": "executable",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2658,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.executable",
										"id": 2635
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 418,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.executable",
								"id": 2635
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.executable",
								"id": 2597
							}
						},
						{
							"id": 2659,
							"name": "seleniumProperty",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2660,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.seleniumProperty",
										"id": 2637
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 425,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.seleniumProperty",
								"id": 2637
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.seleniumProperty",
								"id": 2594
							}
						},
						{
							"id": 2655,
							"name": "url",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2656,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.url",
										"id": 2636
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 414,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.url",
								"id": 2636
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.url",
								"id": 2598
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2648
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2644,
								2645,
								2646,
								2647
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2651,
								2653,
								2657,
								2659,
								2655
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 373,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Config",
							"id": 2630,
							"typeArguments": [
								{
									"type": "reference",
									"name": "ChromeOptions",
									"id": 2776
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "ChromeProperties",
							"id": 2638
						},
						{
							"type": "reference",
							"name": "DriverFile",
							"id": 2593
						}
					]
				},
				{
					"id": 2630,
					"name": "Config",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isAbstract": true
					},
					"typeParameter": [
						{
							"id": 2631,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"children": [
						{
							"id": 2632,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2633,
									"name": "new Config",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2634,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "intrinsic",
													"name": "object"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Config",
										"id": 2630
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 354,
									"character": 41
								}
							]
						},
						{
							"id": 2635,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isAbstract": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 359,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2637,
							"name": "seleniumProperty",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true,
								"isAbstract": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 361,
									"character": 36
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 2636,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isAbstract": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 360,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2632
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2635,
								2637,
								2636
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 354,
							"character": 21
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "ChromeConfig",
							"id": 2643
						},
						{
							"type": "reference",
							"name": "FirefoxConfig",
							"id": 2666
						},
						{
							"type": "reference",
							"name": "IEConfig",
							"id": 2688
						},
						{
							"type": "reference",
							"name": "EdgeConfig",
							"id": 2715
						},
						{
							"type": "reference",
							"name": "EdgeChromiumConfig",
							"id": 2748
						}
					]
				},
				{
					"id": 2748,
					"name": "EdgeChromiumConfig",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 2753,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2754,
									"name": "new EdgeChromiumConfig",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2755,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChromeOptions",
												"id": 2776
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EdgeChromiumConfig",
										"id": 2748
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.__constructor",
										"id": 2632
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 641,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.__constructor",
								"id": 2632
							}
						},
						{
							"id": 2749,
							"name": "arch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 638,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "EdgeChromiumProperties.arch",
								"id": 2744
							}
						},
						{
							"id": 2750,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 639,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "EdgeChromiumProperties.baseUrl",
								"id": 2745
							}
						},
						{
							"id": 2751,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 640,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "EdgeChromiumProperties.platform",
								"id": 2746
							}
						},
						{
							"id": 2752,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 641,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "EdgeChromiumProperties.version",
								"id": 2747
							}
						},
						{
							"id": 2756,
							"name": "artifact",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2757,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 657,
									"character": 14
								}
							]
						},
						{
							"id": 2758,
							"name": "directory",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2759,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 663,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.directory",
								"id": 2596
							}
						},
						{
							"id": 2762,
							"name": "executable",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2763,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.executable",
										"id": 2635
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 671,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.executable",
								"id": 2635
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.executable",
								"id": 2597
							}
						},
						{
							"id": 2764,
							"name": "seleniumProperty",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2765,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.seleniumProperty",
										"id": 2637
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 678,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.seleniumProperty",
								"id": 2637
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.seleniumProperty",
								"id": 2594
							}
						},
						{
							"id": 2760,
							"name": "url",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2761,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.url",
										"id": 2636
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 667,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.url",
								"id": 2636
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.url",
								"id": 2598
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2753
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2749,
								2750,
								2751,
								2752
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2756,
								2758,
								2762,
								2764,
								2760
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 636,
							"character": 24
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Config",
							"id": 2630,
							"typeArguments": [
								{
									"type": "reference",
									"name": "EdgeOptions",
									"id": 2779
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "EdgeChromiumProperties",
							"id": 2743
						},
						{
							"type": "reference",
							"name": "DriverFile",
							"id": 2593
						}
					]
				},
				{
					"id": 2715,
					"name": "EdgeConfig",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 2728,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2729,
									"name": "new EdgeConfig",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2730,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EdgeOptions",
												"id": 2779
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "EdgeConfig",
										"id": 2715
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.__constructor",
										"id": 2632
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 565,
									"character": 26
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.__constructor",
								"id": 2632
							}
						},
						{
							"id": 2716,
							"name": "arch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 561,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2717,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 562,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "EdgeProperties.baseUrl",
								"id": 2706
							}
						},
						{
							"id": 2718,
							"name": "uuid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 563,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "EdgeProperties.uuid",
								"id": 2707
							}
						},
						{
							"id": 2719,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 564,
									"character": 9
								}
							],
							"type": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reflection",
									"declaration": {
										"id": 2720,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 2725,
												"name": "15063",
												"kind": 2097152,
												"kindString": "Object literal",
												"flags": {},
												"children": [
													{
														"id": 2726,
														"name": "url",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "src/tunnels/webdrivers.json",
																"line": 32,
																"character": 15
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														},
														"defaultValue": "\"https://download.microsoft.com/download/3/4/2/342316D7-EBE0-4F10-ABA2-AE8E0CDF36DD/MicrosoftWebDriver.exe\""
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															2726
														]
													}
												],
												"sources": [
													{
														"fileName": "src/tunnels/webdrivers.json",
														"line": 31,
														"character": 15
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "object"
												}
											},
											{
												"id": 2723,
												"name": "16299",
												"kind": 2097152,
												"kindString": "Object literal",
												"flags": {},
												"children": [
													{
														"id": 2724,
														"name": "url",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "src/tunnels/webdrivers.json",
																"line": 29,
																"character": 15
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														},
														"defaultValue": "\"https://download.microsoft.com/download/D/4/1/D417998A-58EE-4EFE-A7CC-39EF9E020768/MicrosoftWebDriver.exe\""
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															2724
														]
													}
												],
												"sources": [
													{
														"fileName": "src/tunnels/webdrivers.json",
														"line": 28,
														"character": 15
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "object"
												}
											},
											{
												"id": 2721,
												"name": "17134",
												"kind": 2097152,
												"kindString": "Object literal",
												"flags": {},
												"children": [
													{
														"id": 2722,
														"name": "url",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "src/tunnels/webdrivers.json",
																"line": 26,
																"character": 15
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														},
														"defaultValue": "\"https://download.microsoft.com/download/F/8/A/F8AF50AB-3C3A-4BC4-8773-DC27B32988DD/MicrosoftWebDriver.exe\""
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															2722
														]
													}
												],
												"sources": [
													{
														"fileName": "src/tunnels/webdrivers.json",
														"line": 25,
														"character": 15
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "object"
												}
											}
										],
										"groups": [
											{
												"title": "Object literals",
												"kind": 2097152,
												"children": [
													2725,
													2723,
													2721
												]
											}
										],
										"sources": [
											{
												"fileName": "src/tunnels/SeleniumTunnel.ts",
												"line": 564,
												"character": 17
											}
										]
									}
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "EdgeProperties.version",
								"id": 2708
							}
						},
						{
							"id": 2727,
							"name": "versions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 565,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "EdgeVersions",
								"id": 2710
							},
							"implementationOf": {
								"type": "reference",
								"name": "EdgeProperties.versions",
								"id": 2709
							}
						},
						{
							"id": 2735,
							"name": "artifact",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2736,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 612,
									"character": 14
								}
							]
						},
						{
							"id": 2737,
							"name": "directory",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2738,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "17134"
											},
											{
												"type": "stringLiteral",
												"value": "16299"
											},
											{
												"type": "stringLiteral",
												"value": "15063"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 616,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.directory",
								"id": 2596
							}
						},
						{
							"id": 2731,
							"name": "dontExtract",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2732,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 581,
									"character": 17
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.dontExtract",
								"id": 2595
							}
						},
						{
							"id": 2739,
							"name": "executable",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2740,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.executable",
										"id": 2635
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 620,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.executable",
								"id": 2635
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.executable",
								"id": 2597
							}
						},
						{
							"id": 2741,
							"name": "seleniumProperty",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2742,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.seleniumProperty",
										"id": 2637
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 624,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.seleniumProperty",
								"id": 2637
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.seleniumProperty",
								"id": 2594
							}
						},
						{
							"id": 2733,
							"name": "url",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2734,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.url",
										"id": 2636
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 585,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.url",
								"id": 2636
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.url",
								"id": 2598
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2728
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2716,
								2717,
								2718,
								2719,
								2727
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2735,
								2737,
								2731,
								2739,
								2741,
								2733
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 559,
							"character": 16
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Config",
							"id": 2630,
							"typeArguments": [
								{
									"type": "reference",
									"name": "EdgeOptions",
									"id": 2779
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "EdgeProperties",
							"id": 2705
						},
						{
							"type": "reference",
							"name": "DriverFile",
							"id": 2593
						}
					]
				},
				{
					"id": 2666,
					"name": "FirefoxConfig",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 2671,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2672,
									"name": "new FirefoxConfig",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2673,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FirefoxOptions",
												"id": 2777
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FirefoxConfig",
										"id": 2666
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.__constructor",
										"id": 2632
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 444,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.__constructor",
								"id": 2632
							}
						},
						{
							"id": 2667,
							"name": "arch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 441,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "FirefoxProperties.arch",
								"id": 2662
							}
						},
						{
							"id": 2668,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 442,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "FirefoxProperties.baseUrl",
								"id": 2663
							}
						},
						{
							"id": 2669,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 443,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "FirefoxProperties.platform",
								"id": 2664
							}
						},
						{
							"id": 2670,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 444,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "FirefoxProperties.version",
								"id": 2665
							}
						},
						{
							"id": 2674,
							"name": "artifact",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2675,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 460,
									"character": 14
								}
							]
						},
						{
							"id": 2678,
							"name": "directory",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2679,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 477,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.directory",
								"id": 2596
							}
						},
						{
							"id": 2680,
							"name": "executable",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2681,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.executable",
										"id": 2635
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 481,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.executable",
								"id": 2635
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.executable",
								"id": 2597
							}
						},
						{
							"id": 2682,
							"name": "seleniumProperty",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2683,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.seleniumProperty",
										"id": 2637
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 488,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.seleniumProperty",
								"id": 2637
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.seleniumProperty",
								"id": 2594
							}
						},
						{
							"id": 2676,
							"name": "url",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2677,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.url",
										"id": 2636
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 473,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.url",
								"id": 2636
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.url",
								"id": 2598
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2671
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2667,
								2668,
								2669,
								2670
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2674,
								2678,
								2680,
								2682,
								2676
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 439,
							"character": 19
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Config",
							"id": 2630,
							"typeArguments": [
								{
									"type": "reference",
									"name": "FirefoxOptions",
									"id": 2777
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "FirefoxProperties",
							"id": 2661
						},
						{
							"type": "reference",
							"name": "DriverFile",
							"id": 2593
						}
					]
				},
				{
					"id": 2688,
					"name": "IEConfig",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 2692,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2693,
									"name": "new IEConfig",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2694,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IEOptions",
												"id": 2778
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IEConfig",
										"id": 2688
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.__constructor",
										"id": 2632
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 505,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.__constructor",
								"id": 2632
							}
						},
						{
							"id": 2689,
							"name": "arch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 503,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "IEProperties.arch",
								"id": 2685
							}
						},
						{
							"id": 2690,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 504,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "IEProperties.baseUrl",
								"id": 2686
							}
						},
						{
							"id": 2691,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 505,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "IEProperties.version",
								"id": 2687
							}
						},
						{
							"id": 2695,
							"name": "artifact",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2696,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 520,
									"character": 14
								}
							]
						},
						{
							"id": 2699,
							"name": "directory",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2700,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 533,
									"character": 15
								}
							],
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.directory",
								"id": 2596
							}
						},
						{
							"id": 2701,
							"name": "executable",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2702,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.executable",
										"id": 2635
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 537,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.executable",
								"id": 2635
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.executable",
								"id": 2597
							}
						},
						{
							"id": 2703,
							"name": "seleniumProperty",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2704,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.seleniumProperty",
										"id": 2637
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 541,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.seleniumProperty",
								"id": 2637
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.seleniumProperty",
								"id": 2594
							}
						},
						{
							"id": 2697,
							"name": "url",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"getSignature": [
								{
									"id": 2698,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Config.url",
										"id": 2636
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 525,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Config.url",
								"id": 2636
							},
							"implementationOf": {
								"type": "reference",
								"name": "DriverFile.url",
								"id": 2598
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2692
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2689,
								2690,
								2691
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2695,
								2699,
								2701,
								2703,
								2697
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 502,
							"character": 14
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Config",
							"id": 2630,
							"typeArguments": [
								{
									"type": "reference",
									"name": "IEOptions",
									"id": 2778
								}
							]
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "IEProperties",
							"id": 2684
						},
						{
							"type": "reference",
							"name": "DriverFile",
							"id": 2593
						}
					]
				},
				{
					"id": 2482,
					"name": "SeleniumTunnel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Selenium tunnel. This tunnel downloads the\n[[http://www.seleniumhq.org/download/|Selenium-standalone server]] and any\nnecessary WebDriver executables, and handles starting and stopping Selenium.",
						"text": "The primary configuration option is [[SeleniumTunnel.drivers|drivers]], which\ndetermines which browsers the Selenium tunnel will support.\n\nNote that Java must be installed and in the system path to use this tunnel.\n\nThe standard browser names (for the `browserName` WebDriver capability) are:\n\n- `MicrosoftEdge`\n- `chrome`\n- `firefox`\n- `internet explorer`\n- `safari`\n"
					},
					"typeParameter": [
						{
							"id": 2571,
							"name": "O",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 2488,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2489,
									"name": "new SeleniumTunnel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2490,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SeleniumOptions",
												"id": 2770
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SeleniumTunnel",
										"id": 2482
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.__constructor",
										"id": 2326
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 98,
									"character": 27
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.__constructor",
								"id": 2326
							}
						},
						{
							"id": 2572,
							"name": "__typeMap__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 20,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "M",
								"id": 189
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.__typeMap__",
								"id": 192
							}
						},
						{
							"id": 2533,
							"name": "_handle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 126,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._handle",
								"id": 2323
							}
						},
						{
							"id": 2534,
							"name": "_process",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 127,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ChildProcess"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._process",
								"id": 2324
							}
						},
						{
							"id": 2531,
							"name": "_startTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 124,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._startTask",
								"id": 2321
							}
						},
						{
							"id": 2535,
							"name": "_state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 128,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "stopped"
									},
									{
										"type": "stringLiteral",
										"value": "starting"
									},
									{
										"type": "stringLiteral",
										"value": "running"
									},
									{
										"type": "stringLiteral",
										"value": "stopping"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._state",
								"id": 2325
							}
						},
						{
							"id": 2532,
							"name": "_stopTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 125,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stopTask",
								"id": 2322
							}
						},
						{
							"id": 2518,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel access key. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 35,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.accessKey",
								"id": 2305
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.accessKey",
								"id": 2612
							}
						},
						{
							"id": 2520,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The architecture the tunnel will run against. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 47,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.architecture",
								"id": 2307
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.architecture",
								"id": 2610
							}
						},
						{
							"id": 2521,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An HTTP authorization string to use when initiating connections to the\ntunnel. This value of this property is defined by Tunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 53,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.auth",
								"id": 2308
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.auth",
								"id": 2611
							}
						},
						{
							"id": 2485,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The base address where Selenium artifacts may be found.",
								"tags": [
									{
										"tag": "default",
										"text": "https://selenium-release.storage.googleapis.com\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 84,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.baseUrl",
								"id": 2607
							}
						},
						{
							"id": 2484,
							"name": "drivers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The desired Selenium drivers to download. Each entry may be a string or an\nobject. Strings must be the names of existing drivers in SeleniumTunnel\n(see below). An object with a 'name' property is a configuration object --\nthe name must be the name of an existing driver in SeleniumTunnel, and the\nremaining properties will be used to configure that driver. An object\nwithout a 'name' property is a driver definition. It must contain three\nproperties:",
								"text": "- `executable` - the name of the driver executable, one of:\n- `url` - the URL where the driver can be downloaded from\n- `seleniumProperty` - the name of the Java property used to tell\n  Selenium where the driver is\n\n```js\n[\n    'chrome',\n    {\n        name: 'firefox',\n        version: '0.8.0'\n    },\n    {\n        url: 'https://github.com/operasoftware/operachromiumdriver/releases/.../operadriver_mac64.zip',\n        executable: 'operadriver',\n        seleniumProperty: 'webdriver.opera.driver'\n    }\n]\n```\n\nThe built-in SeleniumTunnel drivers are:\n\n- 'chrome'\n- 'firefox'\n- 'internet explorer'\n- 'ie' (alias for 'internet explorer')\n- 'MicrosoftEdge'\n- 'edge' (alias for 'MicrosoftEdge')\n",
								"tags": [
									{
										"tag": "default",
										"text": "[ 'chrome' ]\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 77,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DriverDescriptor",
									"id": 2766
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.drivers",
								"id": 2606
							}
						},
						{
							"id": 2517,
							"name": "environmentUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a service that provides a list of environments supported by\nthe tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 29,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.environmentUrl",
								"id": 2304
							}
						},
						{
							"id": 2522,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The host on which a WebDriver client can access the service provided by\nthe tunnel. This may or may not be the host where the tunnel application\nis running."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 73,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.hostname",
								"id": 2311
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.hostname",
								"id": 2614
							}
						},
						{
							"id": 2573,
							"name": "listenersMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "map of listeners keyed by event type"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 24,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										]
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EventedCallback",
											"id": 223,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeParameter",
													"name": "O",
													"constraint": {
														"type": "reference",
														"name": "EventObject",
														"id": 219,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												}
											]
										}
									}
								]
							},
							"defaultValue": " new Map()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.listenersMap",
								"id": 193
							}
						},
						{
							"id": 2523,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path that a WebDriver client should use to access the service\nprovided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 79,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.pathname",
								"id": 2312
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.pathname",
								"id": 2615
							}
						},
						{
							"id": 2524,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operating system the tunnel will run on. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 85,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.platform",
								"id": 2313
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.platform",
								"id": 2616
							}
						},
						{
							"id": 2525,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The local port where the WebDriver server should be exposed by the\ntunnel. This is typed as a string for Url compatibility, but should be a\nnumber."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 92,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.port",
								"id": 2314
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.port",
								"id": 2617
							}
						},
						{
							"id": 2526,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The protocol (e.g., 'http') that a WebDriver client should use to access\nthe service provided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 98,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.protocol",
								"id": 2315
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.protocol",
								"id": 2618
							}
						},
						{
							"id": 2527,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 104,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.proxy",
								"id": 2316
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.proxy",
								"id": 2624
							}
						},
						{
							"id": 2483,
							"name": "seleniumArgs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Additional arguments to send to the Selenium server at startup"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 35,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.seleniumArgs",
								"id": 2605
							}
						},
						{
							"id": 2487,
							"name": "seleniumTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Timeout in milliseconds for communicating with the Selenium server",
								"tags": [
									{
										"tag": "default",
										"text": "5000\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 98,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.seleniumTimeout",
								"id": 2609
							}
						},
						{
							"id": 2529,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A unique identifier for the newly created tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 116,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelId",
								"id": 2318
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.tunnelId",
								"id": 2620
							}
						},
						{
							"id": 2528,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used.",
								"text": "This overrides the `proxy` configuration allowing independent\nconfiguration for the Tunnel binary process only.\n"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 113,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelProxy",
								"id": 2317
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.tunnelProxy",
								"id": 2619
							}
						},
						{
							"id": 2519,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel username. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 41,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.username",
								"id": 2306
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.username",
								"id": 2621
							}
						},
						{
							"id": 2530,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to tell the tunnel to provide verbose logging output."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 122,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.verbose",
								"id": 2320
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.verbose",
								"id": 2622
							}
						},
						{
							"id": 2486,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The desired version of selenium to install.",
								"tags": [
									{
										"tag": "default",
										"text": "3.3.1\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 91,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.version",
								"id": 2608
							}
						},
						{
							"id": 2491,
							"name": "artifact",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2492,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 120,
									"character": 14
								}
							]
						},
						{
							"id": 2536,
							"name": "clientUrl",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
							},
							"getSignature": [
								{
									"id": 2537,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.clientUrl",
										"id": 2329
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 152,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.clientUrl",
								"id": 2329
							}
						},
						{
							"id": 2493,
							"name": "directory",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2494,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.directory",
										"id": 2309
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 124,
									"character": 15
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.directory",
								"id": 2309
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.directory",
								"id": 2623
							}
						},
						{
							"id": 2495,
							"name": "executable",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2496,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.executable",
										"id": 2310
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 128,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.executable",
								"id": 2310
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.executable",
								"id": 2613
							}
						},
						{
							"id": 2538,
							"name": "extraCapabilities",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A map of additional capabilities that need to be sent to the provider\nwhen a new session is being created."
							},
							"getSignature": [
								{
									"id": 2539,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "A map of additional capabilities that need to be sent to the provider\nwhen a new session is being created."
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.extraCapabilities",
										"id": 2331
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 160,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.extraCapabilities",
								"id": 2331
							}
						},
						{
							"id": 2497,
							"name": "isDownloaded",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2498,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.isDownloaded",
										"id": 2333
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 132,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.isDownloaded",
								"id": 2333
							}
						},
						{
							"id": 2540,
							"name": "isRunning",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently running."
							},
							"getSignature": [
								{
									"id": 2541,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently running."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isRunning",
										"id": 2335
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 174,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isRunning",
								"id": 2335
							}
						},
						{
							"id": 2542,
							"name": "isStarting",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently starting up."
							},
							"getSignature": [
								{
									"id": 2543,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently starting up."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStarting",
										"id": 2337
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 181,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStarting",
								"id": 2337
							}
						},
						{
							"id": 2544,
							"name": "isStopping",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently stopping."
							},
							"getSignature": [
								{
									"id": 2545,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently stopping."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStopping",
										"id": 2339
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 188,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStopping",
								"id": 2339
							}
						},
						{
							"id": 2499,
							"name": "url",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2500,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.url",
										"id": 2319
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 142,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.url",
								"id": 2319
							},
							"implementationOf": {
								"type": "reference",
								"name": "SeleniumProperties.url",
								"id": 2625
							}
						},
						{
							"id": 2552,
							"name": "_downloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2553,
									"name": "_downloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2554,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 2555,
											"name": "proxy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 2556,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._downloadFile",
										"id": 2354
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 371,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._downloadFile",
								"id": 2354
							}
						},
						{
							"id": 2506,
							"name": "_getDriverConfigs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2507,
									"name": "_getDriverConfigs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "DriverFile",
											"id": 2593
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 203,
									"character": 29
								}
							]
						},
						{
							"id": 2508,
							"name": "_makeArgs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2509,
									"name": "_makeArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._makeArgs",
										"id": 2359
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 226,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._makeArgs",
								"id": 2359
							}
						},
						{
							"id": 2557,
							"name": "_makeChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2558,
									"name": "_makeChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a newly spawned child process for the tunnel software.\nImplementations should call this method to create the tunnel process.",
										"text": "Arguments passed to this method will be passed as-is to\n[[Tunnel._makeArgs]] and [[Tunnel._makeOptions]].\n",
										"returns": "An object containing a newly spawned Process and a Deferred that\nwill be resolved once the tunnel has started successfully.\n"
									},
									"parameters": [
										{
											"id": 2559,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										},
										{
											"id": 2560,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeChild",
										"id": 2362
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 443,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeChild",
								"id": 2362
							}
						},
						{
							"id": 2561,
							"name": "_makeOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2562,
									"name": "_makeOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the set of options to use when spawning the tunnel process.\nImplementations should override this method to provide the appropriate\noptions for the tunnel software.",
										"text": "Arguments passed to [[Tunnel._makeChild]] will be passed as-is to this\nmethod.\n",
										"returns": "A set of options matching those provided to Node.js\n`child_process.spawn`.\n"
									},
									"parameters": [
										{
											"id": 2563,
											"name": "_values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2564,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2565,
													"name": "env",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/tunnels/Tunnel.ts",
															"line": 544,
															"character": 16
														}
													],
													"type": {
														"type": "reference",
														"name": "ProcessEnv"
													},
													"defaultValue": " process.env"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														2565
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeOptions",
										"id": 2366
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 543,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeOptions",
								"id": 2366
							}
						},
						{
							"id": 2566,
							"name": "_normalizeEnvironment",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2567,
									"name": "_normalizeEnvironment",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Normalizes a specific Tunnel environment descriptor to a general form. To\nbe overriden by a child implementation.",
										"returns": "a normalized environment\n"
									},
									"parameters": [
										{
											"id": 2568,
											"name": "environment",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an environment descriptor specific to the Tunnel"
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "NormalizedEnvironment",
										"id": 2444
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._normalizeEnvironment",
										"id": 2371
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 554,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._normalizeEnvironment",
								"id": 2371
							}
						},
						{
							"id": 2510,
							"name": "_postDownloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2511,
									"name": "_postDownloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2512,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Buffer"
											}
										},
										{
											"id": 2513,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "SeleniumDownloadOptions",
												"id": 2626
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._postDownloadFile",
										"id": 2374
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 254,
									"character": 29
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._postDownloadFile",
								"id": 2374
							}
						},
						{
							"id": 2514,
							"name": "_start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2515,
									"name": "_start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2516,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._start",
										"id": 2378
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 262,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._start",
								"id": 2378
							}
						},
						{
							"id": 2569,
							"name": "_stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2570,
									"name": "_stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This method provides the implementation that actually stops the tunnel.",
										"text": "The default implementation that assumes the tunnel has been closed once\nthe child process has exited. This method should be reimplemented by\nother tunnel launchers to implement correct shutdown logic, if necessary.\n",
										"returns": "A promise that resolves once the tunnel has shut down.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._stop",
										"id": 2381
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 619,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stop",
								"id": 2381
							}
						},
						{
							"id": 2591,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2592,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Destrpys all handers registered for the instance",
										"text": "Returns a promise that resolves once all handles have been destroyed\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.destroy",
										"id": 213
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 113,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.destroy",
								"id": 213
							}
						},
						{
							"id": 2501,
							"name": "download",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2502,
									"name": "download",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2503,
											"name": "forceDownload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.download",
										"id": 2341
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 150,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.download",
								"id": 2341
							}
						},
						{
							"id": 2574,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2575,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the event object for the specified type"
									},
									"typeParameter": [
										{
											"id": 2576,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 2577,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the event to emit\n"
											},
											"type": {
												"type": "unknown",
												"name": "M[K]"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								},
								{
									"id": 2578,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2579,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "O",
												"constraint": {
													"type": "reference",
													"name": "EventObject",
													"id": 219,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 38,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 39,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 40,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.emit",
								"id": 196
							}
						},
						{
							"id": 2546,
							"name": "getEnvironments",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2547,
									"name": "getEnvironments",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a list of environments available on the service.",
										"text": "This method should be overridden and use a specific implementation that\nreturns normalized environments from the service. E.g.\n\n```js\n{\n    browserName: 'firefox',\n    version: '12',\n    platform: 'windows',\n    descriptor: { <original returned environment> }\n}\n```\n",
										"returns": "An object containing the response and helper functions\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NormalizedEnvironment",
													"id": 2444
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.getEnvironments",
										"id": 2344
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 229,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.getEnvironments",
								"id": 2344
							}
						},
						{
							"id": 2580,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2581,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catch all handler for various call signatures. The signatures are defined in\n`BaseEventedEvents`.  You can add your own event type -> handler types by extending\n`BaseEventedEvents`.  See example for details."
									},
									"typeParameter": [
										{
											"id": 2582,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 2583,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "K",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "TunnelEvents"
													}
												}
											}
										},
										{
											"id": 2584,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"name": "TunnelEvents"
															}
														}
													},
													{
														"type": "unknown",
														"name": "M[K]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								},
								{
									"id": 2585,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2586,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2587,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "typeParameter",
														"name": "O",
														"constraint": {
															"type": "reference",
															"name": "EventObject",
															"id": 219,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "T"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 66,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 70,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 71,
									"character": 4
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.on",
								"id": 202
							}
						},
						{
							"id": 2588,
							"name": "own",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2589,
									"name": "own",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register handles for the instance that will be destroyed when\n`this.destroy` is called",
										"text": "Returns a handle for the handle, removes the handle for the instance and\ncalls destroy\n"
									},
									"parameters": [
										{
											"id": 2590,
											"name": "handles",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Handle",
														"id": 133
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Handle",
															"id": 133
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.own",
										"id": 210
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 94,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.own",
								"id": 210
							}
						},
						{
							"id": 2504,
							"name": "sendJobState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2505,
									"name": "sendJobState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.sendJobState",
										"id": 2346
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 198,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.sendJobState",
								"id": 2346
							}
						},
						{
							"id": 2548,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2549,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts the tunnel, automatically downloading dependencies if necessary.",
										"returns": "A promise that resolves once the tunnel has been established.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.start",
										"id": 2350
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 275,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.start",
								"id": 2350
							}
						},
						{
							"id": 2550,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2551,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stops the tunnel.",
										"returns": "A promise that resolves to the exit code for the tunnel once it\nhas been terminated.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.stop",
										"id": 2352
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 332,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.stop",
								"id": 2352
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2488
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2572,
								2533,
								2534,
								2531,
								2535,
								2532,
								2518,
								2520,
								2521,
								2485,
								2484,
								2517,
								2522,
								2573,
								2523,
								2524,
								2525,
								2526,
								2527,
								2483,
								2487,
								2529,
								2528,
								2519,
								2530,
								2486
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2491,
								2536,
								2493,
								2495,
								2538,
								2497,
								2540,
								2542,
								2544,
								2499
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2552,
								2506,
								2508,
								2557,
								2561,
								2566,
								2510,
								2514,
								2569,
								2591,
								2501,
								2574,
								2546,
								2580,
								2588,
								2504,
								2548,
								2550
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 32,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Tunnel",
							"id": 2303
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						},
						{
							"type": "reference",
							"name": "SeleniumProperties",
							"id": 2604
						}
					]
				},
				{
					"id": 2638,
					"name": "ChromeProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 2639,
							"name": "arch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 365,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2640,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 366,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2641,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 367,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2642,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 368,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2639,
								2640,
								2641,
								2642
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 364,
							"character": 26
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "ChromeConfig",
							"id": 2643
						}
					]
				},
				{
					"id": 2593,
					"name": "DriverFile",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2596,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 315,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "RemoteFile.directory",
								"id": 2601
							}
						},
						{
							"id": 2595,
							"name": "dontExtract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 314,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "RemoteFile.dontExtract",
								"id": 2600
							}
						},
						{
							"id": 2597,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 316,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "RemoteFile.executable",
								"id": 2602
							}
						},
						{
							"id": 2594,
							"name": "seleniumProperty",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 310,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2598,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 317,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "RemoteFile.url",
								"id": 2603
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2596,
								2595,
								2597,
								2594,
								2598
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 309,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "RemoteFile",
							"id": 2599
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "ChromeConfig",
							"id": 2643
						},
						{
							"type": "reference",
							"name": "EdgeChromiumConfig",
							"id": 2748
						},
						{
							"type": "reference",
							"name": "EdgeConfig",
							"id": 2715
						},
						{
							"type": "reference",
							"name": "FirefoxConfig",
							"id": 2666
						},
						{
							"type": "reference",
							"name": "IEConfig",
							"id": 2688
						}
					]
				},
				{
					"id": 2743,
					"name": "EdgeChromiumProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 2744,
							"name": "arch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 630,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2745,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 631,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2746,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 632,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2747,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 633,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2744,
								2745,
								2746,
								2747
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 629,
							"character": 32
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "EdgeChromiumConfig",
							"id": 2748
						}
					]
				},
				{
					"id": 2705,
					"name": "EdgeProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 2706,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 547,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2707,
							"name": "uuid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 548,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2708,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 549,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2709,
							"name": "versions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 550,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "EdgeVersions",
								"id": 2710
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2706,
								2707,
								2708,
								2709
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 546,
							"character": 24
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "EdgeConfig",
							"id": 2715
						}
					]
				},
				{
					"id": 2710,
					"name": "EdgeVersions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"indexSignature": [
						{
							"id": 2711,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 2712,
									"name": "version",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2713,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 2714,
											"name": "url",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/tunnels/SeleniumTunnel.ts",
													"line": 554,
													"character": 26
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												2714
											]
										}
									],
									"sources": [
										{
											"fileName": "src/tunnels/SeleniumTunnel.ts",
											"line": 554,
											"character": 20
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 553,
							"character": 22
						}
					]
				},
				{
					"id": 2661,
					"name": "FirefoxProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 2662,
							"name": "arch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 431,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2663,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 432,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2664,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 433,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2665,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 434,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2662,
								2663,
								2664,
								2665
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 430,
							"character": 27
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "FirefoxConfig",
							"id": 2666
						}
					]
				},
				{
					"id": 2684,
					"name": "IEProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 2685,
							"name": "arch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 495,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2686,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 496,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2687,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 497,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2685,
								2686,
								2687
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 494,
							"character": 22
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "IEConfig",
							"id": 2688
						}
					]
				},
				{
					"id": 2599,
					"name": "RemoteFile",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2601,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 315,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 2600,
							"name": "dontExtract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 314,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 2602,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 316,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2603,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 317,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2601,
								2600,
								2602,
								2603
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 313,
							"character": 27
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "DriverFile",
							"id": 2593
						}
					]
				},
				{
					"id": 2626,
					"name": "SeleniumDownloadOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2628,
							"name": "dontExtract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 349,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 2627,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 348,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2628,
								2627
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 347,
							"character": 40
						}
					],
					"extendedTypes": [
						{
							"type": "reflection",
							"declaration": {
								"id": 2629,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"sources": [
									{
										"fileName": "src/tunnels/SeleniumTunnel.ts",
										"line": 347,
										"character": 48
									}
								]
							}
						}
					]
				},
				{
					"id": 2604,
					"name": "SeleniumProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options specific to SeleniumTunnel"
					},
					"children": [
						{
							"id": 2612,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.accessKey|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 738,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.accessKey",
								"id": 2460
							}
						},
						{
							"id": 2610,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.architecture|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 732,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.architecture",
								"id": 2458
							}
						},
						{
							"id": 2611,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.auth|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 735,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.auth",
								"id": 2459
							}
						},
						{
							"id": 2607,
							"name": "baseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SeleniumTunnel.SeleniumTunnel.baseUrl|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 336,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2623,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 699,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.directory",
								"id": 2441
							}
						},
						{
							"id": 2606,
							"name": "drivers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SeleniumTunnel.SeleniumTunnel.drivers|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 333,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DriverDescriptor",
									"id": 2766
								}
							}
						},
						{
							"id": 2613,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.executable|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 741,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.executable",
								"id": 2461
							}
						},
						{
							"id": 2614,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.hostname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 744,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.hostname",
								"id": 2462
							}
						},
						{
							"id": 2615,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.pathname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 747,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.pathname",
								"id": 2463
							}
						},
						{
							"id": 2616,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.platform|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 750,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.platform",
								"id": 2464
							}
						},
						{
							"id": 2617,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.port|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 753,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.port",
								"id": 2465
							}
						},
						{
							"id": 2618,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.protocol|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 756,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.protocol",
								"id": 2466
							}
						},
						{
							"id": 2624,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 700,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.proxy",
								"id": 2442
							}
						},
						{
							"id": 2605,
							"name": "seleniumArgs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SeleniumTunnel.SeleniumTunnel.seleniumArgs|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 330,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 2609,
							"name": "seleniumTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SeleniumTunnel.SeleniumTunnel.seleniumTimeout|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 342,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2620,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelId|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 762,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.tunnelId",
								"id": 2468
							}
						},
						{
							"id": 2619,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelProxy|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 759,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.tunnelProxy",
								"id": 2467
							}
						},
						{
							"id": 2625,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 701,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.url",
								"id": 2443
							}
						},
						{
							"id": 2621,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.username|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 765,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.username",
								"id": 2469
							}
						},
						{
							"id": 2622,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.verbose|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 768,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.verbose",
								"id": 2470
							}
						},
						{
							"id": 2608,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[SeleniumTunnel.SeleniumTunnel.version|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 339,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2612,
								2610,
								2611,
								2607,
								2623,
								2606,
								2613,
								2614,
								2615,
								2616,
								2617,
								2618,
								2624,
								2605,
								2609,
								2620,
								2619,
								2625,
								2621,
								2622,
								2608
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 328,
							"character": 35
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "SeleniumTunnel",
							"id": 2482
						}
					]
				},
				{
					"id": 2776,
					"name": "ChromeOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 371,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "ChromeProperties",
								"id": 2638
							}
						]
					}
				},
				{
					"id": 2771,
					"name": "DriverConstructor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 352,
							"character": 22
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2772,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 2773,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"signatures": [
										{
											"id": 2774,
											"name": "new __type",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 2775,
													"name": "config",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "DriverFile",
												"id": 2593
											}
										}
									],
									"sources": [
										{
											"fileName": "src/tunnels/SeleniumTunnel.ts",
											"line": 352,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										2773
									]
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 352,
									"character": 24
								}
							]
						}
					}
				},
				{
					"id": 2766,
					"name": "DriverDescriptor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 320,
							"character": 28
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "DriverFile",
								"id": 2593
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 2767,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 2768,
											"name": "name",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/tunnels/SeleniumTunnel.ts",
													"line": 323,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2769,
											"name": "version",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/tunnels/SeleniumTunnel.ts",
													"line": 323,
													"character": 27
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												2768,
												2769
											]
										}
									],
									"sources": [
										{
											"fileName": "src/tunnels/SeleniumTunnel.ts",
											"line": 323,
											"character": 3
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 2779,
					"name": "EdgeOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 557,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "EdgeProperties",
								"id": 2705
							}
						]
					}
				},
				{
					"id": 2777,
					"name": "FirefoxOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 437,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "FirefoxProperties",
								"id": 2661
							}
						]
					}
				},
				{
					"id": 2778,
					"name": "IEOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 500,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IEProperties",
								"id": 2684
							}
						]
					}
				},
				{
					"id": 2770,
					"name": "SeleniumOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 345,
							"character": 27
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "SeleniumProperties",
								"id": 2604
							}
						]
					}
				},
				{
					"id": 2784,
					"name": "driverNameMap",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 2790,
							"name": "MicrosoftEdge",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 695,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "EdgeConfig",
								"id": 2715
							},
							"defaultValue": " EdgeConfig"
						},
						{
							"id": 2792,
							"name": "MicrosoftEdgeChromium",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 697,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "EdgeChromiumConfig",
								"id": 2748
							},
							"defaultValue": " EdgeChromiumConfig"
						},
						{
							"id": 2785,
							"name": "chrome",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 690,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ChromeConfig",
								"id": 2643
							},
							"defaultValue": " ChromeConfig"
						},
						{
							"id": 2789,
							"name": "edge",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 694,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "EdgeConfig",
								"id": 2715
							},
							"defaultValue": " EdgeConfig"
						},
						{
							"id": 2791,
							"name": "edgeChromium",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 696,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "EdgeChromiumConfig",
								"id": 2748
							},
							"defaultValue": " EdgeChromiumConfig"
						},
						{
							"id": 2786,
							"name": "firefox",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 691,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "FirefoxConfig",
								"id": 2666
							},
							"defaultValue": " FirefoxConfig"
						},
						{
							"id": 2787,
							"name": "ie",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 692,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"name": "IEConfig",
								"id": 2688
							},
							"defaultValue": " IEConfig"
						},
						{
							"id": 2788,
							"name": "internet explorer",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 693,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "IEConfig",
								"id": 2688
							},
							"defaultValue": " IEConfig"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								2790,
								2792,
								2785,
								2789,
								2791,
								2786,
								2787,
								2788
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 689,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 2780,
					"name": "edgePlatformNames",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 2781,
							"name": "darwin",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 684,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"mac\""
						},
						{
							"id": 2782,
							"name": "win32",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 685,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"win\""
						},
						{
							"id": 2783,
							"name": "win64",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/tunnels/SeleniumTunnel.ts",
									"line": 686,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"win\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								2781,
								2782,
								2783
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/SeleniumTunnel.ts",
							"line": 683,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2643,
						2630,
						2748,
						2715,
						2666,
						2688,
						2482
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2638,
						2593,
						2743,
						2705,
						2710,
						2661,
						2684,
						2599,
						2626,
						2604
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						2776,
						2771,
						2766,
						2779,
						2777,
						2778,
						2770
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						2784,
						2780
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tunnels/SeleniumTunnel.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3090,
			"name": "\"tunnels/TestingBotTunnel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/tunnels/TestingBotTunnel.ts",
			"children": [
				{
					"id": 3091,
					"name": "TestingBotTunnel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A TestingBot tunnel.",
						"text": "The username and accessKey properties will be initialized using\nTESTINGBOT_API_KEY and TESTINGBOT_API_SECRET.\n"
					},
					"typeParameter": [
						{
							"id": 3178,
							"name": "O",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 3099,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3100,
									"name": "new TestingBotTunnel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3101,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "TestingBotOptions",
												"id": 3223
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TestingBotTunnel",
										"id": 3091
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.__constructor",
										"id": 2326
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 46,
									"character": 19
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.__constructor",
								"id": 2326
							}
						},
						{
							"id": 3179,
							"name": "__typeMap__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 20,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "M",
								"id": 189
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.__typeMap__",
								"id": 192
							}
						},
						{
							"id": 3136,
							"name": "_handle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 126,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._handle",
								"id": 2323
							}
						},
						{
							"id": 3137,
							"name": "_process",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 127,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ChildProcess"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._process",
								"id": 2324
							}
						},
						{
							"id": 3134,
							"name": "_startTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 124,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._startTask",
								"id": 2321
							}
						},
						{
							"id": 3138,
							"name": "_state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 128,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "stopped"
									},
									{
										"type": "stringLiteral",
										"value": "starting"
									},
									{
										"type": "stringLiteral",
										"value": "running"
									},
									{
										"type": "stringLiteral",
										"value": "stopping"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._state",
								"id": 2325
							}
						},
						{
							"id": 3135,
							"name": "_stopTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 125,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stopTask",
								"id": 2322
							}
						},
						{
							"id": 3120,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel access key. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 35,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.accessKey",
								"id": 2305
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.accessKey",
								"id": 3209
							}
						},
						{
							"id": 3122,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The architecture the tunnel will run against. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 47,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.architecture",
								"id": 2307
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.architecture",
								"id": 3207
							}
						},
						{
							"id": 3092,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 23,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.directory",
								"id": 2309
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.directory",
								"id": 3220
							}
						},
						{
							"id": 3119,
							"name": "environmentUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a service that provides a list of environments supported by\nthe tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 29,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.environmentUrl",
								"id": 2304
							}
						},
						{
							"id": 3123,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The executable to spawn in order to create a tunnel. This value is set\nby the tunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 66,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.executable",
								"id": 2310
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.executable",
								"id": 3210
							}
						},
						{
							"id": 3093,
							"name": "fastFailDomains",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A list of regular expressions corresponding to domains whose connections\nshould fail immediately if the VM attempts to make a connection to them."
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 29,
									"character": 17
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.fastFailDomains",
								"id": 3201
							}
						},
						{
							"id": 3124,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The host on which a WebDriver client can access the service provided by\nthe tunnel. This may or may not be the host where the tunnel application\nis running."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 73,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.hostname",
								"id": 2311
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.hostname",
								"id": 3211
							}
						},
						{
							"id": 3180,
							"name": "listenersMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "map of listeners keyed by event type"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 24,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										]
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EventedCallback",
											"id": 223,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeParameter",
													"name": "O",
													"constraint": {
														"type": "reference",
														"name": "EventObject",
														"id": 219,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												}
											]
										}
									}
								]
							},
							"defaultValue": " new Map()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.listenersMap",
								"id": 193
							}
						},
						{
							"id": 3094,
							"name": "logFile",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A filename where additional logs from the tunnel should be output."
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 32,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.logFile",
								"id": 3202
							}
						},
						{
							"id": 3125,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path that a WebDriver client should use to access the service\nprovided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 79,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.pathname",
								"id": 2312
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.pathname",
								"id": 3212
							}
						},
						{
							"id": 3126,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operating system the tunnel will run on. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 85,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.platform",
								"id": 2313
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.platform",
								"id": 3213
							}
						},
						{
							"id": 3127,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The local port where the WebDriver server should be exposed by the\ntunnel. This is typed as a string for Url compatibility, but should be a\nnumber."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 92,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.port",
								"id": 2314
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.port",
								"id": 3214
							}
						},
						{
							"id": 3128,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The protocol (e.g., 'http') that a WebDriver client should use to access\nthe service provided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 98,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.protocol",
								"id": 2315
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.protocol",
								"id": 3215
							}
						},
						{
							"id": 3129,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 104,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.proxy",
								"id": 2316
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.proxy",
								"id": 3221
							}
						},
						{
							"id": 3131,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A unique identifier for the newly created tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 116,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelId",
								"id": 2318
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.tunnelId",
								"id": 3217
							}
						},
						{
							"id": 3130,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used.",
								"text": "This overrides the `proxy` configuration allowing independent\nconfiguration for the Tunnel binary process only.\n"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 113,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.tunnelProxy",
								"id": 2317
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.tunnelProxy",
								"id": 3216
							}
						},
						{
							"id": 3132,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL where the tunnel software can be downloaded."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 119,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.url",
								"id": 2319
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.url",
								"id": 3222
							}
						},
						{
							"id": 3095,
							"name": "useCompression",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to use rabbIT compression for the tunnel connection."
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 35,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.useCompression",
								"id": 3203
							}
						},
						{
							"id": 3096,
							"name": "useJettyProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to use the default local Jetty proxy for the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 38,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.useJettyProxy",
								"id": 3204
							}
						},
						{
							"id": 3097,
							"name": "useSquidProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to use the default remote Squid proxy for the VM."
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 41,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.useSquidProxy",
								"id": 3205
							}
						},
						{
							"id": 3098,
							"name": "useSsl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to re-encrypt data encrypted by self-signed certificates."
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 46,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.useSsl",
								"id": 3206
							}
						},
						{
							"id": 3121,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel username. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 41,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.username",
								"id": 2306
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.username",
								"id": 3218
							}
						},
						{
							"id": 3133,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to tell the tunnel to provide verbose logging output."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 122,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.verbose",
								"id": 2320
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.verbose",
								"id": 3219
							}
						},
						{
							"id": 3102,
							"name": "auth",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 3103,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.auth",
										"id": 2308
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 71,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.auth",
								"id": 2308
							},
							"implementationOf": {
								"type": "reference",
								"name": "TestingBotProperties.auth",
								"id": 3208
							}
						},
						{
							"id": 3139,
							"name": "clientUrl",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
							},
							"getSignature": [
								{
									"id": 3140,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.clientUrl",
										"id": 2329
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 152,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.clientUrl",
								"id": 2329
							}
						},
						{
							"id": 3141,
							"name": "extraCapabilities",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A map of additional capabilities that need to be sent to the provider\nwhen a new session is being created."
							},
							"getSignature": [
								{
									"id": 3142,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "A map of additional capabilities that need to be sent to the provider\nwhen a new session is being created."
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.extraCapabilities",
										"id": 2331
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 160,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.extraCapabilities",
								"id": 2331
							}
						},
						{
							"id": 3104,
							"name": "isDownloaded",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"getSignature": [
								{
									"id": 3105,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.isDownloaded",
										"id": 2333
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 75,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.isDownloaded",
								"id": 2333
							}
						},
						{
							"id": 3143,
							"name": "isRunning",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently running."
							},
							"getSignature": [
								{
									"id": 3144,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently running."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isRunning",
										"id": 2335
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 174,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isRunning",
								"id": 2335
							}
						},
						{
							"id": 3145,
							"name": "isStarting",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently starting up."
							},
							"getSignature": [
								{
									"id": 3146,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently starting up."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStarting",
										"id": 2337
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 181,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStarting",
								"id": 2337
							}
						},
						{
							"id": 3147,
							"name": "isStopping",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently stopping."
							},
							"getSignature": [
								{
									"id": 3148,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently stopping."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.isStopping",
										"id": 2339
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 188,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.isStopping",
								"id": 2339
							}
						},
						{
							"id": 3158,
							"name": "_downloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3159,
									"name": "_downloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3160,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3161,
											"name": "proxy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 3162,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._downloadFile",
										"id": 2354
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 371,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._downloadFile",
								"id": 2354
							}
						},
						{
							"id": 3106,
							"name": "_makeArgs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3107,
									"name": "_makeArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3108,
											"name": "readyFile",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._makeArgs",
										"id": 2359
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 81,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._makeArgs",
								"id": 2359
							}
						},
						{
							"id": 3163,
							"name": "_makeChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3164,
									"name": "_makeChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a newly spawned child process for the tunnel software.\nImplementations should call this method to create the tunnel process.",
										"text": "Arguments passed to this method will be passed as-is to\n[[Tunnel._makeArgs]] and [[Tunnel._makeOptions]].\n",
										"returns": "An object containing a newly spawned Process and a Deferred that\nwill be resolved once the tunnel has started successfully.\n"
									},
									"parameters": [
										{
											"id": 3165,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										},
										{
											"id": 3166,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeChild",
										"id": 2362
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 443,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeChild",
								"id": 2362
							}
						},
						{
							"id": 3167,
							"name": "_makeOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3168,
									"name": "_makeOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the set of options to use when spawning the tunnel process.\nImplementations should override this method to provide the appropriate\noptions for the tunnel software.",
										"text": "Arguments passed to [[Tunnel._makeChild]] will be passed as-is to this\nmethod.\n",
										"returns": "A set of options matching those provided to Node.js\n`child_process.spawn`.\n"
									},
									"parameters": [
										{
											"id": 3169,
											"name": "_values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 3170,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 3171,
													"name": "env",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/tunnels/Tunnel.ts",
															"line": 544,
															"character": 16
														}
													],
													"type": {
														"type": "reference",
														"name": "ProcessEnv"
													},
													"defaultValue": " process.env"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														3171
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._makeOptions",
										"id": 2366
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 543,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._makeOptions",
								"id": 2366
							}
						},
						{
							"id": 3116,
							"name": "_normalizeEnvironment",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3117,
									"name": "_normalizeEnvironment",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attempt to normalize a TestingBot described environment with the standard\nSelenium capabilities",
										"text": "TestingBot returns a list of environments that looks like:\n\n{\n    \"selenium_name\": \"Chrome36\",\n    \"name\": \"googlechrome\",\n    \"platform\": \"CAPITAN\",\n    \"version\":\"36\"\n}\n",
										"returns": "a normalized descriptor\n"
									},
									"parameters": [
										{
											"id": 3118,
											"name": "environment",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a TestingBot environment descriptor"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "NormalizedEnvironment",
										"id": 2444
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._normalizeEnvironment",
										"id": 2371
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 247,
									"character": 33
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._normalizeEnvironment",
								"id": 2371
							}
						},
						{
							"id": 3172,
							"name": "_postDownloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3173,
									"name": "_postDownloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called with the response after a file download has completed"
									},
									"parameters": [
										{
											"id": 3174,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Buffer"
											}
										},
										{
											"id": 3175,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._postDownloadFile",
										"id": 2374
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 561,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._postDownloadFile",
								"id": 2374
							}
						},
						{
							"id": 3113,
							"name": "_start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3114,
									"name": "_start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3115,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel._start",
										"id": 2378
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 168,
									"character": 18
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel._start",
								"id": 2378
							}
						},
						{
							"id": 3176,
							"name": "_stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3177,
									"name": "_stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This method provides the implementation that actually stops the tunnel.",
										"text": "The default implementation that assumes the tunnel has been closed once\nthe child process has exited. This method should be reimplemented by\nother tunnel launchers to implement correct shutdown logic, if necessary.\n",
										"returns": "A promise that resolves once the tunnel has shut down.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel._stop",
										"id": 2381
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 619,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel._stop",
								"id": 2381
							}
						},
						{
							"id": 3198,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3199,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Destrpys all handers registered for the instance",
										"text": "Returns a promise that resolves once all handles have been destroyed\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.destroy",
										"id": 213
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 113,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.destroy",
								"id": 213
							}
						},
						{
							"id": 3149,
							"name": "download",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3150,
									"name": "download",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Downloads and extracts the tunnel software if it is not already\ndownloaded.",
										"text": "This method can be extended by implementations to perform any necessary\npost-processing, such as setting appropriate file permissions on the\ndownloaded executable.\n",
										"returns": "A promise that resolves once the download and extraction process\nhas completed.\n"
									},
									"parameters": [
										{
											"id": 3151,
											"name": "forceDownload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Force downloading the software even if it already\nhas been downloaded."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.download",
										"id": 2341
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 205,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.download",
								"id": 2341
							}
						},
						{
							"id": 3181,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3182,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the event object for the specified type"
									},
									"typeParameter": [
										{
											"id": 3183,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 3184,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the event to emit\n"
											},
											"type": {
												"type": "unknown",
												"name": "M[K]"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								},
								{
									"id": 3185,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3186,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "O",
												"constraint": {
													"type": "reference",
													"name": "EventObject",
													"id": 219,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 38,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 39,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 40,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.emit",
								"id": 196
							}
						},
						{
							"id": 3152,
							"name": "getEnvironments",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3153,
									"name": "getEnvironments",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a list of environments available on the service.",
										"text": "This method should be overridden and use a specific implementation that\nreturns normalized environments from the service. E.g.\n\n```js\n{\n    browserName: 'firefox',\n    version: '12',\n    platform: 'windows',\n    descriptor: { <original returned environment> }\n}\n```\n",
										"returns": "An object containing the response and helper functions\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NormalizedEnvironment",
													"id": 2444
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.getEnvironments",
										"id": 2344
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 229,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.getEnvironments",
								"id": 2344
							}
						},
						{
							"id": 3187,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3188,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catch all handler for various call signatures. The signatures are defined in\n`BaseEventedEvents`.  You can add your own event type -> handler types by extending\n`BaseEventedEvents`.  See example for details."
									},
									"typeParameter": [
										{
											"id": 3189,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 3190,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "K",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "TunnelEvents"
													}
												}
											}
										},
										{
											"id": 3191,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"name": "TunnelEvents"
															}
														}
													},
													{
														"type": "unknown",
														"name": "M[K]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								},
								{
									"id": 3192,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3193,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3194,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "typeParameter",
														"name": "O",
														"constraint": {
															"type": "reference",
															"name": "EventObject",
															"id": 219,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "T"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 66,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 70,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 71,
									"character": 4
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.on",
								"id": 202
							}
						},
						{
							"id": 3195,
							"name": "own",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3196,
									"name": "own",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register handles for the instance that will be destroyed when\n`this.destroy` is called",
										"text": "Returns a handle for the handle, removes the handle for the instance and\ncalls destroy\n"
									},
									"parameters": [
										{
											"id": 3197,
											"name": "handles",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Handle",
														"id": 133
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Handle",
															"id": 133
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.own",
										"id": 210
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 94,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.own",
								"id": 210
							}
						},
						{
							"id": 3109,
							"name": "sendJobState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3110,
									"name": "sendJobState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3111,
											"name": "jobId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3112,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "JobState",
												"id": 2294
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Tunnel.sendJobState",
										"id": 2346
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 116,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Tunnel.sendJobState",
								"id": 2346
							}
						},
						{
							"id": 3154,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3155,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts the tunnel, automatically downloading dependencies if necessary.",
										"returns": "A promise that resolves once the tunnel has been established.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.start",
										"id": 2350
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 275,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.start",
								"id": 2350
							}
						},
						{
							"id": 3156,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3157,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stops the tunnel.",
										"returns": "A promise that resolves to the exit code for the tunnel once it\nhas been terminated.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Tunnel.stop",
										"id": 2352
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 332,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Tunnel.stop",
								"id": 2352
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3099
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3179,
								3136,
								3137,
								3134,
								3138,
								3135,
								3120,
								3122,
								3092,
								3119,
								3123,
								3093,
								3124,
								3180,
								3094,
								3125,
								3126,
								3127,
								3128,
								3129,
								3131,
								3130,
								3132,
								3095,
								3096,
								3097,
								3098,
								3121,
								3133
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								3102,
								3139,
								3141,
								3104,
								3143,
								3145,
								3147
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3158,
								3106,
								3163,
								3167,
								3116,
								3172,
								3113,
								3176,
								3198,
								3149,
								3181,
								3152,
								3187,
								3195,
								3109,
								3154,
								3156
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/TestingBotTunnel.ts",
							"line": 21,
							"character": 37
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Tunnel",
							"id": 2303
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						},
						{
							"type": "reference",
							"name": "TestingBotProperties",
							"id": 3200
						}
					]
				},
				{
					"id": 3200,
					"name": "TestingBotProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options specific to TestingBotTunnel"
					},
					"children": [
						{
							"id": 3209,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.accessKey|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 738,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.accessKey",
								"id": 2460
							}
						},
						{
							"id": 3207,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.architecture|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 732,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.architecture",
								"id": 2458
							}
						},
						{
							"id": 3208,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.auth|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 735,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.auth",
								"id": 2459
							}
						},
						{
							"id": 3220,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 699,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.directory",
								"id": 2441
							}
						},
						{
							"id": 3210,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.executable|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 741,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.executable",
								"id": 2461
							}
						},
						{
							"id": 3201,
							"name": "fastFailDomains",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[TestingBotTunnel.TestingBotTunnel.fastFailDomains|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 277,
									"character": 17
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 3211,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.hostname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 744,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.hostname",
								"id": 2462
							}
						},
						{
							"id": 3202,
							"name": "logFile",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[TestingBotTunnel.TestingBotTunnel.logFile|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 280,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 3212,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.pathname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 747,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.pathname",
								"id": 2463
							}
						},
						{
							"id": 3213,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.platform|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 750,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.platform",
								"id": 2464
							}
						},
						{
							"id": 3214,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.port|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 753,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.port",
								"id": 2465
							}
						},
						{
							"id": 3215,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.protocol|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 756,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.protocol",
								"id": 2466
							}
						},
						{
							"id": 3221,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 700,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.proxy",
								"id": 2442
							}
						},
						{
							"id": 3217,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelId|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 762,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.tunnelId",
								"id": 2468
							}
						},
						{
							"id": 3216,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelProxy|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 759,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.tunnelProxy",
								"id": 2467
							}
						},
						{
							"id": 3222,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 701,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.url",
								"id": 2443
							}
						},
						{
							"id": 3203,
							"name": "useCompression",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[TestingBotTunnel.TestingBotTunnel.useCompression|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 283,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3204,
							"name": "useJettyProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[TestingBotTunnel.TestingBotTunnel.useJettyProxy|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 286,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3205,
							"name": "useSquidProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[TestingBotTunnel.TestingBotTunnel.useSquidProxy|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 289,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3206,
							"name": "useSsl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[TestingBotTunnel.TestingBotTunnel.useSsl|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/TestingBotTunnel.ts",
									"line": 292,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3218,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.username|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 765,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.username",
								"id": 2469
							}
						},
						{
							"id": 3219,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.verbose|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 768,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelProperties.verbose",
								"id": 2470
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3209,
								3207,
								3208,
								3220,
								3210,
								3201,
								3211,
								3202,
								3212,
								3213,
								3214,
								3215,
								3221,
								3217,
								3216,
								3222,
								3203,
								3204,
								3205,
								3206,
								3218,
								3219
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/TestingBotTunnel.ts",
							"line": 275,
							"character": 37
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "TestingBotTunnel",
							"id": 3091
						}
					]
				},
				{
					"id": 3223,
					"name": "TestingBotOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/TestingBotTunnel.ts",
							"line": 295,
							"character": 29
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "TestingBotProperties",
								"id": 3200
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3091
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3200
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3223
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tunnels/TestingBotTunnel.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2302,
			"name": "\"tunnels/Tunnel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/tunnels/Tunnel.ts",
			"children": [
				{
					"id": 2303,
					"name": "Tunnel",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Tunnel is a mechanism for connecting to a WebDriver service provider that\nsecurely exposes local services for testing within the service provider’s\nnetwork."
					},
					"typeParameter": [
						{
							"id": 2383,
							"name": "O",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "EventObject",
								"id": 219,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 2326,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2327,
									"name": "new Tunnel",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2328,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "TunnelOptions",
												"id": 2475
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Tunnel",
										"id": 2303
									},
									"overwrites": {
										"type": "reference",
										"name": "Evented.__constructor",
										"id": 194
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 128,
									"character": 69
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Evented.__constructor",
								"id": 194
							}
						},
						{
							"id": 2384,
							"name": "__typeMap__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 20,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "M",
								"id": 189
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.__typeMap__",
								"id": 192
							}
						},
						{
							"id": 2323,
							"name": "_handle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 126,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2324,
							"name": "_process",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 127,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "ChildProcess"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2321,
							"name": "_startTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 124,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2325,
							"name": "_state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 128,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "stopped"
									},
									{
										"type": "stringLiteral",
										"value": "starting"
									},
									{
										"type": "stringLiteral",
										"value": "running"
									},
									{
										"type": "stringLiteral",
										"value": "stopping"
									}
								]
							}
						},
						{
							"id": 2322,
							"name": "_stopTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 125,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2305,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel access key. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 35,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.accessKey",
								"id": 2460
							}
						},
						{
							"id": 2307,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The architecture the tunnel will run against. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 47,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.architecture",
								"id": 2458
							}
						},
						{
							"id": 2308,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An HTTP authorization string to use when initiating connections to the\ntunnel. This value of this property is defined by Tunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 53,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.auth",
								"id": 2459
							}
						},
						{
							"id": 2309,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The directory where the tunnel software will be extracted. If the\ndirectory does not exist, it will be created. This value is set by the\ntunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 60,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.directory",
								"id": 2471
							}
						},
						{
							"id": 2304,
							"name": "environmentUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a service that provides a list of environments supported by\nthe tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 29,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2310,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The executable to spawn in order to create a tunnel. This value is set\nby the tunnel subclasses."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 66,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.executable",
								"id": 2461
							}
						},
						{
							"id": 2311,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The host on which a WebDriver client can access the service provided by\nthe tunnel. This may or may not be the host where the tunnel application\nis running."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 73,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.hostname",
								"id": 2462
							}
						},
						{
							"id": 2385,
							"name": "listenersMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {
								"shortText": "map of listeners keyed by event type"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 24,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										]
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "EventedCallback",
											"id": 223,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeParameter",
													"name": "O",
													"constraint": {
														"type": "reference",
														"name": "EventObject",
														"id": 219,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T"
															}
														]
													}
												}
											]
										}
									}
								]
							},
							"defaultValue": " new Map()",
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.listenersMap",
								"id": 193
							}
						},
						{
							"id": 2312,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The path that a WebDriver client should use to access the service\nprovided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 79,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.pathname",
								"id": 2463
							}
						},
						{
							"id": 2313,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operating system the tunnel will run on. This information is\nautomatically retrieved for the current system at runtime."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 85,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.platform",
								"id": 2464
							}
						},
						{
							"id": 2314,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The local port where the WebDriver server should be exposed by the\ntunnel. This is typed as a string for Url compatibility, but should be a\nnumber."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 92,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.port",
								"id": 2465
							}
						},
						{
							"id": 2315,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The protocol (e.g., 'http') that a WebDriver client should use to access\nthe service provided by the tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 98,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.protocol",
								"id": 2466
							}
						},
						{
							"id": 2316,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 104,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.proxy",
								"id": 2472
							}
						},
						{
							"id": 2318,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A unique identifier for the newly created tunnel."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 116,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.tunnelId",
								"id": 2468
							}
						},
						{
							"id": 2317,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of a proxy server for the tunnel to go through. Only the\nhostname, port, and auth are used.",
								"text": "This overrides the `proxy` configuration allowing independent\nconfiguration for the Tunnel binary process only.\n"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 113,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.tunnelProxy",
								"id": 2467
							}
						},
						{
							"id": 2319,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL where the tunnel software can be downloaded."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 119,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.url",
								"id": 2473
							}
						},
						{
							"id": 2306,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tunnel username. This will be initialized with a tunnel-specific\nenvironment variable if not specified."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 41,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.username",
								"id": 2469
							}
						},
						{
							"id": 2320,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to tell the tunnel to provide verbose logging output."
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 122,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"implementationOf": {
								"type": "reference",
								"name": "TunnelProperties.verbose",
								"id": 2470
							}
						},
						{
							"id": 2329,
							"name": "clientUrl",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
							},
							"getSignature": [
								{
									"id": 2330,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The URL that a WebDriver client should used to interact with this\nservice."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 152,
									"character": 15
								}
							]
						},
						{
							"id": 2331,
							"name": "extraCapabilities",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A map of additional capabilities that need to be sent to the provider\nwhen a new session is being created."
							},
							"getSignature": [
								{
									"id": 2332,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "A map of additional capabilities that need to be sent to the provider\nwhen a new session is being created."
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 160,
									"character": 23
								}
							]
						},
						{
							"id": 2333,
							"name": "isDownloaded",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel software has already been downloaded."
							},
							"getSignature": [
								{
									"id": 2334,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel software has already been downloaded."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 167,
									"character": 18
								}
							]
						},
						{
							"id": 2335,
							"name": "isRunning",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently running."
							},
							"getSignature": [
								{
									"id": 2336,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently running."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 174,
									"character": 15
								}
							]
						},
						{
							"id": 2337,
							"name": "isStarting",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently starting up."
							},
							"getSignature": [
								{
									"id": 2338,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently starting up."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 181,
									"character": 16
								}
							]
						},
						{
							"id": 2339,
							"name": "isStopping",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the tunnel is currently stopping."
							},
							"getSignature": [
								{
									"id": 2340,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Whether or not the tunnel is currently stopping."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 188,
									"character": 16
								}
							]
						},
						{
							"id": 2354,
							"name": "_downloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2355,
									"name": "_downloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2356,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 2357,
											"name": "proxy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 2358,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 371,
									"character": 25
								}
							]
						},
						{
							"id": 2359,
							"name": "_makeArgs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2360,
									"name": "_makeArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the list of command-line arguments to be passed to the spawned\ntunnel. Implementations should override this method to provide the\nappropriate command-line arguments.",
										"text": "Arguments passed to [[Tunnel._makeChild]] will be passed as-is to this\nmethod.\n",
										"returns": "A list of command-line arguments.\n"
									},
									"parameters": [
										{
											"id": 2361,
											"name": "_values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 429,
									"character": 21
								}
							]
						},
						{
							"id": 2362,
							"name": "_makeChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2363,
									"name": "_makeChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a newly spawned child process for the tunnel software.\nImplementations should call this method to create the tunnel process.",
										"text": "Arguments passed to this method will be passed as-is to\n[[Tunnel._makeArgs]] and [[Tunnel._makeOptions]].\n",
										"returns": "An object containing a newly spawned Process and a Deferred that\nwill be resolved once the tunnel has started successfully.\n"
									},
									"parameters": [
										{
											"id": 2364,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										},
										{
											"id": 2365,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 443,
									"character": 22
								}
							]
						},
						{
							"id": 2366,
							"name": "_makeOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2367,
									"name": "_makeOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates the set of options to use when spawning the tunnel process.\nImplementations should override this method to provide the appropriate\noptions for the tunnel software.",
										"text": "Arguments passed to [[Tunnel._makeChild]] will be passed as-is to this\nmethod.\n",
										"returns": "A set of options matching those provided to Node.js\n`child_process.spawn`.\n"
									},
									"parameters": [
										{
											"id": 2368,
											"name": "_values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2369,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2370,
													"name": "env",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/tunnels/Tunnel.ts",
															"line": 544,
															"character": 16
														}
													],
													"type": {
														"type": "reference",
														"name": "ProcessEnv"
													},
													"defaultValue": " process.env"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														2370
													]
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 543,
									"character": 24
								}
							]
						},
						{
							"id": 2371,
							"name": "_normalizeEnvironment",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2372,
									"name": "_normalizeEnvironment",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Normalizes a specific Tunnel environment descriptor to a general form. To\nbe overriden by a child implementation.",
										"returns": "a normalized environment\n"
									},
									"parameters": [
										{
											"id": 2373,
											"name": "environment",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an environment descriptor specific to the Tunnel"
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "NormalizedEnvironment",
										"id": 2444
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 554,
									"character": 33
								}
							]
						},
						{
							"id": 2374,
							"name": "_postDownloadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2375,
									"name": "_postDownloadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called with the response after a file download has completed"
									},
									"parameters": [
										{
											"id": 2376,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Buffer"
											}
										},
										{
											"id": 2377,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DownloadOptions",
												"id": 2474
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 561,
									"character": 29
								}
							]
						},
						{
							"id": 2378,
							"name": "_start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2379,
									"name": "_start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This method provides the implementation that actually starts the tunnel\nand any other logic for emitting events on the Tunnel based on data\npassed by the tunnel software.",
										"text": "The default implementation that assumes the tunnel is ready for use once\nthe child process has written to `stdout` or `stderr`. This method should\nbe reimplemented by other tunnel launchers to implement correct launch\ndetection logic.\n",
										"returns": "An object containing a reference to the child process, and a\nDeferred that is resolved once the tunnel is ready for use. Normally this\nwill be the object returned from a call to [[Tunnel._makeChild]].\n"
									},
									"parameters": [
										{
											"id": 2380,
											"name": "executor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ChildExecutor",
												"id": 2430
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 590,
									"character": 18
								}
							]
						},
						{
							"id": 2381,
							"name": "_stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2382,
									"name": "_stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This method provides the implementation that actually stops the tunnel.",
										"text": "The default implementation that assumes the tunnel has been closed once\nthe child process has exited. This method should be reimplemented by\nother tunnel launchers to implement correct shutdown logic, if necessary.\n",
										"returns": "A promise that resolves once the tunnel has shut down.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 619,
									"character": 17
								}
							]
						},
						{
							"id": 2403,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2404,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Destrpys all handers registered for the instance",
										"text": "Returns a promise that resolves once all handles have been destroyed\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.destroy",
										"id": 213
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 113,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.destroy",
								"id": 213
							}
						},
						{
							"id": 2341,
							"name": "download",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2342,
									"name": "download",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Downloads and extracts the tunnel software if it is not already\ndownloaded.",
										"text": "This method can be extended by implementations to perform any necessary\npost-processing, such as setting appropriate file permissions on the\ndownloaded executable.\n",
										"returns": "A promise that resolves once the download and extraction process\nhas completed.\n"
									},
									"parameters": [
										{
											"id": 2343,
											"name": "forceDownload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Force downloading the software even if it already\nhas been downloaded."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 205,
									"character": 10
								}
							]
						},
						{
							"id": 2386,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2387,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the event object for the specified type"
									},
									"typeParameter": [
										{
											"id": 2388,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 2389,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the event to emit\n"
											},
											"type": {
												"type": "unknown",
												"name": "M[K]"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								},
								{
									"id": 2390,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2391,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "O",
												"constraint": {
													"type": "reference",
													"name": "EventObject",
													"id": 219,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.emit",
										"id": 196
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 38,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 39,
									"character": 6
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 40,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.emit",
								"id": 196
							}
						},
						{
							"id": 2344,
							"name": "getEnvironments",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2345,
									"name": "getEnvironments",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a list of environments available on the service.",
										"text": "This method should be overridden and use a specific implementation that\nreturns normalized environments from the service. E.g.\n\n```js\n{\n    browserName: 'firefox',\n    version: '12',\n    platform: 'windows',\n    descriptor: { <original returned environment> }\n}\n```\n",
										"returns": "An object containing the response and helper functions\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NormalizedEnvironment",
													"id": 2444
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 229,
									"character": 17
								}
							]
						},
						{
							"id": 2392,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2393,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catch all handler for various call signatures. The signatures are defined in\n`BaseEventedEvents`.  You can add your own event type -> handler types by extending\n`BaseEventedEvents`.  See example for details."
									},
									"typeParameter": [
										{
											"id": 2394,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "TunnelEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 2395,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "K",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"name": "TunnelEvents"
													}
												}
											}
										},
										{
											"id": 2396,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"name": "TunnelEvents"
															}
														}
													},
													{
														"type": "unknown",
														"name": "M[K]"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								},
								{
									"id": 2397,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2398,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2399,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventedCallbackOrArray",
												"id": 229,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "typeParameter",
														"name": "O",
														"constraint": {
															"type": "reference",
															"name": "EventObject",
															"id": 219,
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "T"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.on",
										"id": 202
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 66,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 70,
									"character": 4
								},
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 71,
									"character": 4
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.on",
								"id": 202
							}
						},
						{
							"id": 2400,
							"name": "own",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2401,
									"name": "own",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register handles for the instance that will be destroyed when\n`this.destroy` is called",
										"text": "Returns a handle for the handle, removes the handle for the instance and\ncalls destroy\n"
									},
									"parameters": [
										{
											"id": 2402,
											"name": "handles",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Handle",
														"id": 133
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Handle",
															"id": 133
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Evented.own",
										"id": 210
									}
								}
							],
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 94,
									"character": 5
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Evented.own",
								"id": 210
							}
						},
						{
							"id": 2346,
							"name": "sendJobState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2347,
									"name": "sendJobState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends information about a job to the tunnel provider.",
										"returns": "A promise that resolves once the job state request is complete.\n"
									},
									"parameters": [
										{
											"id": 2348,
											"name": "_jobId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2349,
											"name": "_data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "JobState",
												"id": 2294
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 266,
									"character": 14
								}
							]
						},
						{
							"id": 2350,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2351,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts the tunnel, automatically downloading dependencies if necessary.",
										"returns": "A promise that resolves once the tunnel has been established.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 275,
									"character": 7
								}
							]
						},
						{
							"id": 2352,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2353,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stops the tunnel.",
										"returns": "A promise that resolves to the exit code for the tunnel once it\nhas been terminated.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 332,
									"character": 6
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2326
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2384,
								2323,
								2324,
								2321,
								2325,
								2322,
								2305,
								2307,
								2308,
								2309,
								2304,
								2310,
								2311,
								2385,
								2312,
								2313,
								2314,
								2315,
								2316,
								2318,
								2317,
								2319,
								2306,
								2320
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2329,
								2331,
								2333,
								2335,
								2337,
								2339
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2354,
								2359,
								2362,
								2366,
								2371,
								2374,
								2378,
								2381,
								2403,
								2341,
								2386,
								2344,
								2392,
								2400,
								2346,
								2350,
								2352
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 23,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Evented",
							"id": 188,
							"typeArguments": [
								{
									"type": "reference",
									"name": "TunnelEvents",
									"id": 2409
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "SeleniumTunnel",
							"id": 2482
						},
						{
							"type": "reference",
							"name": "BrowserStackTunnel",
							"id": 2794
						},
						{
							"type": "reference",
							"name": "SauceLabsTunnel",
							"id": 2929
						},
						{
							"type": "reference",
							"name": "TestingBotTunnel",
							"id": 3091
						},
						{
							"type": "reference",
							"name": "CrossBrowserTestingTunnel",
							"id": 3225
						},
						{
							"type": "reference",
							"name": "NullTunnel",
							"id": 3353
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						}
					]
				},
				{
					"id": 2430,
					"name": "ChildExecutor",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A handle to a child process, along with resolve and reject callbacks that can\nbe used to settle an associated Promise."
					},
					"signatures": [
						{
							"id": 2431,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A handle to a child process, along with resolve and reject callbacks that can\nbe used to settle an associated Promise."
							},
							"parameters": [
								{
									"id": 2432,
									"name": "child",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ChildProcess"
									}
								},
								{
									"id": 2433,
									"name": "resolve",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2434,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2435,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/tunnels/Tunnel.ts",
													"line": 692,
													"character": 12
												}
											]
										}
									}
								},
								{
									"id": 2436,
									"name": "reject",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2437,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2438,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2439,
															"name": "reason",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/tunnels/Tunnel.ts",
													"line": 693,
													"character": 11
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Handle",
										"id": 133
									},
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 689,
							"character": 30
						}
					]
				},
				{
					"id": 2424,
					"name": "DownloadProgressEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An event indicating that part of a tunnel binary has been downloaded from the\nserver."
					},
					"children": [
						{
							"id": 2428,
							"name": "received",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of bytes received so far"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 682,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2429,
							"name": "target",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 641,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Tunnel",
								"id": 2303
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelEventObject.target",
								"id": 2407
							}
						},
						{
							"id": 2427,
							"name": "total",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total number of bytes being downloaded"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 680,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2425,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The event type"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 676,
									"character": 15
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "downloadprogress"
							},
							"overwrites": {
								"type": "reference",
								"name": "EventObject.type",
								"id": 221
							}
						},
						{
							"id": 2426,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL being downloaded from"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 678,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2428,
								2429,
								2427,
								2425,
								2426
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 674,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TunnelEventObject",
							"id": 2405,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Tunnel",
									"id": 2303
								}
							]
						}
					]
				},
				{
					"id": 2440,
					"name": "DownloadProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options for file downloads"
					},
					"children": [
						{
							"id": 2441,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 699,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2442,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 700,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2443,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 701,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2441,
								2442,
								2443
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 698,
							"character": 35
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "TunnelProperties",
							"id": 2457
						}
					]
				},
				{
					"id": 2416,
					"name": "IOEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A chunk of raw string data output by the tunnel software to stdout or stderr."
					},
					"children": [
						{
							"id": 2418,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 658,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2419,
							"name": "target",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 641,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Tunnel",
								"id": 2303
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelEventObject.target",
								"id": 2407
							}
						},
						{
							"id": 2417,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 657,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "stdout"
									},
									{
										"type": "stringLiteral",
										"value": "stderr"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "EventObject.type",
								"id": 221
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2418,
								2419,
								2417
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 656,
							"character": 24
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TunnelEventObject",
							"id": 2405,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Tunnel",
									"id": 2303
								}
							]
						}
					]
				},
				{
					"id": 2444,
					"name": "NormalizedEnvironment",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A normalized environment descriptor.",
						"text": "A NormalizedEnvironment contains a mix of W3C WebDriver and JSONWireProtocol\ncapabilities, as well as a set of standardized capabilities that can be used\nto specify the given environment in an Intern `environments` descriptor.\n"
					},
					"children": [
						{
							"id": 2445,
							"name": "browserName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 714,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2446,
							"name": "browserVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 715,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 2447,
							"name": "descriptor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 716,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Object"
							}
						},
						{
							"id": 2452,
							"name": "intern",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 722,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2453,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 2455,
											"name": "browserName",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/tunnels/Tunnel.ts",
													"line": 724,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2454,
											"name": "platform",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/tunnels/Tunnel.ts",
													"line": 723,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2456,
											"name": "version",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/tunnels/Tunnel.ts",
													"line": 725,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												2455,
												2454,
												2456
											]
										}
									],
									"sources": [
										{
											"fileName": "src/tunnels/Tunnel.ts",
											"line": 722,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 2448,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 717,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2449,
							"name": "platformName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 718,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 2450,
							"name": "platformVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 719,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 2451,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 720,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2445,
								2446,
								2447,
								2452,
								2448,
								2449,
								2450,
								2451
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 713,
							"character": 38
						}
					]
				},
				{
					"id": 2420,
					"name": "StatusEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An event containing information about the status of the tunnel setup process\nthat is suitable for presentation to end-users."
					},
					"children": [
						{
							"id": 2422,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 667,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2423,
							"name": "target",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 641,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Tunnel",
								"id": 2303
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TunnelEventObject.target",
								"id": 2407
							}
						},
						{
							"id": 2421,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 666,
									"character": 15
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "status"
							},
							"overwrites": {
								"type": "reference",
								"name": "EventObject.type",
								"id": 221
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2422,
								2423,
								2421
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 665,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "TunnelEventObject",
							"id": 2405,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Tunnel",
									"id": 2303
								}
							]
						}
					]
				},
				{
					"id": 2405,
					"name": "TunnelEventObject",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 2406,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 2407,
							"name": "target",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 641,
									"character": 17
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						},
						{
							"id": 2408,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The type of the event"
							},
							"sources": [
								{
									"fileName": "src/common/lib/Evented.ts",
									"line": 171,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "EventObject.type",
								"id": 221
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2407,
								2408
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 640,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "EventObject",
							"id": 219,
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "string"
								}
							]
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "IOEvent",
							"id": 2416
						},
						{
							"type": "reference",
							"name": "StatusEvent",
							"id": 2420
						},
						{
							"type": "reference",
							"name": "DownloadProgressEvent",
							"id": 2424
						}
					]
				},
				{
					"id": 2409,
					"name": "TunnelEvents",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 2414,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 2415,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 2413,
							"name": "downloadprogress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 648,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "DownloadProgressEvent",
								"id": 2424
							}
						},
						{
							"id": 2412,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 647,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "StatusEvent",
								"id": 2420
							}
						},
						{
							"id": 2411,
							"name": "stderr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 646,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "IOEvent",
								"id": 2416
							}
						},
						{
							"id": 2410,
							"name": "stdout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 645,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "IOEvent",
								"id": 2416
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2413,
								2412,
								2411,
								2410
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 644,
							"character": 29
						}
					]
				},
				{
					"id": 2457,
					"name": "TunnelProperties",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Properties of a tunnel"
					},
					"children": [
						{
							"id": 2460,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.accessKey|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 738,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2458,
							"name": "architecture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.architecture|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 732,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2459,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.auth|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 735,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2471,
							"name": "directory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 699,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.directory",
								"id": 2441
							}
						},
						{
							"id": 2461,
							"name": "executable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.executable|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 741,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2462,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.hostname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 744,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2463,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.pathname|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 747,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2464,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.platform|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 750,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2465,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.port|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 753,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2466,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.protocol|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 756,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2472,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 700,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.proxy",
								"id": 2442
							}
						},
						{
							"id": 2468,
							"name": "tunnelId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelId|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 762,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2467,
							"name": "tunnelProxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.tunnelProxy|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 759,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2473,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 701,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "DownloadProperties.url",
								"id": 2443
							}
						},
						{
							"id": 2469,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.username|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 765,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						},
						{
							"id": 2470,
							"name": "verbose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "[[Tunnel.Tunnel.verbose|More info]]"
							},
							"sources": [
								{
									"fileName": "src/tunnels/Tunnel.ts",
									"line": 768,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2460,
								2458,
								2459,
								2471,
								2461,
								2462,
								2463,
								2464,
								2465,
								2466,
								2472,
								2468,
								2467,
								2473,
								2469,
								2470
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 730,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "DownloadProperties",
							"id": 2440
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "SeleniumProperties",
							"id": 2604
						},
						{
							"type": "reference",
							"name": "BrowserStackProperties",
							"id": 2904
						},
						{
							"type": "reference",
							"name": "SauceLabsProperties",
							"id": 3056
						},
						{
							"type": "reference",
							"name": "TestingBotProperties",
							"id": 3200
						},
						{
							"type": "reference",
							"name": "CrossBrowserTestingProperties",
							"id": 3332
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"name": "BrowserStackTunnel",
							"id": 2794
						},
						{
							"type": "reference",
							"name": "CrossBrowserTestingTunnel",
							"id": 3225
						},
						{
							"type": "reference",
							"name": "NullTunnel",
							"id": 3353
						},
						{
							"type": "reference",
							"name": "SauceLabsTunnel",
							"id": 2929
						},
						{
							"type": "reference",
							"name": "SeleniumTunnel",
							"id": 2482
						},
						{
							"type": "reference",
							"name": "TestingBotTunnel",
							"id": 3091
						},
						{
							"type": "reference",
							"name": "Tunnel",
							"id": 2303
						}
					]
				},
				{
					"id": 2474,
					"name": "DownloadOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 704,
							"character": 27
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "DownloadProperties",
								"id": 2440
							}
						]
					}
				},
				{
					"id": 2475,
					"name": "TunnelOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 771,
							"character": 25
						}
					],
					"type": {
						"type": "reference",
						"name": "Partial",
						"typeArguments": [
							{
								"type": "reference",
								"name": "TunnelProperties",
								"id": 2457
							}
						]
					}
				},
				{
					"id": 2476,
					"name": "proxyIOEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 2477,
							"name": "proxyIOEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2478,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Tunnel",
										"id": 2303
									}
								},
								{
									"id": 2479,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "stdout"
											},
											{
												"type": "stringLiteral",
												"value": "stderr"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/Tunnel.ts",
							"line": 773,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2303
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2430,
						2424,
						2440,
						2416,
						2444,
						2420,
						2405,
						2409,
						2457
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						2474,
						2475
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2476
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tunnels/Tunnel.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7905,
			"name": "\"tunnels/bin/digdugEnvironments\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/tunnels/bin/digdugEnvironments.ts",
			"children": [
				{
					"id": 7909,
					"name": "TunnelCtor",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/bin/digdugEnvironments.ts",
							"line": 41,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "Tunnel",
						"id": 2303
					},
					"defaultValue": " require('../' + tunnelName).default"
				},
				{
					"id": 7906,
					"name": "digdugPath",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/bin/digdugEnvironments.ts",
							"line": 8,
							"character": 16
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " path.dirname(__dirname)"
				},
				{
					"id": 7910,
					"name": "tunnel",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/bin/digdugEnvironments.ts",
							"line": 42,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Tunnel",
						"id": 2303
					},
					"defaultValue": " new TunnelCtor()"
				},
				{
					"id": 7908,
					"name": "tunnelName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/bin/digdugEnvironments.ts",
							"line": 34,
							"character": 16
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": " process.argv[2]"
				},
				{
					"id": 7907,
					"name": "tunnels",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/tunnels/bin/digdugEnvironments.ts",
							"line": 10,
							"character": 13
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " fs\n  .readdirSync(digdugPath)\n  .filter(function(name) {\n    return (\n      /[A-Z]\\w+Tunnel\\.js$/.test(name) &&\n      name !== 'NullTunnel.js' &&\n      name !== 'Tunnel.js' &&\n      name !== 'SeleniumTunnel.js'\n    );\n  })\n  .map(function(name) {\n    return name.slice(0, name.length - 3);\n  })"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						7909,
						7906,
						7910,
						7908,
						7907
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tunnels/bin/digdugEnvironments.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2293,
			"name": "\"tunnels/interfaces\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/tunnels/interfaces.ts",
			"children": [
				{
					"id": 2294,
					"name": "JobState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2295,
							"name": "buildId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The build number of the software being tested by the job. Supported by\nSauce Labs."
							},
							"sources": [
								{
									"fileName": "src/tunnels/interfaces.ts",
									"line": 8,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 2296,
							"name": "extra",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Additional arbitrary data to be stored alongside the job. Supported by\nTestingBot and Sauce Labs."
							},
							"sources": [
								{
									"fileName": "src/tunnels/interfaces.ts",
									"line": 14,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "__type"
									}
								]
							}
						},
						{
							"id": 2297,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A descriptive name for the job. Supported by TestingBot and Sauce Labs."
							},
							"sources": [
								{
									"fileName": "src/tunnels/interfaces.ts",
									"line": 19,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 2298,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A status message to provide alongside a test. Supported by TestingBot."
							},
							"sources": [
								{
									"fileName": "src/tunnels/interfaces.ts",
									"line": 24,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 2299,
							"name": "success",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not the job should be listed as successful. Supported by\nBrowserStack, TestingBot, and Sauce Labs."
							},
							"sources": [
								{
									"fileName": "src/tunnels/interfaces.ts",
									"line": 30,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2300,
							"name": "tags",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An array of tags for the job. Supported by TestingBot and Sauce Labs."
							},
							"sources": [
								{
									"fileName": "src/tunnels/interfaces.ts",
									"line": 35,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 2301,
							"name": "visibility",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The public visibility of test results. May be one of 'public', 'public\nrestricted', 'share', 'team', or 'private'. Supported by Sauce Labs."
							},
							"sources": [
								{
									"fileName": "src/tunnels/interfaces.ts",
									"line": 41,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2295,
								2296,
								2297,
								2298,
								2299,
								2300,
								2301
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/interfaces.ts",
							"line": 3,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2294
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tunnels/interfaces.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2268,
			"name": "\"tunnels/lib/util\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/tunnels/lib/util.ts",
			"children": [
				{
					"id": 2277,
					"name": "fileExists",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2278,
							"name": "fileExists",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns true if a file or directory exists",
								"returns": "true if filename exists, false otherwise\n"
							},
							"parameters": [
								{
									"id": 2279,
									"name": "filename",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/lib/util.ts",
							"line": 31,
							"character": 26
						}
					]
				},
				{
					"id": 2290,
					"name": "getChildProcesses",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 2291,
							"name": "getChildProcesses",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the children of a process"
							},
							"parameters": [
								{
									"id": 2292,
									"name": "pid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/lib/util.ts",
							"line": 127,
							"character": 26
						}
					]
				},
				{
					"id": 2280,
					"name": "kill",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2281,
							"name": "kill",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Kill a process and its immediate children",
								"text": "This function will attempt to kill all processes that it should, and will\nreport an error at the end if any process could not be killed.\n"
							},
							"parameters": [
								{
									"id": 2282,
									"name": "pid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/lib/util.ts",
							"line": 46,
							"character": 20
						}
					]
				},
				{
					"id": 2283,
					"name": "killProcess",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 2284,
							"name": "killProcess",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 2285,
									"name": "pid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/lib/util.ts",
							"line": 70,
							"character": 20
						}
					]
				},
				{
					"id": 2269,
					"name": "on",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2270,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attaches an event to a Node.js EventEmitter and returns a handle for removing\nthe listener later.",
								"returns": "A remove handle.\n"
							},
							"parameters": [
								{
									"id": 2271,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A Node.js EventEmitter object."
									},
									"type": {
										"type": "reference",
										"name": "EventEmitter"
									}
								},
								{
									"id": 2272,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The name of the event to listen for."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 2273,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The event listener that will be invoked when the event\noccurs."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2274,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 2275,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 2276,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/tunnels/lib/util.ts",
													"line": 19,
													"character": 11
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Handle",
								"id": 133
							}
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/lib/util.ts",
							"line": 16,
							"character": 18
						}
					]
				},
				{
					"id": 2286,
					"name": "writeFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 2287,
							"name": "writeFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Writes data to a file.",
								"text": "The file's parent directories will be created if they do not already exist.\n",
								"returns": "A Promise that resolves when the file has been written\n"
							},
							"parameters": [
								{
									"id": 2288,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 2289,
									"name": "filename",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/tunnels/lib/util.ts",
							"line": 91,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2277,
						2290,
						2280,
						2283,
						2269,
						2286
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tunnels/lib/util.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2480,
			"name": "\"tunnels/webdrivers\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true,
				"isExternal": true
			},
			"originalName": "src/tunnels/webdrivers.json",
			"sources": [
				{
					"fileName": "src/tunnels/webdrivers.json",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1590,
			"name": "\"webdriver/Command\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/Command.ts",
			"children": [
				{
					"id": 1591,
					"name": "Command",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Command class is a chainable, subclassable object type that can be used\nto execute commands serially against a remote WebDriver environment. The\nstandard Command class includes methods from the [[Session]] and [[Element]]\nclasses, so you can perform all standard session and element operations that\ncome with Leadfoot without being forced to author long promise chains.",
						"text": "In order to use the Command class, you first need to pass it a [[Session]]\ninstance for it to use:\n\n```js\nconst command = new Command(session);\n```\n\nOnce you have created the Command, you can then start chaining methods, and\nthey will execute in order one after another:\n\n```js\ncommand.get('http://example.com')\n    .findByTagName('h1')\n    .getVisibleText()\n    .then(function (text) {\n        assert.strictEqual(text, 'Example Domain');\n    });\n```\n\nBecause these operations are asynchronous, you need to use a `then` callback\nin order to retrieve the value from the last method. Command objects are\nPromiseLikes, which means that they can be used with any Promises/A+ or\nES6-conformant Promises implementation, though there are some specific\ndifferences in the arguments and context that are provided to callbacks; see\n[[Command.Command.then]] for more details.\n\nBecause Commands are promise-like, they may also be used with `async/await`:\n\n```js\nconst page = await command.get('http://example.com');\nconst h1 = await page.findByTagName('h1');\nconst text = await h1.getVisibleText();\nassert.strictEqual(text, 'Example Domain');\n```\n\n---\n\nEach call on a Command generates a new Command object, which means that\ncertain operations can be parallelised:\n\n```js\ncommand = command.get('http://example.com');\nPromise.all([\n    command.getPageTitle(),\n    command.findByTagName('h1').getVisibleText()\n]).then(results => {\n    assert.strictEqual(results[0], results[1]);\n});\n```\n\nIn this example, the commands on line 3 and 4 both depend upon the `get`\ncall completing successfully but are otherwise independent of each other and\nso execute here in parallel. This is different from commands in Intern 1\nwhich were always chained onto the last called method within a given test.\n\n---\n\nCommand objects actually encapsulate two different types of interaction:\n*session* interactions, which operate against the entire browser session,\nand *element* interactions, which operate against specific elements taken\nfrom the currently loaded page. Things like navigating the browser, moving\nthe mouse cursor, and executing scripts are session interactions; things\nlike getting text displayed on the page, typing into form fields, and\ngetting element attributes are element interactions.\n\nSession interactions can be performed at any time, from any Command. On the\nother hand, to perform element interactions, you first need to retrieve one\nor more elements to interact with. This can be done using any of the `find`\nor `findAll` methods, by the `getActiveElement` method, or by returning\nelements from `execute` or `executeAsync` calls. The retrieved elements are\nstored internally as the *element context* of all chained Commands. When an\nelement method is called on a chained Command with a single element context,\nthe result will be returned as-is:\n\n```js\ncommand = command.get('http://example.com')\n    // finds one element -> single element context\n    .findByTagName('h1')\n    .getVisibleText()\n    .then(text => {\n        // `text` is the text from the element context\n        assert.strictEqual(text, 'Example Domain');\n    });\n```\n\nWhen an element method is called on a chained Command with a multiple\nelement context, the result will be returned as an array:\n\n```js\ncommand = command.get('http://example.com')\n    // finds multiple elements -> multiple element context\n    .findAllByTagName('p')\n    .getVisibleText()\n    .then(texts => {\n        // `texts` is an array of text from each of the `p` elements\n        assert.deepEqual(texts, [\n            'This domain is established to be used for […]',\n            'More information...'\n        ]);\n    });\n```\n\nThe `find` and `findAll` methods are special and change their behaviour\nbased on the current element filtering state of a given command. If a\ncommand has been filtered by element, the `find` and `findAll` commands will\nonly find elements *within* the currently filtered set of elements.\nOtherwise, they will find elements throughout the page.\n\nSome method names, like `click`, are identical for both Session and Element\nAPIs; in this case, the element APIs are suffixed with the word `Element` in\norder to identify them uniquely.\n\n---\n\nCommands can be subclassed in order to add additional functionality without\nmaking direct modifications to the default Command prototype that might\nbreak other parts of the system:\n\n```ts\nclass CustomCommand extends Command {\n    login(username: string, password: string) {\n        return new this.constructor(this, function () {\n            return this.parent\n                .findById('username')\n                .click()\n                .type(username)\n                .end()\n\n                .findById('password')\n                .click()\n                .type(password)\n                .end()\n\n                .findById('login')\n                .click()\n                .end();\n        });\n    }\n}\n```\n\n>  ⚠️Note that returning `this`, or a command chain starting from `this`,\nfrom a callback or command initialiser will deadlock the Command, as it\nwaits for itself to settle before settling.\n"
					},
					"typeParameter": [
						{
							"id": 1592,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1593,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1594,
							"name": "StringResult",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"children": [
						{
							"id": 1610,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 1611,
									"name": "new Command",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 1612,
											"name": "parentOrSession",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Session",
														"id": 950
													},
													{
														"type": "reference",
														"name": "Command",
														"id": 1591,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "P"
															},
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "typeParameter",
																"name": "StringResult",
																"constraint": {
																	"type": "union",
																	"types": [
																		{
																			"type": "intrinsic",
																			"name": "string"
																		},
																		{
																			"type": "array",
																			"elementType": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	]
																}
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 1613,
											"name": "initialiser",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A function that will be executed when all parent\ncommands have completed execution. This function can create a new\ncontext for this command by calling the passed `setContext` function any\ntime prior to resolving the Promise that it returns. If no context is\nexplicitly provided, the context from the parent command will be used.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1614,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 1615,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1616,
																			"name": "this",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Command",
																				"id": 1591,
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "T"
																					},
																					{
																						"type": "typeParameter",
																						"name": "P"
																					},
																					{
																						"type": "typeParameter",
																						"name": "StringResult",
																						"constraint": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "array",
																									"elementType": {
																										"type": "intrinsic",
																										"name": "string"
																									}
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		{
																			"id": 1617,
																			"name": "setContext",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "SetContextMethod",
																				"id": 2030
																			}
																		},
																		{
																			"id": 1618,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "typeParameter",
																				"name": "T"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "T"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "T"
																					}
																				]
																			}
																		]
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 1619,
											"name": "errback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A function that will be executed if any parent commands\nfailed to complete successfully. This function can create a new context\nfor the current command by calling the passed `setContext` function any\ntime prior to resolving the Promise that it returns. If no context is\nexplicitly provided, the context from the parent command will be used.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1620,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 1621,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1622,
																			"name": "this",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Command",
																				"id": 1591,
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "T"
																					},
																					{
																						"type": "typeParameter",
																						"name": "P"
																					},
																					{
																						"type": "typeParameter",
																						"name": "StringResult",
																						"constraint": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "array",
																									"elementType": {
																										"type": "intrinsic",
																										"name": "string"
																									}
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		{
																			"id": 1623,
																			"name": "setContext",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "SetContextMethod",
																				"id": 2030
																			}
																		},
																		{
																			"id": 1624,
																			"name": "error",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "T"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "T"
																					}
																				]
																			}
																		]
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 333,
									"character": 41
								}
							]
						},
						{
							"id": 1629,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The filtered elements that will be used if an element-specific method is\ninvoked. Note that this property is not valid until the parent Command\nhas been settled. The context array also has two additional properties:",
								"text": "* `isSingle` (boolean): If true, the context will always contain a\n  single element. This is used to differentiate between methods that\n  should still return scalar values (`find`) and methods that should\n  return arrays of values even if there is only one element in the\n  context (`findAll`).\n* `depth` (number): The depth of the context within the command chain.\n  This is used to prevent traversal into higher filtering levels by\n  [[Command.Command.end]].\n"
							},
							"getSignature": [
								{
									"id": 1630,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The filtered elements that will be used if an element-specific method is\ninvoked. Note that this property is not valid until the parent Command\nhas been settled. The context array also has two additional properties:",
										"text": "* `isSingle` (boolean): If true, the context will always contain a\n  single element. This is used to differentiate between methods that\n  should still return scalar values (`find`) and methods that should\n  return arrays of values even if there is only one element in the\n  context (`findAll`).\n* `depth` (number): The depth of the context within the command chain.\n  This is used to prevent traversal into higher filtering levels by\n  [[Command.Command.end]].\n"
									},
									"type": {
										"type": "reference",
										"name": "Context",
										"id": 2033
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 483,
									"character": 13
								}
							]
						},
						{
							"id": 1625,
							"name": "parent",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The parent Command of the Command, if one exists. This will be defined\nfor all commands but the top-level Session command (i.e., in most\ncontexts user code will call it)."
							},
							"getSignature": [
								{
									"id": 1626,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The parent Command of the Command, if one exists. This will be defined\nfor all commands but the top-level Session command (i.e., in most\ncontexts user code will call it)."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 458,
									"character": 12
								}
							]
						},
						{
							"id": 1631,
							"name": "promise",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The underlying Promise for the Command.",
								"tags": [
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"getSignature": [
								{
									"id": 1632,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The underlying Promise for the Command.",
										"tags": [
											{
												"tag": "readonly",
												"text": "\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 492,
									"character": 13
								}
							]
						},
						{
							"id": 1627,
							"name": "session",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The parent Session of the Command."
							},
							"getSignature": [
								{
									"id": 1628,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The parent Session of the Command."
									},
									"type": {
										"type": "reference",
										"name": "Session",
										"id": 950
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 465,
									"character": 13
								}
							]
						},
						{
							"id": 1796,
							"name": "acceptAlert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1797,
									"name": "acceptAlert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Accepts an alert, prompt, or confirmation pop-up. Equivalent to clicking\nthe 'OK' button."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1294,
									"character": 13
								}
							]
						},
						{
							"id": 1723,
							"name": "activateIme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1724,
									"name": "activateIme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Activates an input method editor in the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"parameters": [
										{
											"id": 1725,
											"name": "engine",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of IME to activate.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1044,
									"character": 13
								}
							]
						},
						{
							"id": 1667,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1668,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancels all outstanding chained operations of the Command. Calling this\nmethod will cause this command and all subsequent chained commands to\nfail with a CancelError."
									},
									"type": {
										"type": "unknown",
										"name": "this"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 707,
									"character": 8
								}
							]
						},
						{
							"id": 1654,
							"name": "catch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1655,
									"name": "catch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a callback to be invoked when any of the previously chained\noperations have failed."
									},
									"typeParameter": [
										{
											"id": 1656,
											"name": "R",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1657,
											"name": "errback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1658,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1659,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1660,
																	"name": "this",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Command",
																		"id": 1591,
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "T"
																			},
																			{
																				"type": "typeParameter",
																				"name": "P"
																			},
																			{
																				"type": "typeParameter",
																				"name": "StringResult",
																				"constraint": {
																					"type": "union",
																					"types": [
																						{
																							"type": "intrinsic",
																							"name": "string"
																						},
																						{
																							"type": "array",
																							"elementType": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					]
																				}
																			}
																		]
																	}
																},
																{
																	"id": 1661,
																	"name": "reason",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "typeParameter",
																		"name": "R"
																	},
																	{
																		"type": "reference",
																		"name": "PromiseLike",
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "R"
																			}
																		]
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "src/webdriver/Command.ts",
															"line": 685,
															"character": 12
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 684,
									"character": 7
								}
							]
						},
						{
							"id": 1772,
							"name": "clearCookies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1773,
									"name": "clearCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all cookies for the current page."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1204,
									"character": 14
								}
							]
						},
						{
							"id": 1902,
							"name": "clearValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1903,
									"name": "clearValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the value of a form element."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1683,
									"character": 12
								}
							]
						},
						{
							"id": 1891,
							"name": "click",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1892,
									"name": "click",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clicks the element. This method works on both mouse and touch platforms."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1631,
									"character": 7
								}
							]
						},
						{
							"id": 1808,
							"name": "clickMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1809,
									"name": "clickMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clicks a mouse button at the point where the mouse cursor is currently\npositioned. This method may fail to execute with an error if the mouse\nhas not been moved anywhere since the page was loaded."
									},
									"parameters": [
										{
											"id": 1810,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to click. 0 corresponds to the primary mouse\nbutton, 1 to the middle mouse button, 2 to the secondary mouse button.\nNumbers above 2 correspond to any additional buttons a mouse might\nprovide.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1351,
									"character": 18
								}
							]
						},
						{
							"id": 1734,
							"name": "closeCurrentWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1735,
									"name": "closeCurrentWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes the currently focused window. In most environments, after the\nwindow has been closed, it is necessary to explicitly switch to whatever\nwindow is now focused."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1089,
									"character": 20
								}
							]
						},
						{
							"id": 1721,
							"name": "deactivateIme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1722,
									"name": "deactivateIme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deactivates any active input method editor in the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1034,
									"character": 15
								}
							]
						},
						{
							"id": 1774,
							"name": "deleteCookie",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1775,
									"name": "deleteCookie",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a cookie on the current page."
									},
									"parameters": [
										{
											"id": 1776,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the cookie to delete.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1213,
									"character": 14
								}
							]
						},
						{
							"id": 1798,
							"name": "dismissAlert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1799,
									"name": "dismissAlert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dismisses an alert, prompt, or confirmation pop-up. Equivalent to\nclicking the 'OK' button of an alert pop-up or the 'Cancel' button of a\nprompt or confirmation pop-up."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1303,
									"character": 14
								}
							]
						},
						{
							"id": 1817,
							"name": "doubleClick",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1818,
									"name": "doubleClick",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Double-clicks the primary mouse button."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1378,
									"character": 13
								}
							]
						},
						{
							"id": 1842,
							"name": "doubleTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1843,
									"name": "doubleTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a double-tap gesture on an element.",
										"tags": [
											{
												"tag": "method",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 1844,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The element to double-tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1458,
									"character": 11
								}
							]
						},
						{
							"id": 1636,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1637,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Ends the most recent filtering operation in the current Command chain\nand returns the set of matched elements to the previous state. This is\nequivalent to the `jQuery#end` method.",
										"text": "```js\ncommand\n    .findById('parent') // sets filter to #parent\n    .findByClassName('child') // sets filter to all .child inside #parent\n    .getVisibleText()\n    .then(function (visibleTexts) {\n        // all the visible texts from the children\n    })\n    .end() // resets filter to #parent\n    .end(); // resets filter to nothing (the whole document)\n ```\n"
									},
									"parameters": [
										{
											"id": 1638,
											"name": "numCommandsToPop",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of element contexts to pop. Defaults\nto 1.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1"
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 530,
									"character": 5
								}
							]
						},
						{
							"id": 1919,
							"name": "equals",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1920,
									"name": "equals",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determines if this element is equal to another element."
									},
									"parameters": [
										{
											"id": 1921,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1770,
									"character": 8
								}
							]
						},
						{
							"id": 1703,
							"name": "execute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1704,
									"name": "execute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes JavaScript code within the focused window/frame. The code\nshould return a value synchronously.",
										"text": "See [[Command.Command.executeAsync]] to execute code that returns values\nasynchronously.\n",
										"returns": "The value returned by the remote code. Only values that can be\nserialised to JSON, plus DOM elements, can be returned.\n"
									},
									"typeParameter": [
										{
											"id": 1705,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1706,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code to execute. This function will always be\nconverted to a string, sent to the remote environment, and reassembled\nas a new anonymous function on the remote end. This means that you\ncannot access any variables through closure. If your code needs to get\ndata from variables on the local end, they should be passed using\n`args`.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Function"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1707,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An array of arguments that will be passed to the executed\ncode. Only values that can be serialised to JSON, plus [[Element]]\nobjects, can be specified as arguments.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 960,
									"character": 9
								}
							]
						},
						{
							"id": 1708,
							"name": "executeAsync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1709,
									"name": "executeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes JavaScript code within the focused window/frame. The code must\ninvoke the provided callback in order to signal that it has completed\nexecution.",
										"text": "See [[Command.Command.execute]] to execute code that returns values\nsynchronously.\n\nSee [[Command.Command.setExecuteAsyncTimeout]] to set the time until an\nasynchronous script is considered timed out.\n",
										"returns": "The value returned by the remote code. Only values that can be\nserialised to JSON, plus DOM elements, can be returned.\n"
									},
									"typeParameter": [
										{
											"id": 1710,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1711,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code to execute. This function will always be\nconverted to a string, sent to the remote environment, and reassembled\nas a new anonymous function on the remote end. This means that you\ncannot access any variables through closure. If your code needs to get\ndata from variables on the local end, they should be passed using\n`args`.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Function"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1712,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An array of arguments that will be passed to the executed\ncode. Only values that can be serialised to JSON, plus [[Element]]\nobjects, can be specified as arguments. In addition to these arguments,\na callback function will always be passed as the final argument to the\nfunction specified in `script`. This callback function must be invoked\nin order to signal that execution has completed. The return value of the\nexecution, if any, should be passed to this callback function.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 993,
									"character": 14
								}
							]
						},
						{
							"id": 1662,
							"name": "finally",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1663,
									"name": "finally",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a callback to be invoked once the previously chained operations\nhave resolved."
									},
									"parameters": [
										{
											"id": 1664,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1665,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1666,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/webdriver/Command.ts",
															"line": 697,
															"character": 19
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "this"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 697,
									"character": 9
								}
							]
						},
						{
							"id": 1669,
							"name": "find",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1670,
									"name": "find",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1671,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1672,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.find",
										"id": 802
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 712,
									"character": 6
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.find",
								"id": 802
							}
						},
						{
							"id": 1673,
							"name": "findAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1674,
									"name": "findAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1675,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1676,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Element",
													"id": 1415
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.findAll",
										"id": 806
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 716,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.findAll",
								"id": 806
							}
						},
						{
							"id": 1961,
							"name": "findAllByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1962,
									"name": "findAllByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS class name."
									},
									"parameters": [
										{
											"id": 1963,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByClassName",
										"id": 842
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 106,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByClassName",
								"id": 842
							}
						},
						{
							"id": 1964,
							"name": "findAllByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1965,
									"name": "findAllByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS selector."
									},
									"parameters": [
										{
											"id": 1966,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByCssSelector",
										"id": 845
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 115,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByCssSelector",
								"id": 845
							}
						},
						{
							"id": 1970,
							"name": "findAllByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1971,
									"name": "findAllByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1972,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByLinkText",
										"id": 851
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 134,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByLinkText",
								"id": 851
							}
						},
						{
							"id": 1967,
							"name": "findAllByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1968,
									"name": "findAllByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given name attribute."
									},
									"parameters": [
										{
											"id": 1969,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByName",
										"id": 848
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 124,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByName",
								"id": 848
							}
						},
						{
							"id": 1973,
							"name": "findAllByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1974,
									"name": "findAllByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1975,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByPartialLinkText",
										"id": 854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 144,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByPartialLinkText",
								"id": 854
							}
						},
						{
							"id": 1976,
							"name": "findAllByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1977,
									"name": "findAllByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given HTML tag name."
									},
									"parameters": [
										{
											"id": 1978,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByTagName",
										"id": 857
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 153,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByTagName",
								"id": 857
							}
						},
						{
							"id": 1979,
							"name": "findAllByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1980,
									"name": "findAllByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given XPath selector."
									},
									"parameters": [
										{
											"id": 1981,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByXpath",
										"id": 860
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 162,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByXpath",
								"id": 860
							}
						},
						{
							"id": 1937,
							"name": "findByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1938,
									"name": "findByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS class\nname."
									},
									"parameters": [
										{
											"id": 1939,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByClassName",
										"id": 818
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 28,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByClassName",
								"id": 818
							}
						},
						{
							"id": 1940,
							"name": "findByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1941,
									"name": "findByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS\nselector."
									},
									"parameters": [
										{
											"id": 1942,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByCssSelector",
										"id": 821
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 38,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByCssSelector",
								"id": 821
							}
						},
						{
							"id": 1943,
							"name": "findById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1944,
									"name": "findById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given ID."
									},
									"parameters": [
										{
											"id": 1945,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findById",
										"id": 824
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 47,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findById",
								"id": 824
							}
						},
						{
							"id": 1949,
							"name": "findByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1950,
									"name": "findByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1951,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByLinkText",
										"id": 830
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 67,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByLinkText",
								"id": 830
							}
						},
						{
							"id": 1946,
							"name": "findByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1947,
									"name": "findByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given name\nattribute."
									},
									"parameters": [
										{
											"id": 1948,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByName",
										"id": 827
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 57,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByName",
								"id": 827
							}
						},
						{
							"id": 1952,
							"name": "findByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1953,
									"name": "findByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1954,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByPartialLinkText",
										"id": 833
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 77,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByPartialLinkText",
								"id": 833
							}
						},
						{
							"id": 1955,
							"name": "findByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1956,
									"name": "findByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given HTML tag\nname."
									},
									"parameters": [
										{
											"id": 1957,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByTagName",
										"id": 836
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 87,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByTagName",
								"id": 836
							}
						},
						{
							"id": 1958,
							"name": "findByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1959,
									"name": "findByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given XPath\nselector."
									},
									"parameters": [
										{
											"id": 1960,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByXpath",
										"id": 839
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 97,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByXpath",
								"id": 839
							}
						},
						{
							"id": 1677,
							"name": "findDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1678,
									"name": "findDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1679,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1680,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.findDisplayed",
										"id": 810
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 720,
									"character": 15
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.findDisplayed",
								"id": 810
							}
						},
						{
							"id": 1982,
							"name": "findDisplayedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1983,
									"name": "findDisplayedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS class name. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1984,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByClassName",
										"id": 863
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 175,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByClassName",
								"id": 863
							}
						},
						{
							"id": 1985,
							"name": "findDisplayedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1986,
									"name": "findDisplayedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS selector. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1987,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByCssSelector",
										"id": 866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 188,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByCssSelector",
								"id": 866
							}
						},
						{
							"id": 1988,
							"name": "findDisplayedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1989,
									"name": "findDisplayedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given ID. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1990,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedById",
										"id": 869
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 201,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedById",
								"id": 869
							}
						},
						{
							"id": 1994,
							"name": "findDisplayedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1995,
									"name": "findDisplayedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1996,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByLinkText",
										"id": 875
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 227,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByLinkText",
								"id": 875
							}
						},
						{
							"id": 1991,
							"name": "findDisplayedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1992,
									"name": "findDisplayedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given name attribute. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1993,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByName",
										"id": 872
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 214,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByName",
								"id": 872
							}
						},
						{
							"id": 1997,
							"name": "findDisplayedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1998,
									"name": "findDisplayedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement partially matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1999,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByPartialLinkText",
										"id": 878
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 240,
									"character": 32
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByPartialLinkText",
								"id": 878
							}
						},
						{
							"id": 2000,
							"name": "findDisplayedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2001,
									"name": "findDisplayedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given HTML tag name. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 2002,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByTagName",
										"id": 881
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 253,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByTagName",
								"id": 881
							}
						},
						{
							"id": 2003,
							"name": "findDisplayedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2004,
									"name": "findDisplayedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given XPath selector. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 2005,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByXpath",
										"id": 884
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 266,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByXpath",
								"id": 884
							}
						},
						{
							"id": 1848,
							"name": "flickFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1849,
									"name": "flickFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Flicks a finger. Note that this method is currently badly specified and\nhighly dysfunctional and is only provided for the sake of completeness."
									},
									"parameters": [
										{
											"id": 1850,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element where the flick should start."
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 1851,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The x-offset in pixels to flick by."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1852,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The x-offset in pixels to flick by."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1853,
											"name": "speed",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The speed of the flick, in pixels per *second*. Most human\nflicks are 100–200ms, so this value will be higher than expected.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 1854,
									"name": "flickFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1855,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1856,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1857,
											"name": "speed",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1482,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1488,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1493,
									"character": 13
								}
							]
						},
						{
							"id": 1694,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1695,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame to a new URL."
									},
									"parameters": [
										{
											"id": 1696,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 912,
									"character": 5
								}
							]
						},
						{
							"id": 1781,
							"name": "getActiveElement",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1782,
									"name": "getActiveElement",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the currently focused element from the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1237,
									"character": 18
								}
							]
						},
						{
							"id": 1717,
							"name": "getActiveImeEngine",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1718,
									"name": "getActiveImeEngine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the currently active input method editor for the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1017,
									"character": 20
								}
							]
						},
						{
							"id": 1791,
							"name": "getAlertText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1792,
									"name": "getAlertText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the text displayed in the currently active alert pop-up."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1277,
									"character": 14
								}
							]
						},
						{
							"id": 1690,
							"name": "getAllWindowHandles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1691,
									"name": "getAllWindowHandles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of identifiers for all currently open windows."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 898,
									"character": 21
								}
							]
						},
						{
							"id": 1868,
							"name": "getApplicationCacheStatus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1869,
									"name": "getApplicationCacheStatus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current state of the HTML5 application cache for the current\npage.",
										"returns": "The cache status. One of 0 (uncached), 1 (cached/idle), 2\n(checking), 3 (downloading), 4 (update ready), 5 (obsolete).\n"
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1552,
									"character": 27
								}
							]
						},
						{
							"id": 1911,
							"name": "getAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1912,
									"name": "getAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets an attribute of the element.",
										"text": "See [[Element.Element.getProperty]] to retrieve an element property.\n",
										"returns": "The value of the attribute, or `null` if no such attribute\nexists.\n"
									},
									"typeParameter": [
										{
											"id": 1913,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1914,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the attribute."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "S"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1751,
									"character": 14
								}
							]
						},
						{
							"id": 1715,
							"name": "getAvailableImeEngines",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1716,
									"name": "getAvailableImeEngines",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of input method editor engines available to the remote\nenvironment. As of April 2014, no known remote environments support IME\nfunctions."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1009,
									"character": 24
								}
							]
						},
						{
							"id": 1866,
							"name": "getAvailableLogTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1867,
									"name": "getAvailableLogTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the types of logs that are currently available for retrieval from\nthe remote environment."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1541,
									"character": 22
								}
							]
						},
						{
							"id": 1934,
							"name": "getComputedStyle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1935,
									"name": "getComputedStyle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a CSS computed property value for the element."
									},
									"parameters": [
										{
											"id": 1936,
											"name": "propertyName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS property to retrieve. This argument must be\nhyphenated, *not* camel-case.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "StringResult"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1815,
									"character": 18
								}
							]
						},
						{
							"id": 1767,
							"name": "getCookies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1768,
									"name": "getCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all cookies set on the current page."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "WebDriverCookie",
													"id": 660
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1190,
									"character": 12
								}
							]
						},
						{
							"id": 1692,
							"name": "getCurrentUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1693,
									"name": "getCurrentUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the URL that is loaded in the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 905,
									"character": 15
								}
							]
						},
						{
							"id": 1688,
							"name": "getCurrentWindowHandle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1689,
									"name": "getCurrentWindowHandle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the identifier for the window that is currently focused.",
										"returns": "A window handle identifier that can be used with other window\nhandling functions.\n"
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 891,
									"character": 24
								}
							]
						},
						{
							"id": 1876,
							"name": "getExecuteAsyncTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1877,
									"name": "getExecuteAsyncTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Command.Command.executeAsync]] calls."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1581,
									"character": 24
								}
							]
						},
						{
							"id": 1881,
							"name": "getFindTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1882,
									"name": "getFindTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Command.Command.find]] calls."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1597,
									"character": 16
								}
							]
						},
						{
							"id": 1858,
							"name": "getGeolocation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1859,
									"name": "getGeolocation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current geographical location of the remote environment.",
										"returns": "a [[interfaces.Geolocation]] value with latitude and longitude\nspecified using standard WGS84 decimal latitude/longitude. Altitude is\nspecified as meters above the WGS84 ellipsoid. Not all environments\nsupport altitude.\n"
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Geolocation",
												"id": 652
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1505,
									"character": 16
								}
							]
						},
						{
							"id": 1863,
							"name": "getLogsFor",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1864,
									"name": "getLogsFor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all logs from the remote environment of the given type. The logs in\nthe remote environment are cleared once they have been retrieved.",
										"returns": "An array of log entry objects. Timestamps in log entries are\nUnix timestamps, in seconds.\n"
									},
									"parameters": [
										{
											"id": 1865,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of log entries to retrieve. Available log types\ndiffer between remote environments. Use\n[[Command.Command.getAvailableLogTypes]] to learn what log types are\ncurrently available. Not all environments support all possible log\ntypes.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogEntry",
													"id": 656
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1533,
									"character": 12
								}
							]
						},
						{
							"id": 1786,
							"name": "getOrientation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1787,
									"name": "getOrientation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current screen orientation."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "portrait"
													},
													{
														"type": "stringLiteral",
														"value": "landscape"
													}
												]
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1261,
									"character": 16
								}
							]
						},
						{
							"id": 1886,
							"name": "getPageLoadTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1887,
									"name": "getPageLoadTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Command.Command.get]] calls."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1613,
									"character": 20
								}
							]
						},
						{
							"id": 1777,
							"name": "getPageSource",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1778,
									"name": "getPageSource",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the HTML loaded in the focused window/frame. This markup is\nserialised by the remote environment so may not exactly match the HTML\nprovided by the Web server."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1222,
									"character": 15
								}
							]
						},
						{
							"id": 1779,
							"name": "getPageTitle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1780,
									"name": "getPageTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the title of the top-level browsing context of the current window\nor tab."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1230,
									"character": 14
								}
							]
						},
						{
							"id": 1924,
							"name": "getPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1925,
									"name": "getPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the position of the element relative to the top-left corner of the\ndocument, taking into account scrolling and CSS transformations (if they\nare supported)."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1926,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1927,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1796,
																	"character": 38
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1928,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1796,
																	"character": 49
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1927,
																1928
															]
														}
													]
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1795,
									"character": 13
								}
							]
						},
						{
							"id": 1915,
							"name": "getProperty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1916,
									"name": "getProperty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a property of the element.",
										"text": "See [[Element.Element.getAttribute]] to retrieve an element attribute.\n",
										"returns": "The value of the property.\n"
									},
									"typeParameter": [
										{
											"id": 1917,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1918,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the property."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1763,
									"character": 13
								}
							]
						},
						{
							"id": 1929,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1930,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the size of the element, taking into account CSS transformations\n(if they are supported)."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1931,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1933,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1804,
																	"character": 58
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1932,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1804,
																	"character": 42
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1933,
																1932
															]
														}
													]
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1803,
									"character": 9
								}
							]
						},
						{
							"id": 1908,
							"name": "getSpecAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1909,
									"name": "getSpecAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a property or attribute of the element according to the WebDriver\nspecification algorithm. Use of this method is not recommended; instead,\nuse [[Command.Command.getAttribute]] to retrieve DOM attributes and\n[[Command.Command.getProperty]] to retrieve DOM properties.",
										"text": "This method uses the following algorithm on the server to determine what\nvalue to return:\n\n1. If `name` is 'style', returns the `style.cssText` property of the\n   element.\n2. If the attribute exists and is a boolean attribute, returns 'true' if\n   the attribute is true, or null otherwise.\n3. If the element is an `<option>` element and `name` is 'value',\n   returns the `value` attribute if it exists, otherwise returns the\n   visible text content of the option.\n4. If the element is a checkbox or radio button and `name` is\n   'selected', returns 'true' if the element is checked, or null\n   otherwise.\n5. If the returned value is expected to be a URL (e.g. element is `<a>`\n   and attribute is `href`), returns the fully resolved URL from the\n   `href`/`src` property of the element, not the attribute.\n6. If `name` is 'class', returns the `className` property of the\n   element.\n7. If `name` is 'readonly', returns 'true' if the `readOnly` property is\n   true, or null otherwise.\n8. If `name` corresponds to a property of the element, and the property\n   is not an Object, return the property value coerced to a string.\n9. If `name` corresponds to an attribute of the element, return the\n   attribute value.\n",
										"returns": "The value of the attribute as a string, or `null` if no such\nproperty or attribute exists.\n"
									},
									"parameters": [
										{
											"id": 1910,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The property or attribute name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "StringResult"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1738,
									"character": 18
								}
							]
						},
						{
							"id": 1900,
							"name": "getTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1901,
									"name": "getTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the tag name of the element. For HTML documents, the value is\nalways lowercase."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "StringResult"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1676,
									"character": 12
								}
							]
						},
						{
							"id": 1681,
							"name": "getTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1682,
									"name": "getTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current value of a timeout for the session.",
										"returns": "The timeout, in milliseconds.\n"
									},
									"parameters": [
										{
											"id": 1683,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of timeout to retrieve. One of 'script',\n'implicit', or 'page load'."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 868,
									"character": 12
								}
							]
						},
						{
							"id": 1895,
							"name": "getVisibleText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1896,
									"name": "getVisibleText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the visible text within the element. `<br>` elements are converted\nto line breaks in the returned text, and whitespace is normalised per\nthe usual XML/HTML whitespace normalisation rules."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "StringResult"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1648,
									"character": 16
								}
							]
						},
						{
							"id": 1758,
							"name": "getWindowPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1759,
									"name": "getWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the position of a window.",
										"text": "Note that this method is not part of the W3C WebDriver standard.\n",
										"returns": "An object describing the position of the window, in CSS pixels,\nrelative to the top-left corner of the primary monitor. If a secondary\nmonitor exists above or to the left of the primary monitor, these values\nwill be negative.\n"
									},
									"parameters": [
										{
											"id": 1760,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the window to query. See\n[[Command.Command.switchToWindow]] to learn about valid window names.\nOmit this argument to query the currently focused window.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1761,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1762,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1170,
																	"character": 38
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1763,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1170,
																	"character": 49
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1762,
																1763
															]
														}
													]
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1169,
									"character": 19
								}
							]
						},
						{
							"id": 1744,
							"name": "getWindowSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1745,
									"name": "getWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the dimensions of a window.",
										"returns": "An object describing the width and height of the window, in CSS\npixels.\n"
									},
									"parameters": [
										{
											"id": 1746,
											"name": "_windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1747,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1749,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1125,
																	"character": 58
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1748,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 1125,
																	"character": 42
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1749,
																1748
															]
														}
													]
												}
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1124,
									"character": 15
								}
							]
						},
						{
							"id": 1699,
							"name": "goBack",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1700,
									"name": "goBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame back one page using the browser’s\nnavigation history."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 928,
									"character": 8
								}
							]
						},
						{
							"id": 1697,
							"name": "goForward",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1698,
									"name": "goForward",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame forward one page using the browser’s\nnavigation history."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 920,
									"character": 11
								}
							]
						},
						{
							"id": 1922,
							"name": "isDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1923,
									"name": "isDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not the element would be visible to an actual user.\nThis means that the following types of elements are considered to be not\ndisplayed:",
										"text": "1. Elements with `display: none`\n2. Elements with `visibility: hidden`\n3. Elements positioned outside of the viewport that cannot be scrolled\n   into view\n4. Elements with `opacity: 0`\n5. Elements with no `offsetWidth` or `offsetHeight`\n"
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1786,
									"character": 13
								}
							]
						},
						{
							"id": 1906,
							"name": "isEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1907,
									"name": "isEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not a form element can be interacted with."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1699,
									"character": 11
								}
							]
						},
						{
							"id": 1719,
							"name": "isImeActivated",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1720,
									"name": "isImeActivated",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not an input method editor is currently active in the\nremote environment. As of April 2014, no known remote environments\nsupport IME functions."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1026,
									"character": 16
								}
							]
						},
						{
							"id": 1904,
							"name": "isSelected",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1905,
									"name": "isSelected",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not a form element is currently selected (for\ndrop-down options and radio buttons), or whether or not the element is\ncurrently checked (for checkboxes)."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1692,
									"character": 12
								}
							]
						},
						{
							"id": 1845,
							"name": "longTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1846,
									"name": "longTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a long-tap gesture on an element.",
										"tags": [
											{
												"tag": "method",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 1847,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The element to long-tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1468,
									"character": 9
								}
							]
						},
						{
							"id": 1764,
							"name": "maximizeWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1765,
									"name": "maximizeWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Maximises a window according to the platform’s window system behaviour."
									},
									"parameters": [
										{
											"id": 1766,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the window to resize. See\n[[Command.Command.switchToWindow] to learn about valid window names.\nOmit this argument to resize the currently focused window.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1183,
									"character": 16
								}
							]
						},
						{
							"id": 1830,
							"name": "moveFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1831,
									"name": "moveFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the last depressed finger to a new point on the touch screen."
									},
									"parameters": [
										{
											"id": 1832,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to move to, maybe in device pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1833,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to move to, maybe in device pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1423,
									"character": 12
								}
							]
						},
						{
							"id": 1800,
							"name": "moveMouseTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1801,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the remote environment’s mouse cursor to the specified element or\nrelative position. If the element is outside of the viewport, the remote\ndriver will attempt to scroll it into view automatically."
									},
									"parameters": [
										{
											"id": 1802,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The element to move the mouse to. If x-offset and\ny-offset are not specified, the mouse will be moved to the centre of the\nelement.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 1803,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The x-offset of the cursor, maybe in CSS pixels, relative\nto the left edge of the specified element’s bounding client rectangle.\nIf no element is specified, the offset is relative to the previous\nposition of the mouse, or to the left edge of the page’s root element if\nthe mouse was never moved before.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 1804,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The y-offset of the cursor, maybe in CSS pixels, relative\nto the top edge of the specified element’s bounding client rectangle. If\nno element is specified, the offset is relative to the previous position\nof the mouse, or to the top edge of the page’s root element if the mouse\nwas never moved before.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 1805,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1806,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 1807,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1328,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1333,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1337,
									"character": 13
								}
							]
						},
						{
							"id": 1822,
							"name": "pressFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1823,
									"name": "pressFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Depresses a new finger at the given point on a touch screen device\nwithout releasing it."
									},
									"parameters": [
										{
											"id": 1824,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to press, maybe in device pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1825,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to press, maybe in device pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1400,
									"character": 13
								}
							]
						},
						{
							"id": 1783,
							"name": "pressKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1784,
									"name": "pressKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the focused window/frame/element."
									},
									"parameters": [
										{
											"id": 1785,
											"name": "keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type in the remote environment. It is possible\nto type keys that do not have normal character representations (modifier\nkeys, function keys, etc.) as well as keys that have two different\nrepresentations on a typical US-ASCII keyboard (numpad keys); use the\nvalues from [[keys]] to type these special characters. Any modifier keys\nthat are activated by this call will persist until they are deactivated.\nTo deactivate a modifier key, type the same modifier key a second time,\nor send `\\uE000` ('NULL') to deactivate all currently active modifier\nkeys.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1254,
									"character": 11
								}
							]
						},
						{
							"id": 1811,
							"name": "pressMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1812,
									"name": "pressMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Depresses a mouse button without releasing it."
									},
									"parameters": [
										{
											"id": 1813,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to press. See [[Command.Command.click]] for\navailable options.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1361,
									"character": 18
								}
							]
						},
						{
							"id": 1870,
							"name": "quit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1871,
									"name": "quit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Terminates the session. No more commands will be accepted by the remote\nafter this point."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1560,
									"character": 6
								}
							]
						},
						{
							"id": 1701,
							"name": "refresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1702,
									"name": "refresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reloads the current browser window/frame."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 935,
									"character": 9
								}
							]
						},
						{
							"id": 1826,
							"name": "releaseFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1827,
									"name": "releaseFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Releases whatever finger exists at the given point on a touch screen\ndevice."
									},
									"parameters": [
										{
											"id": 1828,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate where a finger is pressed, maybe in\ndevice pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1829,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate where a finger is pressed, maybe in\ndevice pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1413,
									"character": 15
								}
							]
						},
						{
							"id": 1814,
							"name": "releaseMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1815,
									"name": "releaseMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Releases a previously depressed mouse button."
									},
									"parameters": [
										{
											"id": 1816,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to press. See [[Command.Command.click]] for\navailable options.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1371,
									"character": 20
								}
							]
						},
						{
							"id": 1769,
							"name": "setCookie",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1770,
									"name": "setCookie",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a cookie on the current page."
									},
									"parameters": [
										{
											"id": 1771,
											"name": "cookie",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WebDriverCookie",
												"id": 660
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1197,
									"character": 11
								}
							]
						},
						{
							"id": 1878,
							"name": "setExecuteAsyncTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1879,
									"name": "setExecuteAsyncTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Command.Command.executeAsync]] calls."
									},
									"parameters": [
										{
											"id": 1880,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1590,
									"character": 24
								}
							]
						},
						{
							"id": 1883,
							"name": "setFindTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1884,
									"name": "setFindTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Command.Command.find]] calls."
									},
									"parameters": [
										{
											"id": 1885,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1606,
									"character": 16
								}
							]
						},
						{
							"id": 1860,
							"name": "setGeolocation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1861,
									"name": "setGeolocation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the geographical location of the remote environment."
									},
									"parameters": [
										{
											"id": 1862,
											"name": "location",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Latitude and longitude are specified using standard\nWGS84 decimal latitude/longitude. Altitude is specified as meters above\nthe WGS84 ellipsoid. Not all environments support altitude.\n"
											},
											"type": {
												"type": "reference",
												"name": "Geolocation",
												"id": 652
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1516,
									"character": 16
								}
							]
						},
						{
							"id": 1788,
							"name": "setOrientation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1789,
									"name": "setOrientation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the screen orientation."
									},
									"parameters": [
										{
											"id": 1790,
											"name": "orientation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Either 'portrait' or 'landscape'.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "portrait"
													},
													{
														"type": "stringLiteral",
														"value": "landscape"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1270,
									"character": 16
								}
							]
						},
						{
							"id": 1888,
							"name": "setPageLoadTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1889,
									"name": "setPageLoadTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Command.Command.get]] calls."
									},
									"parameters": [
										{
											"id": 1890,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1622,
									"character": 20
								}
							]
						},
						{
							"id": 1684,
							"name": "setTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1685,
									"name": "setTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the value of a timeout for the session."
									},
									"parameters": [
										{
											"id": 1686,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of timeout to set. One of 'script', 'implicit', or\n'page load'.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1687,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of time to use for the timeout, in milliseconds. A\nvalue of 0 will cause operations to time out immediately.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 881,
									"character": 12
								}
							]
						},
						{
							"id": 1750,
							"name": "setWindowPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1751,
									"name": "setWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the position of a window.",
										"text": "Note that this method is not part of the W3C WebDriver standard.\n"
									},
									"parameters": [
										{
											"id": 1752,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to move to, in CSS pixels, relative to\nthe left edge of the primary monitor.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1753,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to move to, in CSS pixels, relative to\nthe top edge of the primary monitor.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 1754,
									"name": "setWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1755,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1756,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1757,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1145,
									"character": 19
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1146,
									"character": 19
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1151,
									"character": 19
								}
							]
						},
						{
							"id": 1736,
							"name": "setWindowSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1737,
									"name": "setWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the dimensions of a window."
									},
									"parameters": [
										{
											"id": 1738,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new width of the window, in CSS pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1739,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new height of the window, in CSS pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 1740,
									"name": "setWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1741,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1742,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1743,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1104,
									"character": 15
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1105,
									"character": 15
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1110,
									"character": 15
								}
							]
						},
						{
							"id": 1633,
							"name": "sleep",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1634,
									"name": "sleep",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Pauses execution of the next command in the chain for `ms` milliseconds."
									},
									"parameters": [
										{
											"id": 1635,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Time to delay, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 501,
									"character": 7
								}
							]
						},
						{
							"id": 1893,
							"name": "submit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1894,
									"name": "submit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Submits the element, if it is a form, or the form belonging to the\nelement, if it is a form element."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1639,
									"character": 8
								}
							]
						},
						{
							"id": 1726,
							"name": "switchToFrame",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1727,
									"name": "switchToFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused frame to a new frame."
									},
									"parameters": [
										{
											"id": 1728,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The frame to switch to. In most environments, a number or\nstring value corresponds to a key in the `window.frames` object of the\ncurrently active frame. If `null`, the topmost (default) frame will be\nused. If an Element is provided, it must correspond to a `<frame>` or\n`<iframe>` element.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Element",
														"id": 1415
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1057,
									"character": 15
								}
							]
						},
						{
							"id": 1732,
							"name": "switchToParentFrame",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1733,
									"name": "switchToParentFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused frame to the parent of the currently\nfocused frame."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1080,
									"character": 21
								}
							]
						},
						{
							"id": 1729,
							"name": "switchToWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1730,
									"name": "switchToWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused window to a new window.",
										"text": "In environments using the JsonWireProtocol, this value corresponds to\nthe `window.name` property of a window.\n"
									},
									"parameters": [
										{
											"id": 1731,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The handle of the window to switch to. In mobile\nenvironments and environments based on the W3C WebDriver standard, this\nshould be a handle as returned by\n[[Command.Command.getAllWindowHandles]].\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1072,
									"character": 16
								}
							]
						},
						{
							"id": 1713,
							"name": "takeScreenshot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1714,
									"name": "takeScreenshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a screenshot of the focused window and returns it in PNG format."
									},
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Buffer"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1000,
									"character": 16
								}
							]
						},
						{
							"id": 1819,
							"name": "tap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1820,
									"name": "tap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Taps an element on a touch screen device. If the element is outside of\nthe viewport, the remote driver will attempt to scroll it into view\nautomatically."
									},
									"parameters": [
										{
											"id": 1821,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element to tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1389,
									"character": 5
								}
							]
						},
						{
							"id": 1639,
							"name": "then",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1640,
									"name": "then",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a callback to be invoked once the previously chained operation has\ncompleted.",
										"text": "This method is compatible with the `Promise#then` API, with two\nimportant differences:\n\n1. The context (`this`) of the callback is set to the Command object,\n   rather than being `undefined`. This allows promise helpers to be\n   created that can retrieve the appropriate session and element\n   contexts for execution.\n2. A second non-standard `setContext` argument is passed to the\n   callback. This `setContext` function can be called at any time before\n   the callback fulfills its return value and expects either a single\n   [[Element]] or an array of Elements to be provided as its only\n   argument. The provided element(s) will be used as the context for\n   subsequent element method invocations (`click`, etc.). If the\n   `setContext` method is not called, the element context from the\n   parent will be passed through unmodified.\n"
									},
									"typeParameter": [
										{
											"id": 1641,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1642,
											"name": "R",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1643,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 1644,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 1645,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1646,
																			"name": "this",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Command",
																				"id": 1591,
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "T"
																					},
																					{
																						"type": "typeParameter",
																						"name": "P"
																					},
																					{
																						"type": "typeParameter",
																						"name": "StringResult",
																						"constraint": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "array",
																									"elementType": {
																										"type": "intrinsic",
																										"name": "string"
																									}
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		{
																			"id": 1647,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "typeParameter",
																				"name": "T"
																			}
																		},
																		{
																			"id": 1648,
																			"name": "setContext",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "SetContextMethod",
																				"id": 2030
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "U"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "U"
																					}
																				]
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 571,
																	"character": 7
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 1649,
											"name": "errback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 1650,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 1651,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1652,
																			"name": "this",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "Command",
																				"id": 1591,
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "T"
																					},
																					{
																						"type": "typeParameter",
																						"name": "P"
																					},
																					{
																						"type": "typeParameter",
																						"name": "StringResult",
																						"constraint": {
																							"type": "union",
																							"types": [
																								{
																									"type": "intrinsic",
																									"name": "string"
																								},
																								{
																									"type": "array",
																									"elementType": {
																										"type": "intrinsic",
																										"name": "string"
																									}
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		{
																			"id": 1653,
																			"name": "error",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "typeParameter",
																				"name": "R"
																			},
																			{
																				"type": "reference",
																				"name": "PromiseLike",
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "R"
																					}
																				]
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "src/webdriver/Command.ts",
																	"line": 579,
																	"character": 7
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "typeParameter",
														"name": "U"
													},
													{
														"type": "typeParameter",
														"name": "R"
													}
												]
											},
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 569,
									"character": 6
								}
							]
						},
						{
							"id": 1834,
							"name": "touchScroll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1835,
									"name": "touchScroll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Scrolls the currently focused window on a touch screen device."
									},
									"parameters": [
										{
											"id": 1836,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An optional x-offset, relative to the left edge of the\nelement, in CSS pixels. If no element is specified, the offset is\nrelative to the previous scroll position of the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1837,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An optional y-offset, relative to the top edge of the\nelement, in CSS pixels. If no element is specified, the offset is\nrelative to the previous scroll position of the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 1838,
									"name": "touchScroll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1839,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 1840,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 1841,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "typeParameter",
												"name": "P"
											},
											{
												"type": "typeParameter",
												"name": "StringResult",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1442,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1443,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1448,
									"character": 13
								}
							]
						},
						{
							"id": 1897,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1898,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the element. This method works the same as the\n[[Command.Command.pressKeys]] method except that any modifier keys are\nautomatically released at the end of the command. This method should be\nused instead of [[Command.Command.pressKeys]] to type filenames into\nfile upload fields.",
										"text": "Since 1.5, if the WebDriver server supports remote file uploads, and you\ntype a path to a file on your local computer, that file will be\ntransparently uploaded to the remote server and the remote filename will\nbe typed instead. If you do not want to upload local files, use\n[[Command.Command.pressKeys]] instead.\n"
									},
									"parameters": [
										{
											"id": 1899,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type in the remote environment. See\n[[Command.Command.pressKeys]] for more information.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1668,
									"character": 6
								}
							]
						},
						{
							"id": 1793,
							"name": "typeInPrompt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1794,
									"name": "typeInPrompt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the currently active prompt pop-up."
									},
									"parameters": [
										{
											"id": 1795,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type into the pop-up’s input box.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1286,
									"character": 14
								}
							]
						},
						{
							"id": 1872,
							"name": "waitForDeleted",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1873,
									"name": "waitForDeleted",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements findable in the currently active window/frame\nusing the given strategy and value to be destroyed."
									},
									"parameters": [
										{
											"id": 1874,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Command.Command.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1875,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Command.Command.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "unknown",
												"name": "P"
											},
											{
												"type": "unknown",
												"name": "StringResult"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.waitForDeleted",
										"id": 814
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1574,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.waitForDeleted",
								"id": 814
							}
						},
						{
							"id": 2006,
							"name": "waitForDeletedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2007,
									"name": "waitForDeletedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS class\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 2008,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByClassName",
										"id": 887
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 276,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByClassName",
								"id": 887
							}
						},
						{
							"id": 2009,
							"name": "waitForDeletedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2010,
									"name": "waitForDeletedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 2011,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByCssSelector",
										"id": 890
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 286,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByCssSelector",
								"id": 890
							}
						},
						{
							"id": 2012,
							"name": "waitForDeletedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2013,
									"name": "waitForDeletedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given ID to be\ndestroyed."
									},
									"parameters": [
										{
											"id": 2014,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedById",
										"id": 893
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 296,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedById",
								"id": 893
							}
						},
						{
							"id": 2018,
							"name": "waitForDeletedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2019,
									"name": "waitForDeletedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 2020,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByLinkText",
										"id": 899
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 316,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByLinkText",
								"id": 899
							}
						},
						{
							"id": 2015,
							"name": "waitForDeletedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2016,
									"name": "waitForDeletedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given name\nattribute to be destroyed."
									},
									"parameters": [
										{
											"id": 2017,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByName",
										"id": 896
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 306,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByName",
								"id": 896
							}
						},
						{
							"id": 2021,
							"name": "waitForDeletedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2022,
									"name": "waitForDeletedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element partially matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 2023,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByPartialLinkText",
										"id": 902
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 326,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByPartialLinkText",
								"id": 902
							}
						},
						{
							"id": 2024,
							"name": "waitForDeletedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2025,
									"name": "waitForDeletedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given HTML tag\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 2026,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByTagName",
										"id": 905
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 336,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByTagName",
								"id": 905
							}
						},
						{
							"id": 2027,
							"name": "waitForDeletedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2028,
									"name": "waitForDeletedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given XPath\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 2029,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByXpath",
										"id": 908
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 346,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByXpath",
								"id": 908
							}
						},
						{
							"id": 1603,
							"name": "addElementMethod",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1604,
									"name": "addElementMethod",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Augments `target` with a method that will call `key` on all context\nelements stored within `target`. This can be used to easily add new\nmethods from any custom object that implements the Element API to any\ntarget object that implements the Command API.",
										"text": "Functions that are copied may have the following extra properties in\norder to change the way that Command works with these functions:\n\n* `createsContext` (boolean): If this property is specified, the return\n  value from the function will be used as the new context for the\n  returned Command.\n"
									},
									"typeParameter": [
										{
											"id": 1605,
											"name": "Us",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1606,
											"name": "Ps",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1607,
											"name": "Ss",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 1608,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Command",
												"id": 1591,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Us"
													},
													{
														"type": "typeParameter",
														"name": "Ps"
													},
													{
														"type": "typeParameter",
														"name": "Ss",
														"constraint": {
															"type": "union",
															"types": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 1609,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 285,
									"character": 25
								}
							]
						},
						{
							"id": 1595,
							"name": "addSessionMethod",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1596,
									"name": "addSessionMethod",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Augments `target` with a conversion of the `originalFn` method that\nenables its use with a Command object. This can be used to easily add\nnew methods from any custom object that implements the Session API to\nany target object that implements the Command API.",
										"text": "Functions that are copied may have the following extra properties in\norder to change the way that Command works with these functions:\n\n* `createsContext` (boolean): If this property is specified, the return\n  value from the function will be used as the new context for the\n  returned Command.\n* `usesElement` (boolean): If this property is specified, element(s)\n  from the current context will be used as the first argument to the\n  function, if the explicitly specified first argument is not already an\n  element.\n"
									},
									"typeParameter": [
										{
											"id": 1597,
											"name": "Us",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1598,
											"name": "Ps",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 1599,
											"name": "Ss",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 1600,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Command",
												"id": 1591,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "Us"
													},
													{
														"type": "typeParameter",
														"name": "Ps"
													},
													{
														"type": "typeParameter",
														"name": "Ss",
														"constraint": {
															"type": "union",
															"types": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 1601,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1602,
											"name": "originalFn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 196,
									"character": 25
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1610
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								1629,
								1625,
								1631,
								1627
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1796,
								1723,
								1667,
								1654,
								1772,
								1902,
								1891,
								1808,
								1734,
								1721,
								1774,
								1798,
								1817,
								1842,
								1636,
								1919,
								1703,
								1708,
								1662,
								1669,
								1673,
								1961,
								1964,
								1970,
								1967,
								1973,
								1976,
								1979,
								1937,
								1940,
								1943,
								1949,
								1946,
								1952,
								1955,
								1958,
								1677,
								1982,
								1985,
								1988,
								1994,
								1991,
								1997,
								2000,
								2003,
								1848,
								1694,
								1781,
								1717,
								1791,
								1690,
								1868,
								1911,
								1715,
								1866,
								1934,
								1767,
								1692,
								1688,
								1876,
								1881,
								1858,
								1863,
								1786,
								1886,
								1777,
								1779,
								1924,
								1915,
								1929,
								1908,
								1900,
								1681,
								1895,
								1758,
								1744,
								1699,
								1697,
								1922,
								1906,
								1719,
								1904,
								1845,
								1764,
								1830,
								1800,
								1822,
								1783,
								1811,
								1870,
								1701,
								1826,
								1814,
								1769,
								1878,
								1883,
								1860,
								1788,
								1888,
								1684,
								1750,
								1736,
								1633,
								1893,
								1726,
								1732,
								1729,
								1713,
								1819,
								1639,
								1834,
								1897,
								1793,
								1872,
								2006,
								2009,
								2012,
								2018,
								2015,
								2021,
								2024,
								2027,
								1603,
								1595
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Command.ts",
							"line": 160,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Locator",
							"id": 798,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Command",
									"id": 1591,
									"typeArguments": [
										{
											"type": "reference",
											"name": "Element",
											"id": 1415
										},
										{
											"type": "typeParameter",
											"name": "P"
										},
										{
											"type": "intrinsic",
											"name": "string"
										}
									]
								},
								{
									"type": "reference",
									"name": "Command",
									"id": 1591,
									"typeArguments": [
										{
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"type": "typeParameter",
											"name": "P"
										},
										{
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "Command",
									"id": 1591,
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "void"
										},
										{
											"type": "typeParameter",
											"name": "P"
										},
										{
											"type": "typeParameter",
											"name": "StringResult",
											"constraint": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									]
								}
							]
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Remote",
							"id": 7283
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"name": "PromiseLike",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							]
						}
					]
				},
				{
					"id": 2033,
					"name": "Context",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The current Context of a Command"
					},
					"indexSignature": [
						{
							"id": 2199,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "The current Context of a Command"
							},
							"parameters": [
								{
									"id": 2200,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 2201,
							"name": "Array",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1385,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ArrayConstructor"
							}
						},
						{
							"id": 2035,
							"name": "depth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1836,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 2034,
							"name": "isSingle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/Command.ts",
									"line": 1835,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 2036,
							"name": "length",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array."
							},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1215,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.length"
							}
						},
						{
							"id": 2240,
							"name": "__@iterator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2241,
									"name": "__@iterator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Iterator"
									},
									"type": {
										"type": "reference",
										"name": "IterableIterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.[Symbol.iterator]"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 60,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.[Symbol.iterator]"
							}
						},
						{
							"id": 2248,
							"name": "__@unscopables",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2249,
									"name": "__@unscopables",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2250,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2251,
													"name": "copyWithin",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
															"line": 95,
															"character": 18
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 2252,
													"name": "entries",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
															"line": 96,
															"character": 15
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 2253,
													"name": "fill",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
															"line": 97,
															"character": 12
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 2254,
													"name": "find",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
															"line": 98,
															"character": 12
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 2255,
													"name": "findIndex",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
															"line": 99,
															"character": 17
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 2256,
													"name": "keys",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
															"line": 100,
															"character": 12
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 2257,
													"name": "values",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
															"line": 101,
															"character": 14
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														2251,
														2252,
														2253,
														2254,
														2255,
														2256,
														2257
													]
												}
											],
											"sources": [
												{
													"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
													"line": 94,
													"character": 27
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.[Symbol.unscopables]"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
									"line": 94,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.[Symbol.unscopables]"
							}
						},
						{
							"id": 2046,
							"name": "concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2047,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Combines two or more arrays."
									},
									"parameters": [
										{
											"id": 2048,
											"name": "items",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Additional items to add to the end of array1.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ConcatArray",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.concat"
									}
								},
								{
									"id": 2049,
									"name": "concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Combines two or more arrays."
									},
									"parameters": [
										{
											"id": 2050,
											"name": "items",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Additional items to add to the end of array1.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "unknown",
															"name": "T"
														},
														{
															"type": "reference",
															"name": "ConcatArray",
															"typeArguments": [
																{
																	"type": "unknown",
																	"name": "T"
																}
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.concat"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1237,
									"character": 10
								},
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1242,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.concat"
							}
						},
						{
							"id": 2235,
							"name": "copyWithin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2236,
									"name": "copyWithin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target"
									},
									"parameters": [
										{
											"id": 2237,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If target is negative, it is treated as length+target where length is the\nlength of the array."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2238,
											"name": "start",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2239,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If not specified, length of the this object is used as its default value.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.copyWithin"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
									"line": 64,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.copyWithin"
							}
						},
						{
							"id": 2242,
							"name": "entries",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2243,
									"name": "entries",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterable of key, value pairs for every entry in the array"
									},
									"type": {
										"type": "reference",
										"name": "IterableIterator",
										"typeArguments": [
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.entries"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 65,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.entries"
							}
						},
						{
							"id": 2088,
							"name": "every",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2089,
									"name": "every",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determines whether all the members of an array satisfy the specified test."
									},
									"parameters": [
										{
											"id": 2090,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that accepts up to three arguments. The every method calls\nthe callbackfn function for each element in the array until the callbackfn returns a value\nwhich is coercible to the Boolean value false, or until the end of the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2091,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2092,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2093,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2094,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2095,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "unknown"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1310,
															"character": 21
														}
													]
												}
											}
										},
										{
											"id": 2096,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to which the this keyword can refer in the callbackfn function.\nIf thisArg is omitted, undefined is used as the this value.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.every"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1310,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.every"
							}
						},
						{
							"id": 2230,
							"name": "fill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2231,
									"name": "fill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the this object after filling the section identified by start and end with value"
									},
									"parameters": [
										{
											"id": 2232,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "value to fill array section with"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2233,
											"name": "start",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2234,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "index to stop filling the array at. If end is negative, it is treated as\nlength+end.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.fill"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
									"line": 53,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.fill"
							}
						},
						{
							"id": 2125,
							"name": "filter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2126,
									"name": "filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the elements of an array that meet the condition specified in a callback function."
									},
									"typeParameter": [
										{
											"id": 2127,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 2128,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2129,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2130,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2131,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2132,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2133,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "predicate",
																"name": "value",
																"asserts": false,
																"targetType": {
																	"type": "typeParameter",
																	"name": "S",
																	"constraint": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1337,
															"character": 35
														}
													]
												}
											}
										},
										{
											"id": 2134,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "S",
											"constraint": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.filter"
									}
								},
								{
									"id": 2135,
									"name": "filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the elements of an array that meet the condition specified in a callback function."
									},
									"parameters": [
										{
											"id": 2136,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2137,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2138,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2139,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2140,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2141,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "unknown"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1343,
															"character": 22
														}
													]
												}
											}
										},
										{
											"id": 2142,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.filter"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1337,
									"character": 10
								},
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1343,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.filter"
							}
						},
						{
							"id": 2202,
							"name": "find",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2203,
									"name": "find",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise."
									},
									"typeParameter": [
										{
											"id": 2204,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 2205,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2206,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2207,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2208,
																	"name": "this",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																},
																{
																	"id": 2209,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2210,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2211,
																	"name": "obj",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "predicate",
																"name": "value",
																"asserts": false,
																"targetType": {
																	"type": "typeParameter",
																	"name": "S",
																	"constraint": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
															"line": 31,
															"character": 32
														}
													]
												}
											}
										},
										{
											"id": 2212,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "intrinsic",
													"name": "any"
												}
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.find"
									}
								},
								{
									"id": 2213,
									"name": "find",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2214,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2215,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2216,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2217,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2218,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2219,
																	"name": "obj",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "unknown"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
															"line": 32,
															"character": 19
														}
													]
												}
											}
										},
										{
											"id": 2220,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.find"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
									"line": 31,
									"character": 8
								},
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
									"line": 32,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.find"
							}
						},
						{
							"id": 2221,
							"name": "findIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2222,
									"name": "findIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the index of the first element in the array where predicate is true, and -1\notherwise."
									},
									"parameters": [
										{
											"id": 2223,
											"name": "predicate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2224,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2225,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2226,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2227,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2228,
																	"name": "obj",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "unknown"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
															"line": 43,
															"character": 24
														}
													]
												}
											}
										},
										{
											"id": 2229,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.findIndex"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.core.d.ts",
									"line": 43,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.findIndex"
							}
						},
						{
							"id": 2106,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2107,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs the specified action for each element in an array."
									},
									"parameters": [
										{
											"id": 2108,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2109,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2110,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2111,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2112,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2113,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1325,
															"character": 23
														}
													]
												}
											}
										},
										{
											"id": 2114,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.forEach"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1325,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.forEach"
							}
						},
						{
							"id": 2258,
							"name": "includes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2259,
									"name": "includes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determines whether an array includes a certain element, returning true or false as appropriate."
									},
									"parameters": [
										{
											"id": 2260,
											"name": "searchElement",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element to search for."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2261,
											"name": "fromIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The position in this array at which to begin searching for searchElement.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.includes"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2016.array.include.d.ts",
									"line": 27,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.includes"
							}
						},
						{
							"id": 2080,
							"name": "indexOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2081,
									"name": "indexOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the index of the first occurrence of a value in an array."
									},
									"parameters": [
										{
											"id": 2082,
											"name": "searchElement",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to locate in the array."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2083,
											"name": "fromIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.indexOf"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1295,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.indexOf"
							}
						},
						{
							"id": 2051,
							"name": "join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2052,
									"name": "join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds all the elements of an array separated by the specified separator string."
									},
									"parameters": [
										{
											"id": 2053,
											"name": "separator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.join"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1247,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.join"
							}
						},
						{
							"id": 2244,
							"name": "keys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2245,
									"name": "keys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterable of keys in the array"
									},
									"type": {
										"type": "reference",
										"name": "IterableIterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.keys"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 70,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.keys"
							}
						},
						{
							"id": 2084,
							"name": "lastIndexOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2085,
									"name": "lastIndexOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the index of the last occurrence of a specified value in an array."
									},
									"parameters": [
										{
											"id": 2086,
											"name": "searchElement",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to locate in the array."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2087,
											"name": "fromIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.lastIndexOf"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1301,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.lastIndexOf"
							}
						},
						{
							"id": 2115,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2116,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
									},
									"typeParameter": [
										{
											"id": 2117,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2118,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2119,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2120,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2121,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2122,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2123,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1331,
															"character": 22
														}
													]
												}
											}
										},
										{
											"id": 2124,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "U"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.map"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1331,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.map"
							}
						},
						{
							"id": 2041,
							"name": "pop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2042,
									"name": "pop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes the last element from an array and returns it."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.pop"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1227,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.pop"
							}
						},
						{
							"id": 2043,
							"name": "push",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2044,
									"name": "push",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Appends new elements to an array, and returns the new length of the array."
									},
									"parameters": [
										{
											"id": 2045,
											"name": "items",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "New elements of the Array.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.push"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1232,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.push"
							}
						},
						{
							"id": 2143,
							"name": "reduce",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2144,
									"name": "reduce",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
									},
									"parameters": [
										{
											"id": 2145,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2146,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2147,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2148,
																	"name": "previousValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2149,
																	"name": "currentValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2150,
																	"name": "currentIndex",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2151,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1349,
															"character": 22
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.reduce"
									}
								},
								{
									"id": 2152,
									"name": "reduce",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2153,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2154,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2155,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2156,
																	"name": "previousValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2157,
																	"name": "currentValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2158,
																	"name": "currentIndex",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2159,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1350,
															"character": 22
														}
													]
												}
											}
										},
										{
											"id": 2160,
											"name": "initialValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.reduce"
									}
								},
								{
									"id": 2161,
									"name": "reduce",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
									},
									"typeParameter": [
										{
											"id": 2162,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2163,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2164,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2165,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2166,
																	"name": "previousValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "U"
																	}
																},
																{
																	"id": 2167,
																	"name": "currentValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2168,
																	"name": "currentIndex",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2169,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1356,
															"character": 25
														}
													]
												}
											}
										},
										{
											"id": 2170,
											"name": "initialValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "U"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "U"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.reduce"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1349,
									"character": 10
								},
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1350,
									"character": 10
								},
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1356,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduce"
							}
						},
						{
							"id": 2171,
							"name": "reduceRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2172,
									"name": "reduceRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
									},
									"parameters": [
										{
											"id": 2173,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2174,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2175,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2176,
																	"name": "previousValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2177,
																	"name": "currentValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2178,
																	"name": "currentIndex",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2179,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1362,
															"character": 27
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.reduceRight"
									}
								},
								{
									"id": 2180,
									"name": "reduceRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2181,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2182,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2183,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2184,
																	"name": "previousValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2185,
																	"name": "currentValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2186,
																	"name": "currentIndex",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2187,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1363,
															"character": 27
														}
													]
												}
											}
										},
										{
											"id": 2188,
											"name": "initialValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.reduceRight"
									}
								},
								{
									"id": 2189,
									"name": "reduceRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
									},
									"typeParameter": [
										{
											"id": 2190,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2191,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2192,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2193,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2194,
																	"name": "previousValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "U"
																	}
																},
																{
																	"id": 2195,
																	"name": "currentValue",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2196,
																	"name": "currentIndex",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2197,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1369,
															"character": 30
														}
													]
												}
											}
										},
										{
											"id": 2198,
											"name": "initialValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "U"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "U"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.reduceRight"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1362,
									"character": 15
								},
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1363,
									"character": 15
								},
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1369,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reduceRight"
							}
						},
						{
							"id": 2054,
							"name": "reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2055,
									"name": "reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverses the elements in an Array."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.reverse"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1251,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.reverse"
							}
						},
						{
							"id": 2056,
							"name": "shift",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2057,
									"name": "shift",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes the first element from an array and returns it."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.shift"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1255,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.shift"
							}
						},
						{
							"id": 2058,
							"name": "slice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2059,
									"name": "slice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a section of an array."
									},
									"parameters": [
										{
											"id": 2060,
											"name": "start",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The beginning of the specified portion of the array."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2061,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.slice"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1261,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.slice"
							}
						},
						{
							"id": 2097,
							"name": "some",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2098,
									"name": "some",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determines whether the specified callback function returns true for any element of an array."
									},
									"parameters": [
										{
											"id": 2099,
											"name": "callbackfn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that accepts up to three arguments. The some method calls\nthe callbackfn function for each element in the array until the callbackfn returns a value\nwhich is coercible to the Boolean value true, or until the end of the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2100,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2101,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2102,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 2103,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 2104,
																	"name": "array",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "unknown"
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
															"line": 1319,
															"character": 20
														}
													]
												}
											}
										},
										{
											"id": 2105,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to which the this keyword can refer in the callbackfn function.\nIf thisArg is omitted, undefined is used as the this value.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.some"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1319,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.some"
							}
						},
						{
							"id": 2062,
							"name": "sort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2063,
									"name": "sort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sorts an array."
									},
									"parameters": [
										{
											"id": 2064,
											"name": "compareFn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Function used to determine the order of the elements. It is expected to return\na negative value if first argument is less than second argument, zero if they're equal and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 2065,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2066,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2067,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2068,
																			"name": "b",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.sort"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1271,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.sort"
							}
						},
						{
							"id": 2069,
							"name": "splice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2070,
									"name": "splice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
									},
									"parameters": [
										{
											"id": 2071,
											"name": "start",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The zero-based location in the array from which to start removing elements."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2072,
											"name": "deleteCount",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The number of elements to remove.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.splice"
									}
								},
								{
									"id": 2073,
									"name": "splice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
									},
									"parameters": [
										{
											"id": 2074,
											"name": "start",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The zero-based location in the array from which to start removing elements."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2075,
											"name": "deleteCount",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of elements to remove."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2076,
											"name": "items",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Elements to insert into the array in place of the deleted elements.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.splice"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1277,
									"character": 10
								},
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1284,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.splice"
							}
						},
						{
							"id": 2039,
							"name": "toLocaleString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2040,
									"name": "toLocaleString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.toLocaleString"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1223,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.toLocaleString"
							}
						},
						{
							"id": 2037,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2038,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a string representation of an array."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.toString"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1219,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.toString"
							}
						},
						{
							"id": 2077,
							"name": "unshift",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2078,
									"name": "unshift",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inserts new elements at the start of an array."
									},
									"parameters": [
										{
											"id": 2079,
											"name": "items",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Elements to insert at the start of the Array.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.unshift"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 1289,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.unshift"
							}
						},
						{
							"id": 2246,
							"name": "values",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2247,
									"name": "values",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterable of values in the array"
									},
									"type": {
										"type": "reference",
										"name": "IterableIterator",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.values"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
									"line": 75,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Array.values"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2201,
								2035,
								2034,
								2036
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2240,
								2248,
								2046,
								2235,
								2242,
								2088,
								2230,
								2125,
								2202,
								2221,
								2106,
								2258,
								2080,
								2051,
								2244,
								2084,
								2115,
								2041,
								2043,
								2143,
								2171,
								2054,
								2056,
								2058,
								2097,
								2062,
								2069,
								2039,
								2037,
								2077,
								2246
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Command.ts",
							"line": 1834,
							"character": 24
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Array",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							]
						}
					]
				},
				{
					"id": 2030,
					"name": "SetContextMethod",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The method passed to Command `then` callbacks that can be used to manually\nset the Command chain context"
					},
					"signatures": [
						{
							"id": 2031,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The method passed to Command `then` callbacks that can be used to manually\nset the Command chain context"
							},
							"parameters": [
								{
									"id": 2032,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Element",
													"id": 1415
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Command.ts",
							"line": 1827,
							"character": 33
						}
					]
				},
				{
					"id": 2262,
					"name": "TOP_CONTEXT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/webdriver/Command.ts",
							"line": 1839,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "Context",
						"id": 2033
					},
					"defaultValue": " []"
				},
				{
					"id": 2263,
					"name": "chaiAsPromised",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isLet": true
					},
					"sources": [
						{
							"fileName": "src/webdriver/Command.ts",
							"line": 1843,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " null"
				},
				{
					"id": 2264,
					"name": "getParent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 2265,
							"name": "getParent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 2266,
									"name": "S",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 2267,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Command",
										"id": 1591,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											}
										]
									},
									{
										"type": "reference",
										"name": "Session",
										"id": 950
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Command.ts",
							"line": 1864,
							"character": 18
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1591
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2033,
						2030
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						2262,
						2263
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2264
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/Command.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1414,
			"name": "\"webdriver/Element\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/Element.ts",
			"children": [
				{
					"id": 1415,
					"name": "Element",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Element class represents a DOM or UI element within the remote\nenvironment."
					},
					"children": [
						{
							"id": 1416,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "constructor",
										"text": "module:leadfoot/Element\n"
									}
								]
							},
							"signatures": [
								{
									"id": 1417,
									"name": "new Element",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "constructor",
												"text": "module:leadfoot/Element\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1418,
											"name": "elementId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "\nThe ID of the element, as provided by the remote.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1419,
											"name": "session",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "\nThe session that the element belongs to.\n"
											},
											"type": {
												"type": "reference",
												"name": "Session",
												"id": 950
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Element",
										"id": 1415
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 21,
									"character": 28
								}
							]
						},
						{
							"id": 1420,
							"name": "elementId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The opaque, remote-provided ID of the element.",
								"tags": [
									{
										"tag": "member",
										"text": "elementId"
									},
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"getSignature": [
								{
									"id": 1421,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The opaque, remote-provided ID of the element.",
										"tags": [
											{
												"tag": "member",
												"text": "elementId"
											},
											{
												"tag": "readonly",
												"text": "\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 49,
									"character": 15
								}
							]
						},
						{
							"id": 1422,
							"name": "session",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The [[Session]] that the element belongs to.",
								"tags": [
									{
										"tag": "readonly",
										"text": "\n"
									}
								]
							},
							"getSignature": [
								{
									"id": 1423,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The [[Session]] that the element belongs to.",
										"tags": [
											{
												"tag": "readonly",
												"text": "\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Session",
										"id": 950
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 57,
									"character": 13
								}
							]
						},
						{
							"id": 1448,
							"name": "clearValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1449,
									"name": "clearValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears the value of a form element."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 408,
									"character": 12
								}
							]
						},
						{
							"id": 1437,
							"name": "click",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1438,
									"name": "click",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clicks the element. This method works on both mouse and touch platforms."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 244,
									"character": 7
								}
							]
						},
						{
							"id": 1464,
							"name": "equals",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1465,
									"name": "equals",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determines if this element is equal to another element."
									},
									"parameters": [
										{
											"id": 1466,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 552,
									"character": 8
								}
							]
						},
						{
							"id": 1429,
							"name": "find",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1430,
									"name": "find",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element within this element that matches the given query.",
										"text": "See [[Session.Session.setFindTimeout]] to set the amount of time it the\nremote environment should spend waiting for an element that does not\nexist at the time of the `find` call before timing out.\n"
									},
									"parameters": [
										{
											"id": 1431,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Session.Session.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1432,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Session.Session.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.find",
										"id": 802
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 141,
									"character": 6
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.find",
								"id": 802
							}
						},
						{
							"id": 1433,
							"name": "findAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1434,
									"name": "findAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements within this element that match the given query."
									},
									"parameters": [
										{
											"id": 1435,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Session.Session.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1436,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Session.Session.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Element",
													"id": 1415
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.findAll",
										"id": 806
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 205,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.findAll",
								"id": 806
							}
						},
						{
							"id": 1514,
							"name": "findAllByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1515,
									"name": "findAllByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS class name."
									},
									"parameters": [
										{
											"id": 1516,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByClassName",
										"id": 842
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 106,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByClassName",
								"id": 842
							}
						},
						{
							"id": 1517,
							"name": "findAllByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1518,
									"name": "findAllByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS selector."
									},
									"parameters": [
										{
											"id": 1519,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByCssSelector",
										"id": 845
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 115,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByCssSelector",
								"id": 845
							}
						},
						{
							"id": 1523,
							"name": "findAllByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1524,
									"name": "findAllByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1525,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByLinkText",
										"id": 851
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 134,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByLinkText",
								"id": 851
							}
						},
						{
							"id": 1520,
							"name": "findAllByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1521,
									"name": "findAllByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given name attribute."
									},
									"parameters": [
										{
											"id": 1522,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByName",
										"id": 848
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 124,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByName",
								"id": 848
							}
						},
						{
							"id": 1526,
							"name": "findAllByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1527,
									"name": "findAllByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1528,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByPartialLinkText",
										"id": 854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 144,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByPartialLinkText",
								"id": 854
							}
						},
						{
							"id": 1529,
							"name": "findAllByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1530,
									"name": "findAllByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given HTML tag name."
									},
									"parameters": [
										{
											"id": 1531,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByTagName",
										"id": 857
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 153,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByTagName",
								"id": 857
							}
						},
						{
							"id": 1532,
							"name": "findAllByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1533,
									"name": "findAllByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given XPath selector."
									},
									"parameters": [
										{
											"id": 1534,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByXpath",
										"id": 860
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 162,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByXpath",
								"id": 860
							}
						},
						{
							"id": 1490,
							"name": "findByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1491,
									"name": "findByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS class\nname."
									},
									"parameters": [
										{
											"id": 1492,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByClassName",
										"id": 818
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 28,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByClassName",
								"id": 818
							}
						},
						{
							"id": 1493,
							"name": "findByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1494,
									"name": "findByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS\nselector."
									},
									"parameters": [
										{
											"id": 1495,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByCssSelector",
										"id": 821
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 38,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByCssSelector",
								"id": 821
							}
						},
						{
							"id": 1496,
							"name": "findById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1497,
									"name": "findById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given ID."
									},
									"parameters": [
										{
											"id": 1498,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findById",
										"id": 824
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 47,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findById",
								"id": 824
							}
						},
						{
							"id": 1502,
							"name": "findByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1503,
									"name": "findByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1504,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByLinkText",
										"id": 830
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 67,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByLinkText",
								"id": 830
							}
						},
						{
							"id": 1499,
							"name": "findByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1500,
									"name": "findByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given name\nattribute."
									},
									"parameters": [
										{
											"id": 1501,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByName",
										"id": 827
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 57,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByName",
								"id": 827
							}
						},
						{
							"id": 1505,
							"name": "findByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1506,
									"name": "findByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1507,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByPartialLinkText",
										"id": 833
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 77,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByPartialLinkText",
								"id": 833
							}
						},
						{
							"id": 1508,
							"name": "findByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1509,
									"name": "findByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given HTML tag\nname."
									},
									"parameters": [
										{
											"id": 1510,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByTagName",
										"id": 836
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 87,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByTagName",
								"id": 836
							}
						},
						{
							"id": 1511,
							"name": "findByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1512,
									"name": "findByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given XPath\nselector."
									},
									"parameters": [
										{
											"id": 1513,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByXpath",
										"id": 839
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 97,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByXpath",
								"id": 839
							}
						},
						{
							"id": 1482,
							"name": "findDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1483,
									"name": "findDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.Element.isDisplayed|displayed]] element inside\nthis element matching the given query. This is inherently slower than\n[[Element.Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1484,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Session.Session.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1485,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Session.Session.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.findDisplayed",
										"id": 810
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 775,
									"character": 15
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.findDisplayed",
								"id": 810
							}
						},
						{
							"id": 1535,
							"name": "findDisplayedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1536,
									"name": "findDisplayedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS class name. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1537,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByClassName",
										"id": 863
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 175,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByClassName",
								"id": 863
							}
						},
						{
							"id": 1538,
							"name": "findDisplayedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1539,
									"name": "findDisplayedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS selector. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1540,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByCssSelector",
										"id": 866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 188,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByCssSelector",
								"id": 866
							}
						},
						{
							"id": 1541,
							"name": "findDisplayedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1542,
									"name": "findDisplayedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given ID. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1543,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedById",
										"id": 869
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 201,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedById",
								"id": 869
							}
						},
						{
							"id": 1547,
							"name": "findDisplayedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1548,
									"name": "findDisplayedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1549,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByLinkText",
										"id": 875
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 227,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByLinkText",
								"id": 875
							}
						},
						{
							"id": 1544,
							"name": "findDisplayedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1545,
									"name": "findDisplayedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given name attribute. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1546,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByName",
										"id": 872
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 214,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByName",
								"id": 872
							}
						},
						{
							"id": 1550,
							"name": "findDisplayedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1551,
									"name": "findDisplayedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement partially matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1552,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByPartialLinkText",
										"id": 878
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 240,
									"character": 32
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByPartialLinkText",
								"id": 878
							}
						},
						{
							"id": 1553,
							"name": "findDisplayedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1554,
									"name": "findDisplayedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given HTML tag name. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1555,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByTagName",
										"id": 881
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 253,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByTagName",
								"id": 881
							}
						},
						{
							"id": 1556,
							"name": "findDisplayedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1557,
									"name": "findDisplayedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given XPath selector. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1558,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByXpath",
										"id": 884
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 266,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByXpath",
								"id": 884
							}
						},
						{
							"id": 1457,
							"name": "getAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1458,
									"name": "getAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets an attribute of the element.",
										"text": "See [[Element.Element.getProperty]] to retrieve an element property.\n",
										"returns": "The value of the attribute, or `null` if no such attribute\nexists.\n"
									},
									"parameters": [
										{
											"id": 1459,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the attribute."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 516,
									"character": 14
								}
							]
						},
						{
							"id": 1479,
							"name": "getComputedStyle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1480,
									"name": "getComputedStyle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a CSS computed property value for the element."
									},
									"parameters": [
										{
											"id": 1481,
											"name": "propertyName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS property to retrieve. This argument must be\nhyphenated, *not* camel-case.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 707,
									"character": 18
								}
							]
						},
						{
							"id": 1469,
							"name": "getPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1470,
									"name": "getPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the position of the element relative to the top-left corner of the\ndocument, taking into account scrolling and CSS transformations (if they\nare supported)."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1471,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1472,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Element.ts",
																	"line": 629,
																	"character": 39
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1473,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Element.ts",
																	"line": 629,
																	"character": 50
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1472,
																1473
															]
														}
													],
													"sources": [
														{
															"fileName": "src/webdriver/Element.ts",
															"line": 629,
															"character": 36
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 629,
									"character": 13
								}
							]
						},
						{
							"id": 1460,
							"name": "getProperty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1461,
									"name": "getProperty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a property of the element.",
										"text": "See [[Element.Element.getAttribute]] to retrieve an element attribute.\n",
										"returns": "The value of the property.\n"
									},
									"typeParameter": [
										{
											"id": 1462,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1463,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the property."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 535,
									"character": 13
								}
							]
						},
						{
							"id": 1474,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1475,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the size of the element, taking into account CSS transformations\n(if they are supported)."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1476,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1478,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Element.ts",
																	"line": 663,
																	"character": 55
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1477,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Element.ts",
																	"line": 663,
																	"character": 39
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1478,
																1477
															]
														}
													],
													"sources": [
														{
															"fileName": "src/webdriver/Element.ts",
															"line": 663,
															"character": 32
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 663,
									"character": 9
								}
							]
						},
						{
							"id": 1454,
							"name": "getSpecAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1455,
									"name": "getSpecAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a property or attribute of the element according to the WebDriver\nspecification algorithm. Use of this method is not recommended; instead,\nuse [[Element.Element.getAttribute]] to retrieve DOM attributes and\n[[Element.Element.getProperty]] to retrieve DOM properties.",
										"text": "This method uses the following algorithm on the server to determine what\nvalue to return:\n\n1. If `name` is 'style', returns the `style.cssText` property of the\n   element.\n2. If the attribute exists and is a boolean attribute, returns 'true' if\n   the attribute is true, or null otherwise.\n3. If the element is an `<option>` element and `name` is 'value',\n   returns the `value` attribute if it exists, otherwise returns the\n   visible text content of the option.\n4. If the element is a checkbox or radio button and `name` is\n   'selected', returns 'true' if the element is checked, or null\n   otherwise.\n5. If the returned value is expected to be a URL (e.g. element is `<a>`\n   and attribute is `href`), returns the fully resolved URL from the\n   `href`/`src` property of the element, not the attribute.\n6. If `name` is 'class', returns the `className` property of the\n   element.\n7. If `name` is 'readonly', returns 'true' if the `readOnly` property is\n   true, or null otherwise.\n8. If `name` corresponds to a property of the element, and the property\n   is not an Object, return the property value coerced to a string.\n9. If `name` corresponds to an attribute of the element, return the\n   attribute value.\n",
										"returns": "The value of the attribute as a string, or `null` if no such\nproperty or attribute exists.\n"
									},
									"parameters": [
										{
											"id": 1456,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The property or attribute name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 471,
									"character": 18
								}
							]
						},
						{
							"id": 1446,
							"name": "getTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1447,
									"name": "getTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the tag name of the element. For HTML documents, the value is\nalways lowercase."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 389,
									"character": 12
								}
							]
						},
						{
							"id": 1441,
							"name": "getVisibleText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1442,
									"name": "getVisibleText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the visible text within the element. `<br>` elements are converted\nto line breaks in the returned text, and whitespace is normalised per\nthe usual XML/HTML whitespace normalisation rules."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 293,
									"character": 16
								}
							]
						},
						{
							"id": 1467,
							"name": "isDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1468,
									"name": "isDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not the element would be visible to an actual user.\nThis means that the following types of elements are considered to be not\ndisplayed:",
										"text": "1. Elements with `display: none`\n2. Elements with `visibility: hidden`\n3. Elements positioned outside of the viewport that cannot be scrolled\n   into view\n4. Elements with `opacity: 0`\n5. Elements with no `offsetWidth` or `offsetHeight`\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 588,
									"character": 13
								}
							]
						},
						{
							"id": 1452,
							"name": "isEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1453,
									"name": "isEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not a form element can be interacted with."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 424,
									"character": 11
								}
							]
						},
						{
							"id": 1450,
							"name": "isSelected",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1451,
									"name": "isSelected",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not a form element is currently selected (for\ndrop-down options and radio buttons), or whether or not the element is\ncurrently checked (for checkboxes)."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 417,
									"character": 12
								}
							]
						},
						{
							"id": 1439,
							"name": "submit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1440,
									"name": "submit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Submits the element, if it is a form, or the form belonging to the\nelement, if it is a form element."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 271,
									"character": 8
								}
							]
						},
						{
							"id": 1424,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1425,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1426,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1427,
													"name": "ELEMENT",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/webdriver/Element.ts",
															"line": 82,
															"character": 13
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": " this._elementId"
												},
												{
													"id": 1428,
													"name": "element-6066-11e4-a52e-4f735466cecf",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/webdriver/Element.ts",
															"line": 83,
															"character": 43
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": " this._elementId"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1427,
														1428
													]
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 79,
									"character": 8
								}
							]
						},
						{
							"id": 1443,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1444,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the element. This method works the same as the\n[[Session.Session.pressKeys]] method except that any modifier keys are\nautomatically released at the end of the command. This method should be\nused instead of [[Session.Session.pressKeys]] to type filenames into\nfile upload fields.",
										"text": "Since 1.5, if the WebDriver server supports remote file uploads, and you\ntype a path to a file on your local computer, that file will be\ntransparently uploaded to the remote server and the remote filename will\nbe typed instead. If you do not want to upload local files, use\n[[Session.Session.pressKeys]] instead.\n"
									},
									"parameters": [
										{
											"id": 1445,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type in the remote environment. See\n[[Session.Session.pressKeys]] for more information.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 328,
									"character": 6
								}
							]
						},
						{
							"id": 1486,
							"name": "waitForDeleted",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1487,
									"name": "waitForDeleted",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element that match the given query to\nbe destroyed."
									},
									"parameters": [
										{
											"id": 1488,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1489,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Session.Session.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.waitForDeleted",
										"id": 814
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Element.ts",
									"line": 789,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.waitForDeleted",
								"id": 814
							}
						},
						{
							"id": 1559,
							"name": "waitForDeletedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1560,
									"name": "waitForDeletedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS class\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 1561,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByClassName",
										"id": 887
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 276,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByClassName",
								"id": 887
							}
						},
						{
							"id": 1562,
							"name": "waitForDeletedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1563,
									"name": "waitForDeletedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 1564,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByCssSelector",
										"id": 890
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 286,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByCssSelector",
								"id": 890
							}
						},
						{
							"id": 1565,
							"name": "waitForDeletedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1566,
									"name": "waitForDeletedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given ID to be\ndestroyed."
									},
									"parameters": [
										{
											"id": 1567,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedById",
										"id": 893
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 296,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedById",
								"id": 893
							}
						},
						{
							"id": 1571,
							"name": "waitForDeletedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1572,
									"name": "waitForDeletedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 1573,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByLinkText",
										"id": 899
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 316,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByLinkText",
								"id": 899
							}
						},
						{
							"id": 1568,
							"name": "waitForDeletedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1569,
									"name": "waitForDeletedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given name\nattribute to be destroyed."
									},
									"parameters": [
										{
											"id": 1570,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByName",
										"id": 896
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 306,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByName",
								"id": 896
							}
						},
						{
							"id": 1574,
							"name": "waitForDeletedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1575,
									"name": "waitForDeletedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element partially matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 1576,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByPartialLinkText",
										"id": 902
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 326,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByPartialLinkText",
								"id": 902
							}
						},
						{
							"id": 1577,
							"name": "waitForDeletedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1578,
									"name": "waitForDeletedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given HTML tag\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 1579,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByTagName",
										"id": 905
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 336,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByTagName",
								"id": 905
							}
						},
						{
							"id": 1580,
							"name": "waitForDeletedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1581,
									"name": "waitForDeletedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given XPath\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 1582,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByXpath",
										"id": 908
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 346,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByXpath",
								"id": 908
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1416
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								1420,
								1422
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1448,
								1437,
								1464,
								1429,
								1433,
								1514,
								1517,
								1523,
								1520,
								1526,
								1529,
								1532,
								1490,
								1493,
								1496,
								1502,
								1499,
								1505,
								1508,
								1511,
								1482,
								1535,
								1538,
								1541,
								1547,
								1544,
								1550,
								1553,
								1556,
								1457,
								1479,
								1469,
								1460,
								1474,
								1454,
								1446,
								1441,
								1467,
								1452,
								1450,
								1439,
								1424,
								1443,
								1486,
								1559,
								1562,
								1565,
								1571,
								1568,
								1574,
								1577,
								1580
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Element.ts",
							"line": 15,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Locator",
							"id": 798,
							"typeArguments": [
								{
									"type": "reference",
									"name": "CancellablePromise",
									"id": 2,
									"typeArguments": [
										{
											"type": "reference",
											"name": "Element",
											"id": 1415
										}
									]
								},
								{
									"type": "reference",
									"name": "CancellablePromise",
									"id": 2,
									"typeArguments": [
										{
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "CancellablePromise",
									"id": 2,
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "void"
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 1585,
					"name": "ElementOrElementId",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/webdriver/Element.ts",
							"line": 799,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 1586,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1587,
											"name": "ELEMENT",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/webdriver/Element.ts",
													"line": 800,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												1587
											]
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/Element.ts",
											"line": 800,
											"character": 3
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1588,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1589,
											"name": "element-6066-11e4-a52e-4f735466cecf",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/webdriver/Element.ts",
													"line": 801,
													"character": 43
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												1589
											]
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/Element.ts",
											"line": 801,
											"character": 3
										}
									]
								}
							},
							{
								"type": "reference",
								"name": "Element",
								"id": 1415
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 1583,
					"name": "noop",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1584,
							"name": "noop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Element.ts",
							"line": 794,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1415
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1585
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1583
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/Element.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 693,
			"name": "\"webdriver/Server\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/Server.ts",
			"children": [
				{
					"id": 694,
					"name": "Server",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 699,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Server class represents a remote HTTP server implementing the\nWebDriver wire protocol that can be used to generate new remote control\nsessions."
							},
							"signatures": [
								{
									"id": 700,
									"name": "new Server",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "The Server class represents a remote HTTP server implementing the\nWebDriver wire protocol that can be used to generate new remote control\nsessions."
									},
									"parameters": [
										{
											"id": 701,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The fully qualified URL to the JsonWireProtocol endpoint on\nthe server. The default endpoint for a JsonWireProtocol HTTP server is\nhttp://localhost:4444/wd/hub. You may also pass a parsed URL object\nwhich will be converted to a string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "LeadfootURL",
														"id": 667
													}
												]
											}
										},
										{
											"id": 702,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Additional request options to be used for requests to the\nserver.\n"
											},
											"type": {
												"type": "reference",
												"name": "RequestOptions",
												"id": 245
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Server",
										"id": 694
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 42,
									"character": 55
								}
							]
						},
						{
							"id": 698,
							"name": "fixSessionCapabilities",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether or not to detect and/or correct environment capabilities when\ncreating a new Server. If the value is \"no-detect\", capabilities will be\nupdated with already-known features and defects based on the platform, but\nno tests will be run."
							},
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 42,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "no-detect"
									}
								]
							},
							"defaultValue": "true"
						},
						{
							"id": 696,
							"name": "requestOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 28,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "RequestOptions",
								"id": 245
							}
						},
						{
							"id": 697,
							"name": "sessionConstructor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An alternative session constructor. Defaults to the standard [[Session]]\nconstructor if one is not provided."
							},
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 34,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "Session",
								"id": 950
							},
							"defaultValue": " Session"
						},
						{
							"id": 695,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 26,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 723,
							"name": "createSession",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 724,
									"name": "createSession",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new remote control session on the remote server."
									},
									"typeParameter": [
										{
											"id": 725,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Session",
												"id": 950
											}
										}
									],
									"parameters": [
										{
											"id": 726,
											"name": "desiredCapabilities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A hash map of desired capabilities of the\nremote environment. The server may return an environment that does not\nmatch all the desired capabilities if one is not available.\n"
											},
											"type": {
												"type": "reference",
												"name": "Capabilities",
												"id": 561
											}
										},
										{
											"id": 727,
											"name": "requiredCapabilities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A hash map of required capabilities of the\nremote environment. The server will not return an environment that does\nnot match all the required capabilities if one is not available.\n"
											},
											"type": {
												"type": "reference",
												"name": "Capabilities",
												"id": 561
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "S",
												"constraint": {
													"type": "reference",
													"name": "Session",
													"id": 950
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 400,
									"character": 15
								}
							]
						},
						{
							"id": 715,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 716,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 717,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 718,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 719,
											"name": "requestData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										},
										{
											"id": 720,
											"name": "pathParts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 371,
									"character": 8
								}
							]
						},
						{
							"id": 733,
							"name": "deleteSession",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 734,
									"name": "deleteSession",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Terminates a session on the server."
									},
									"parameters": [
										{
											"id": 735,
											"name": "sessionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 1860,
									"character": 15
								}
							]
						},
						{
							"id": 703,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 704,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 705,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 706,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 707,
											"name": "requestData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										},
										{
											"id": 708,
											"name": "pathParts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 355,
									"character": 5
								}
							]
						},
						{
							"id": 730,
							"name": "getSessionCapabilities",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 731,
									"name": "getSessionCapabilities",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets information on the capabilities of a given session from the server.\nThe list of capabilities returned by this command will not include any\nof the extra session capabilities detected by Leadfoot and may be\ninaccurate."
									},
									"parameters": [
										{
											"id": 732,
											"name": "sessionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Capabilities",
												"id": 561
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 1853,
									"character": 24
								}
							]
						},
						{
							"id": 728,
							"name": "getSessions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 729,
									"name": "getSessions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of all currently active remote control sessions on this\nserver."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Session",
													"id": 950
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 1827,
									"character": 13
								}
							]
						},
						{
							"id": 721,
							"name": "getStatus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 722,
									"name": "getStatus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the status of the remote server.",
										"returns": "An object containing arbitrary properties describing the status\nof the remote server.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 385,
									"character": 11
								}
							]
						},
						{
							"id": 709,
							"name": "post",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 710,
									"name": "post",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 711,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 712,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 713,
											"name": "requestData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										},
										{
											"id": 714,
											"name": "pathParts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 363,
									"character": 6
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								699
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								698,
								696,
								697,
								695
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								723,
								715,
								733,
								703,
								730,
								728,
								721,
								709
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 25,
							"character": 27
						}
					]
				},
				{
					"id": 736,
					"name": "ResponseData",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 738,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 2025,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 737,
							"name": "response",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/webdriver/Server.ts",
									"line": 2024,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Response",
								"id": 279
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								738,
								737
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 2023,
							"character": 22
						}
					]
				},
				{
					"id": 742,
					"name": "getErrorName",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 743,
							"name": "getErrorName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 744,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 745,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 747,
													"name": "detail",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/webdriver/Server.ts",
															"line": 1865,
															"character": 51
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 748,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 749,
																	"name": "error",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/webdriver/Server.ts",
																			"line": 1865,
																			"character": 60
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		749
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/webdriver/Server.ts",
																	"line": 1865,
																	"character": 52
																}
															]
														}
													}
												},
												{
													"id": 746,
													"name": "name",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/webdriver/Server.ts",
															"line": 1865,
															"character": 35
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														747,
														746
													]
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/Server.ts",
													"line": 1865,
													"character": 28
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1865,
							"character": 21
						}
					]
				},
				{
					"id": 750,
					"name": "isAndroid",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 751,
							"name": "isAndroid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 752,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1893,
							"character": 18
						}
					]
				},
				{
					"id": 753,
					"name": "isAndroidEmulator",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 754,
							"name": "isAndroidEmulator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 755,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1898,
							"character": 26
						}
					]
				},
				{
					"id": 756,
					"name": "isChrome",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 757,
							"name": "isChrome",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 758,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								},
								{
									"id": 759,
									"name": "minOrExactVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 760,
									"name": "maxVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1903,
							"character": 17
						}
					]
				},
				{
					"id": 782,
					"name": "isFirefox",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 783,
							"name": "isFirefox",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 784,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								},
								{
									"id": 785,
									"name": "minOrExactVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 786,
									"name": "maxVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1968,
							"character": 25
						}
					]
				},
				{
					"id": 772,
					"name": "isInternetExplorer",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 773,
							"name": "isInternetExplorer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 774,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								},
								{
									"id": 775,
									"name": "minOrExactVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 776,
									"name": "maxVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1942,
							"character": 34
						}
					]
				},
				{
					"id": 761,
					"name": "isIos",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 762,
							"name": "isIos",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 763,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1915,
							"character": 14
						}
					]
				},
				{
					"id": 739,
					"name": "isLeadfootURL",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 740,
							"name": "isLeadfootURL",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 741,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"name": "LeadfootURL"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 18,
							"character": 22
						}
					]
				},
				{
					"id": 764,
					"name": "isMac",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 765,
							"name": "isMac",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 766,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1920,
							"character": 14
						}
					]
				},
				{
					"id": 767,
					"name": "isMsEdge",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 768,
							"name": "isMsEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 769,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								},
								{
									"id": 770,
									"name": "minOrExactVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 771,
									"name": "maxVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1929,
							"character": 24
						}
					]
				},
				{
					"id": 777,
					"name": "isSafari",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 778,
							"name": "isSafari",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 779,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								},
								{
									"id": 780,
									"name": "minOrExactVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 781,
									"name": "maxVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1955,
							"character": 24
						}
					]
				},
				{
					"id": 787,
					"name": "isValidVersion",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 788,
							"name": "isValidVersion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if a browserVersion is between a min (inclusive) and a max\n(exclusive). If only one version is specified, it is treated as an exact\nmatch."
							},
							"parameters": [
								{
									"id": 789,
									"name": "capabilities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								},
								{
									"id": 790,
									"name": "minOrExactVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 791,
									"name": "maxVersion",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 1986,
							"character": 23
						}
					]
				},
				{
					"id": 792,
					"name": "noop",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 793,
							"name": "noop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 2011,
							"character": 13
						}
					]
				},
				{
					"id": 794,
					"name": "returnValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 795,
							"name": "returnValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the actual response value from the remote environment.",
								"returns": "The actual response value.\n"
							},
							"parameters": [
								{
									"id": 796,
									"name": "response",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "JsonWireProtocol response object."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Server.ts",
							"line": 2019,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						694
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						736
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						742,
						750,
						753,
						756,
						782,
						772,
						761,
						739,
						764,
						767,
						777,
						787,
						792,
						794
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/Server.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 949,
			"name": "\"webdriver/Session\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/Session.ts",
			"children": [
				{
					"id": 950,
					"name": "Session",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Session represents a connection to a remote environment that can be driven\nprogrammatically."
					},
					"children": [
						{
							"id": 951,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A Session represents a connection to a remote environment that can be\ndriven programmatically."
							},
							"signatures": [
								{
									"id": 952,
									"name": "new Session",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "A Session represents a connection to a remote environment that can be\ndriven programmatically."
									},
									"parameters": [
										{
											"id": 953,
											"name": "sessionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ID of the session, as provided by the remote."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 954,
											"name": "server",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The server that the session belongs to."
											},
											"type": {
												"type": "reference",
												"name": "Server",
												"id": 694
											}
										},
										{
											"id": 955,
											"name": "capabilities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A map of bugs and features that the remote\nenvironment exposes.\n"
											},
											"type": {
												"type": "reference",
												"name": "Capabilities",
												"id": 561
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Session",
										"id": 950
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 42,
									"character": 60
								}
							]
						},
						{
							"id": 956,
							"name": "capabilities",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Information about the available features and bugs in the remote\nenvironment."
							},
							"getSignature": [
								{
									"id": 957,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Information about the available features and bugs in the remote\nenvironment."
									},
									"type": {
										"type": "reference",
										"name": "Capabilities",
										"id": 561
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 71,
									"character": 18
								}
							]
						},
						{
							"id": 960,
							"name": "server",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Server that the session runs on."
							},
							"getSignature": [
								{
									"id": 961,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The Server that the session runs on."
									},
									"type": {
										"type": "reference",
										"name": "Server",
										"id": 694
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 85,
									"character": 12
								}
							]
						},
						{
							"id": 958,
							"name": "sessionId",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The current session ID."
							},
							"getSignature": [
								{
									"id": 959,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The current session ID."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 78,
									"character": 15
								}
							]
						},
						{
							"id": 1118,
							"name": "acceptAlert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1119,
									"name": "acceptAlert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Accepts an alert, prompt, or confirmation pop-up. Equivalent to clicking\nthe 'OK' button."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1465,
									"character": 13
								}
							]
						},
						{
							"id": 1022,
							"name": "activateIme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1023,
									"name": "activateIme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Activates an input method editor in the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"parameters": [
										{
											"id": 1024,
											"name": "engine",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of IME to activate.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 569,
									"character": 13
								}
							]
						},
						{
							"id": 1086,
							"name": "clearCookies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1087,
									"name": "clearCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all cookies for the current page."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1124,
									"character": 14
								}
							]
						},
						{
							"id": 1201,
							"name": "clearLocalStorage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1202,
									"name": "clearLocalStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all data in local storage for the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2008,
									"character": 19
								}
							]
						},
						{
							"id": 1217,
							"name": "clearSessionStorage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1218,
									"name": "clearSessionStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all data in session storage for the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2059,
									"character": 21
								}
							]
						},
						{
							"id": 1131,
							"name": "clickMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1132,
									"name": "clickMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clicks a mouse button at the point where the mouse cursor is currently\npositioned. This method may fail to execute with an error if the mouse\nhas not been moved anywhere since the page was loaded."
									},
									"parameters": [
										{
											"id": 1133,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to click. 0 corresponds to the primary mouse\nbutton, 1 to the middle mouse button, 2 to the secondary mouse button.\nNumbers above 2 correspond to any additional buttons a mouse might\nprovide.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1586,
									"character": 18
								}
							]
						},
						{
							"id": 1033,
							"name": "closeCurrentWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1034,
									"name": "closeCurrentWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes the currently focused window. In most environments, after the\nwindow has been closed, it is necessary to explicitly switch to whatever\nwindow is now focused."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 670,
									"character": 20
								}
							]
						},
						{
							"id": 1020,
							"name": "deactivateIme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1021,
									"name": "deactivateIme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deactivates any active input method editor in the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 559,
									"character": 15
								}
							]
						},
						{
							"id": 1088,
							"name": "deleteCookie",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1089,
									"name": "deleteCookie",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a cookie on the current page."
									},
									"parameters": [
										{
											"id": 1090,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the cookie to delete.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1159,
									"character": 14
								}
							]
						},
						{
							"id": 1206,
							"name": "deleteLocalStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1207,
									"name": "deleteLocalStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a value from local storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 1208,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key of the data to delete.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2026,
									"character": 24
								}
							]
						},
						{
							"id": 1222,
							"name": "deleteSessionStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1223,
									"name": "deleteSessionStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a value from session storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 1224,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key of the data to delete.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2077,
									"character": 26
								}
							]
						},
						{
							"id": 1120,
							"name": "dismissAlert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1121,
									"name": "dismissAlert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dismisses an alert, prompt, or confirmation pop-up. Equivalent to\nclicking the 'OK' button of an alert pop-up or the 'Cancel' button of a\nprompt or confirmation pop-up."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1474,
									"character": 14
								}
							]
						},
						{
							"id": 1140,
							"name": "doubleClick",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1141,
									"name": "doubleClick",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Double-clicks the primary mouse button."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1655,
									"character": 13
								}
							]
						},
						{
							"id": 1165,
							"name": "doubleTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 1166,
									"name": "doubleTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a double-tap gesture on an element."
									},
									"parameters": [
										{
											"id": 1167,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The element to double-tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1802,
									"character": 11
								}
							]
						},
						{
							"id": 1002,
							"name": "execute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1003,
									"name": "execute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes JavaScript code within the focused window/frame. The code\nshould return a value synchronously.",
										"text": "See [[Session.Session.executeAsync]] to execute code that returns values\nasynchronously.\n",
										"returns": "The value returned by the remote code. Only values that can be\nserialised to JSON, plus DOM elements, can be returned.\n"
									},
									"typeParameter": [
										{
											"id": 1004,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1005,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code to execute. This function will always be\nconverted to a string, sent to the remote environment, and reassembled\nas a new anonymous function on the remote end. This means that you\ncannot access any variables through closure. If your code needs to get\ndata from variables on the local end, they should be passed using\n`args`.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Function"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1006,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An array of arguments that will be passed to the executed\ncode. Only values that can be serialised to JSON, plus\n[[Element.Element]] objects, can be specified as arguments.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 414,
									"character": 9
								}
							]
						},
						{
							"id": 1007,
							"name": "executeAsync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1008,
									"name": "executeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes JavaScript code within the focused window/frame. The code must\ninvoke the provided callback in order to signal that it has completed\nexecution.",
										"text": "See [[Session.Session.execute]] to execute code that returns values\nsynchronously.\n\nSee [[Session.Session.setExecuteAsyncTimeout]] to set the time until an\nasynchronous script is considered timed out.\n",
										"returns": "The value returned by the remote code. Only values that can be\nserialised to JSON, plus DOM elements, can be returned.\n"
									},
									"typeParameter": [
										{
											"id": 1009,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1010,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code to execute. This function will always be\nconverted to a string, sent to the remote environment, and reassembled\nas a new anonymous function on the remote end. This means that you\ncannot access any variables through closure. If your code needs to get\ndata from variables on the local end, they should be passed using\n`args`.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Function"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1011,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An array of arguments that will be passed to the executed\ncode. Only values that can be serialised to JSON, plus\n[[Element.Element]] objects, can be specified as arguments. In addition\nto these arguments, a callback function will always be passed as the\nfinal argument to the function specified in `script`. This callback\nfunction must be invoked in order to signal that execution has\ncompleted. The return value of the execution, if any, should be passed\nto this callback function.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 479,
									"character": 14
								}
							]
						},
						{
							"id": 1095,
							"name": "find",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1096,
									"name": "find",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element from the focused window/frame that matches the\ngiven query.",
										"text": "See [[Session.Session.setFindTimeout]] to set the amount of time it the\nremote environment should spend waiting for an element that does not\nexist at the time of the `find` call before timing out.\n"
									},
									"parameters": [
										{
											"id": 1097,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. One of 'class name',\n'css selector', 'id', 'name', 'link text', 'partial link text', 'tag\nname', 'xpath'.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1098,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. For example, if\n`using` is 'id', `value` should be the ID of the element to retrieve.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.find",
										"id": 802
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1237,
									"character": 6
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.find",
								"id": 802
							}
						},
						{
							"id": 1099,
							"name": "findAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1100,
									"name": "findAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets an array of elements from the focused window/frame that match the\ngiven query."
									},
									"parameters": [
										{
											"id": 1101,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Session.Session.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1102,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Session.Session.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Element",
													"id": 1415
												}
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.findAll",
										"id": 806
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1293,
									"character": 9
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.findAll",
								"id": 806
							}
						},
						{
							"id": 1274,
							"name": "findAllByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1275,
									"name": "findAllByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS class name."
									},
									"parameters": [
										{
											"id": 1276,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByClassName",
										"id": 842
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 106,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByClassName",
								"id": 842
							}
						},
						{
							"id": 1277,
							"name": "findAllByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1278,
									"name": "findAllByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS selector."
									},
									"parameters": [
										{
											"id": 1279,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByCssSelector",
										"id": 845
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 115,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByCssSelector",
								"id": 845
							}
						},
						{
							"id": 1283,
							"name": "findAllByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1284,
									"name": "findAllByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1285,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByLinkText",
										"id": 851
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 134,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByLinkText",
								"id": 851
							}
						},
						{
							"id": 1280,
							"name": "findAllByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1281,
									"name": "findAllByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given name attribute."
									},
									"parameters": [
										{
											"id": 1282,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByName",
										"id": 848
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 124,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByName",
								"id": 848
							}
						},
						{
							"id": 1286,
							"name": "findAllByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1287,
									"name": "findAllByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1288,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByPartialLinkText",
										"id": 854
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 144,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByPartialLinkText",
								"id": 854
							}
						},
						{
							"id": 1289,
							"name": "findAllByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1290,
									"name": "findAllByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given HTML tag name."
									},
									"parameters": [
										{
											"id": 1291,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByTagName",
										"id": 857
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 153,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByTagName",
								"id": 857
							}
						},
						{
							"id": 1292,
							"name": "findAllByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1293,
									"name": "findAllByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given XPath selector."
									},
									"parameters": [
										{
											"id": 1294,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findAllByXpath",
										"id": 860
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 162,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findAllByXpath",
								"id": 860
							}
						},
						{
							"id": 1250,
							"name": "findByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1251,
									"name": "findByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS class\nname."
									},
									"parameters": [
										{
											"id": 1252,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByClassName",
										"id": 818
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 28,
									"character": 17
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByClassName",
								"id": 818
							}
						},
						{
							"id": 1253,
							"name": "findByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1254,
									"name": "findByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS\nselector."
									},
									"parameters": [
										{
											"id": 1255,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByCssSelector",
										"id": 821
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 38,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByCssSelector",
								"id": 821
							}
						},
						{
							"id": 1256,
							"name": "findById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1257,
									"name": "findById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given ID."
									},
									"parameters": [
										{
											"id": 1258,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findById",
										"id": 824
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 47,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findById",
								"id": 824
							}
						},
						{
							"id": 1262,
							"name": "findByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1263,
									"name": "findByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1264,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByLinkText",
										"id": 830
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 67,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByLinkText",
								"id": 830
							}
						},
						{
							"id": 1259,
							"name": "findByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1260,
									"name": "findByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given name\nattribute."
									},
									"parameters": [
										{
											"id": 1261,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByName",
										"id": 827
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 57,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByName",
								"id": 827
							}
						},
						{
							"id": 1265,
							"name": "findByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1266,
									"name": "findByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 1267,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByPartialLinkText",
										"id": 833
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 77,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByPartialLinkText",
								"id": 833
							}
						},
						{
							"id": 1268,
							"name": "findByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1269,
									"name": "findByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given HTML tag\nname."
									},
									"parameters": [
										{
											"id": 1270,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByTagName",
										"id": 836
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 87,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByTagName",
								"id": 836
							}
						},
						{
							"id": 1271,
							"name": "findByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1272,
									"name": "findByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given XPath\nselector."
									},
									"parameters": [
										{
											"id": 1273,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findByXpath",
										"id": 839
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 97,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findByXpath",
								"id": 839
							}
						},
						{
							"id": 1227,
							"name": "findDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1228,
									"name": "findDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.Element.isDisplayed|displayed]] element in the\ncurrently active window/frame matching the given query. This is\ninherently slower than [[Session.Session.find]], so should only be used\nin cases where the visibility of an element cannot be ensured in\nadvance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1229,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Session.Session.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1230,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Session.Session.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.findDisplayed",
										"id": 810
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2104,
									"character": 15
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.findDisplayed",
								"id": 810
							}
						},
						{
							"id": 1295,
							"name": "findDisplayedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1296,
									"name": "findDisplayedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS class name. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1297,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByClassName",
										"id": 863
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 175,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByClassName",
								"id": 863
							}
						},
						{
							"id": 1298,
							"name": "findDisplayedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1299,
									"name": "findDisplayedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS selector. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1300,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByCssSelector",
										"id": 866
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 188,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByCssSelector",
								"id": 866
							}
						},
						{
							"id": 1301,
							"name": "findDisplayedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1302,
									"name": "findDisplayedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given ID. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1303,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedById",
										"id": 869
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 201,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedById",
								"id": 869
							}
						},
						{
							"id": 1307,
							"name": "findDisplayedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1308,
									"name": "findDisplayedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1309,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByLinkText",
										"id": 875
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 227,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByLinkText",
								"id": 875
							}
						},
						{
							"id": 1304,
							"name": "findDisplayedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1305,
									"name": "findDisplayedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given name attribute. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1306,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByName",
										"id": 872
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 214,
									"character": 21
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByName",
								"id": 872
							}
						},
						{
							"id": 1310,
							"name": "findDisplayedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1311,
									"name": "findDisplayedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement partially matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1312,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByPartialLinkText",
										"id": 878
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 240,
									"character": 32
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByPartialLinkText",
								"id": 878
							}
						},
						{
							"id": 1313,
							"name": "findDisplayedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1314,
									"name": "findDisplayedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given HTML tag name. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1315,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByTagName",
										"id": 881
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 253,
									"character": 24
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByTagName",
								"id": 881
							}
						},
						{
							"id": 1316,
							"name": "findDisplayedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1317,
									"name": "findDisplayedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given XPath selector. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 1318,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.findDisplayedByXpath",
										"id": 884
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 266,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.findDisplayedByXpath",
								"id": 884
							}
						},
						{
							"id": 1171,
							"name": "flickFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 1172,
									"name": "flickFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Flicks a finger. Note that this method is currently badly specified and\nhighly dysfunctional and is only provided for the sake of completeness."
									},
									"parameters": [
										{
											"id": 1173,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element where the flick should start."
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 1174,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The x-offset in pixels to flick by."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1175,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The x-offset in pixels to flick by."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1176,
											"name": "speed",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The speed of the flick, in pixels per *second*. Most human\nflicks are 100–200ms, so this value will be higher than expected.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								},
								{
									"id": 1177,
									"name": "flickFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1178,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1179,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1180,
											"name": "speed",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1830,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1836,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1842,
									"character": 13
								}
							]
						},
						{
							"id": 993,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 994,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame to a new URL."
									},
									"parameters": [
										{
											"id": 995,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 352,
									"character": 5
								}
							]
						},
						{
							"id": 1103,
							"name": "getActiveElement",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ createsContext: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 1104,
									"name": "getActiveElement",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the currently focused element from the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1344,
									"character": 18
								}
							]
						},
						{
							"id": 1016,
							"name": "getActiveImeEngine",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1017,
									"name": "getActiveImeEngine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the currently active input method editor for the remote environment.\nAs of April 2014, no known remote environments support IME functions."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 542,
									"character": 20
								}
							]
						},
						{
							"id": 1113,
							"name": "getAlertText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1114,
									"name": "getAlertText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the text displayed in the currently active alert pop-up."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1442,
									"character": 14
								}
							]
						},
						{
							"id": 989,
							"name": "getAllWindowHandles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 990,
									"name": "getAllWindowHandles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of identifiers for all currently open windows."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 315,
									"character": 21
								}
							]
						},
						{
							"id": 1191,
							"name": "getApplicationCacheStatus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1192,
									"name": "getApplicationCacheStatus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current state of the HTML5 application cache for the current\npage.",
										"returns": "The cache status. One of 0 (uncached), 1 (cached/idle), 2\n(checking), 3 (downloading), 4 (update ready), 5 (obsolete).\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1976,
									"character": 27
								}
							]
						},
						{
							"id": 1014,
							"name": "getAvailableImeEngines",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1015,
									"name": "getAvailableImeEngines",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of input method editor engines available to the remote\nenvironment. As of April 2014, no known remote environments support IME\nfunctions."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 534,
									"character": 24
								}
							]
						},
						{
							"id": 1189,
							"name": "getAvailableLogTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1190,
									"name": "getAvailableLogTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the types of logs that are currently available for retrieval from\nthe remote environment."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1961,
									"character": 22
								}
							]
						},
						{
							"id": 1081,
							"name": "getCookies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1082,
									"name": "getCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all cookies set on the current page."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1032,
									"character": 12
								}
							]
						},
						{
							"id": 991,
							"name": "getCurrentUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 992,
									"name": "getCurrentUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the URL that is loaded in the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 345,
									"character": 15
								}
							]
						},
						{
							"id": 987,
							"name": "getCurrentWindowHandle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 988,
									"name": "getCurrentWindowHandle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the identifier for the window that is currently focused.",
										"returns": "A window handle identifier that can be used with other window\nhandling functions.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 277,
									"character": 24
								}
							]
						},
						{
							"id": 1235,
							"name": "getExecuteAsyncTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1236,
									"name": "getExecuteAsyncTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Session.Session.executeAsync]] calls."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2125,
									"character": 24
								}
							]
						},
						{
							"id": 1240,
							"name": "getFindTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1241,
									"name": "getFindTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Session.Session.find]] calls."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2141,
									"character": 16
								}
							]
						},
						{
							"id": 1181,
							"name": "getGeolocation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1182,
									"name": "getGeolocation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current geographical location of the remote environment.",
										"returns": "Latitude and longitude are specified using standard WGS84\ndecimal latitude/longitude. Altitude is specified as meters above the\nWGS84 ellipsoid. Not all environments support altitude.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Geolocation",
												"id": 652
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1874,
									"character": 16
								}
							]
						},
						{
							"id": 1203,
							"name": "getLocalStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1204,
									"name": "getLocalStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a value from local storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 1205,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key of the data to get.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2017,
									"character": 21
								}
							]
						},
						{
							"id": 1195,
							"name": "getLocalStorageKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1196,
									"name": "getLocalStorageKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the list of keys set in local storage for the focused window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1991,
									"character": 21
								}
							]
						},
						{
							"id": 1209,
							"name": "getLocalStorageLength",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1210,
									"name": "getLocalStorageLength",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the number of keys set in local storage for the focused\nwindow/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2034,
									"character": 23
								}
							]
						},
						{
							"id": 1186,
							"name": "getLogsFor",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1187,
									"name": "getLogsFor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all logs from the remote environment of the given type. The logs in\nthe remote environment are cleared once they have been retrieved.",
										"returns": "An array of log entry objects. Timestamps in log entries are\nUnix timestamps, in seconds.\n"
									},
									"parameters": [
										{
											"id": 1188,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of log entries to retrieve. Available log types\ndiffer between remote environments. Use\n[[Session.Session.getAvailableLogTypes]] to learn what log types are\ncurrently available. Not all environments support all possible log\ntypes.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogEntry",
													"id": 656
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1919,
									"character": 12
								}
							]
						},
						{
							"id": 1108,
							"name": "getOrientation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1109,
									"name": "getOrientation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current screen orientation.",
										"returns": "Either 'portrait' or 'landscape'.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1418,
									"character": 16
								}
							]
						},
						{
							"id": 1245,
							"name": "getPageLoadTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1246,
									"name": "getPageLoadTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the timeout for [[Session.Session.get]] calls."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2157,
									"character": 20
								}
							]
						},
						{
							"id": 1091,
							"name": "getPageSource",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1092,
									"name": "getPageSource",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the HTML loaded in the focused window/frame. This markup is\nserialised by the remote environment so may not exactly match the HTML\nprovided by the Web server."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1202,
									"character": 15
								}
							]
						},
						{
							"id": 1093,
							"name": "getPageTitle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1094,
									"name": "getPageTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the title of the top-level browsing context of the current window\nor tab."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1218,
									"character": 14
								}
							]
						},
						{
							"id": 1219,
							"name": "getSessionStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1220,
									"name": "getSessionStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a value from session storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 1221,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key of the data to get.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2068,
									"character": 23
								}
							]
						},
						{
							"id": 1211,
							"name": "getSessionStorageKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1212,
									"name": "getSessionStorageKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the list of keys set in session storage for the focused\nwindow/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2042,
									"character": 23
								}
							]
						},
						{
							"id": 1225,
							"name": "getSessionStorageLength",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1226,
									"name": "getSessionStorageLength",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the number of keys set in session storage for the focused\nwindow/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2085,
									"character": 25
								}
							]
						},
						{
							"id": 980,
							"name": "getTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 981,
									"name": "getTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current value of a timeout for the session.",
										"returns": "The timeout, in milliseconds.\n"
									},
									"parameters": [
										{
											"id": 982,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of timeout to retrieve. One of 'script',\n'implicit', or 'page load'."
											},
											"type": {
												"type": "reference",
												"name": "Timeout",
												"id": 1380
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 193,
									"character": 12
								}
							]
						},
						{
							"id": 1072,
							"name": "getWindowPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1073,
									"name": "getWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the position of a window.",
										"text": "Note that this method is not part of the W3C WebDriver standard.\n",
										"returns": "An object describing the position of the window, in CSS pixels,\nrelative to the top-left corner of the primary monitor. If a secondary\nmonitor exists above or to the left of the primary monitor, these values\nwill be negative.\n"
									},
									"parameters": [
										{
											"id": 1074,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the window to query. See\n[[Session.Session.switchToWindow]] to learn about valid window names.\nOmit this argument to query the currently focused window.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1075,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1076,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 940,
																	"character": 20
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1077,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 940,
																	"character": 23
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1076,
																1077
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 936,
									"character": 19
								}
							]
						},
						{
							"id": 1049,
							"name": "getWindowRect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1050,
									"name": "getWindowRect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return the current window's rectangle (size and position)."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1051,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1053,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 834,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1052,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 833,
																	"character": 11
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1054,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 835,
																	"character": 7
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1055,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 836,
																	"character": 7
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1053,
																1052,
																1054,
																1055
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 831,
									"character": 15
								}
							]
						},
						{
							"id": 1043,
							"name": "getWindowSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1044,
									"name": "getWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the dimensions of a window.",
										"returns": "An object describing the width and height of the window, in CSS\npixels.\n"
									},
									"parameters": [
										{
											"id": 1045,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the window to query. See\n[[Session.Session.switchToWindow]] to learn about valid window names.\nOmit this argument to query the currently focused window.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1046,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1048,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 786,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															},
															"defaultValue": " rect.height"
														},
														{
															"id": 1047,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 785,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															},
															"defaultValue": " rect.width"
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1048,
																1047
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 781,
									"character": 15
								}
							]
						},
						{
							"id": 998,
							"name": "goBack",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 999,
									"name": "goBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame back one page using the browser’s\nnavigation history."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 376,
									"character": 8
								}
							]
						},
						{
							"id": 996,
							"name": "goForward",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 997,
									"name": "goForward",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates the focused window/frame forward one page using the browser’s\nnavigation history."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 366,
									"character": 11
								}
							]
						},
						{
							"id": 1018,
							"name": "isImeActivated",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1019,
									"name": "isImeActivated",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not an input method editor is currently active in the\nremote environment. As of April 2014, no known remote environments\nsupport IME functions."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 551,
									"character": 16
								}
							]
						},
						{
							"id": 1168,
							"name": "longTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 1169,
									"name": "longTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a long-tap gesture on an element."
									},
									"parameters": [
										{
											"id": 1170,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The element to long-tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1815,
									"character": 9
								}
							]
						},
						{
							"id": 1078,
							"name": "maximizeWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1079,
									"name": "maximizeWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Maximises a window according to the platform’s window system behaviour."
									},
									"parameters": [
										{
											"id": 1080,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the window to resize. See\n[[Session.Session.switchToWindow]] to learn about valid window names.\nOmit this argument to resize the currently focused window.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 996,
									"character": 16
								}
							]
						},
						{
							"id": 1153,
							"name": "moveFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1154,
									"name": "moveFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the last depressed finger to a new point on the touch screen."
									},
									"parameters": [
										{
											"id": 1155,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to move to, maybe in device pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1156,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to move to, maybe in device pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1729,
									"character": 12
								}
							]
						},
						{
							"id": 1122,
							"name": "moveMouseTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 1123,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves the remote environment’s mouse cursor to the specified element or\nrelative position. If the element is outside of the viewport, the remote\ndriver will attempt to scroll it into view automatically."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								},
								{
									"id": 1124,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1125,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 1126,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								},
								{
									"id": 1127,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1128,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 1129,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 1130,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1499,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1500,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1501,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1507,
									"character": 13
								}
							]
						},
						{
							"id": 1145,
							"name": "pressFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1146,
									"name": "pressFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Depresses a new finger at the given point on a touch screen device\nwithout releasing it."
									},
									"parameters": [
										{
											"id": 1147,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to press, maybe in device pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1148,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to press, maybe in device pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1703,
									"character": 13
								}
							]
						},
						{
							"id": 1105,
							"name": "pressKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1106,
									"name": "pressKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the focused window/frame/element."
									},
									"parameters": [
										{
											"id": 1107,
											"name": "keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type in the remote environment. It is possible\nto type keys that do not have normal character representations (modifier\nkeys, function keys, etc.) as well as keys that have two different\nrepresentations on a typical US-ASCII keyboard (numpad keys); use the\nvalues from [[keys]] to type these special characters. Any modifier keys\nthat are activated by this call will persist until they are deactivated.\nTo deactivate a modifier key, type the same modifier key a second time,\nor send `\\uE000` ('NULL') to deactivate all currently active modifier\nkeys.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1399,
									"character": 11
								}
							]
						},
						{
							"id": 1134,
							"name": "pressMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1135,
									"name": "pressMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Depresses a mouse button without releasing it."
									},
									"parameters": [
										{
											"id": 1136,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to press. See [[Session.Session.click]] for\navailable options.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1614,
									"character": 18
								}
							]
						},
						{
							"id": 1193,
							"name": "quit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1194,
									"name": "quit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Terminates the session. No more commands will be accepted by the remote\nafter this point."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1984,
									"character": 6
								}
							]
						},
						{
							"id": 1000,
							"name": "refresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1001,
									"name": "refresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reloads the current browser window/frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 385,
									"character": 9
								}
							]
						},
						{
							"id": 1149,
							"name": "releaseFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1150,
									"name": "releaseFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Releases whatever finger exists at the given point on a touch screen\ndevice."
									},
									"parameters": [
										{
											"id": 1151,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate where a finger is pressed, maybe in\ndevice pixels."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1152,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate where a finger is pressed, maybe in\ndevice pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1719,
									"character": 15
								}
							]
						},
						{
							"id": 1137,
							"name": "releaseMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1138,
									"name": "releaseMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Releases a previously depressed mouse button."
									},
									"parameters": [
										{
											"id": 1139,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The button to press. See [[Session.Session.click]] for\navailable options.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1636,
									"character": 20
								}
							]
						},
						{
							"id": 974,
							"name": "serverDelete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 975,
									"name": "serverDelete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 976,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 977,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 978,
											"name": "requestData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 979,
											"name": "pathParts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 182,
									"character": 14
								}
							]
						},
						{
							"id": 962,
							"name": "serverGet",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 963,
									"name": "serverGet",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 964,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 965,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 966,
											"name": "requestData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 967,
											"name": "pathParts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 174,
									"character": 11
								}
							]
						},
						{
							"id": 968,
							"name": "serverPost",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 969,
									"name": "serverPost",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 970,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 971,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 972,
											"name": "requestData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 973,
											"name": "pathParts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "unknown",
												"name": "T"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 178,
									"character": 12
								}
							]
						},
						{
							"id": 1083,
							"name": "setCookie",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1084,
									"name": "setCookie",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a cookie on the current page."
									},
									"parameters": [
										{
											"id": 1085,
											"name": "cookie",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WebDriverCookie",
												"id": 660
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1066,
									"character": 11
								}
							]
						},
						{
							"id": 1237,
							"name": "setExecuteAsyncTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1238,
									"name": "setExecuteAsyncTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Session.Session.executeAsync]] calls."
									},
									"parameters": [
										{
											"id": 1239,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2134,
									"character": 24
								}
							]
						},
						{
							"id": 1242,
							"name": "setFindTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1243,
									"name": "setFindTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Session.Session.find]] calls."
									},
									"parameters": [
										{
											"id": 1244,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2150,
									"character": 16
								}
							]
						},
						{
							"id": 1183,
							"name": "setGeolocation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1184,
									"name": "setGeolocation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the geographical location of the remote environment."
									},
									"parameters": [
										{
											"id": 1185,
											"name": "location",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Latitude and longitude are specified using standard\nWGS84 decimal latitude/longitude. Altitude is specified as meters above\nthe WGS84 ellipsoid. Not all environments support altitude.\n"
											},
											"type": {
												"type": "reference",
												"name": "Geolocation",
												"id": 652
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1896,
									"character": 16
								}
							]
						},
						{
							"id": 1197,
							"name": "setLocalStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1198,
									"name": "setLocalStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a value in local storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 1199,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key to set."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1200,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to set.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2001,
									"character": 21
								}
							]
						},
						{
							"id": 1110,
							"name": "setOrientation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1111,
									"name": "setOrientation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the screen orientation."
									},
									"parameters": [
										{
											"id": 1112,
											"name": "orientation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Either 'portrait' or 'landscape'.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1431,
									"character": 16
								}
							]
						},
						{
							"id": 1247,
							"name": "setPageLoadTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1248,
									"name": "setPageLoadTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the timeout for [[Session.Session.get]] calls."
									},
									"parameters": [
										{
											"id": 1249,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the timeout, in milliseconds.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2166,
									"character": 20
								}
							]
						},
						{
							"id": 1213,
							"name": "setSessionStorageItem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1214,
									"name": "setSessionStorageItem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a value in session storage for the focused window/frame."
									},
									"parameters": [
										{
											"id": 1215,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The key to set."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1216,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to set.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2052,
									"character": 23
								}
							]
						},
						{
							"id": 983,
							"name": "setTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 984,
									"name": "setTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the value of a timeout for the session."
									},
									"parameters": [
										{
											"id": 985,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type of timeout to set. One of 'script', 'implicit', or\n'page load'.\n"
											},
											"type": {
												"type": "reference",
												"name": "Timeout",
												"id": 1380
											}
										},
										{
											"id": 986,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of time to use for the timeout, in milliseconds. A\nvalue of 0 will cause operations to time out immediately.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 212,
									"character": 12
								}
							]
						},
						{
							"id": 1064,
							"name": "setWindowPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1065,
									"name": "setWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the position of a window.",
										"text": "Note that this method is not part of the W3C WebDriver standard.\n"
									},
									"parameters": [
										{
											"id": 1066,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen x-coordinate to move to, in CSS pixels, relative to\nthe left edge of the primary monitor.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1067,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The screen y-coordinate to move to, in CSS pixels, relative to\nthe top edge of the primary monitor.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								},
								{
									"id": 1068,
									"name": "setWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1069,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1070,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1071,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 865,
									"character": 19
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 866,
									"character": 19
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 871,
									"character": 19
								}
							]
						},
						{
							"id": 1056,
							"name": "setWindowRect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1057,
									"name": "setWindowRect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the current window's rectangle (size and position)."
									},
									"parameters": [
										{
											"id": 1058,
											"name": "rect",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The windows rectangle. This may contain all 4 properties, or\njust x & y, or just width & height.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1059,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1063,
															"name": "height",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 846,
																	"character": 67
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1062,
															"name": "width",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 846,
																	"character": 51
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1060,
															"name": "x",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 846,
																	"character": 25
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1061,
															"name": "y",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "src/webdriver/Session.ts",
																	"line": 846,
																	"character": 36
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1063,
																1062,
																1060,
																1061
															]
														}
													],
													"sources": [
														{
															"fileName": "src/webdriver/Session.ts",
															"line": 846,
															"character": 21
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 846,
									"character": 15
								}
							]
						},
						{
							"id": 1035,
							"name": "setWindowSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1036,
									"name": "setWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the dimensions of a window."
									},
									"parameters": [
										{
											"id": 1037,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new width of the window, in CSS pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1038,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new height of the window, in CSS pixels.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								},
								{
									"id": 1039,
									"name": "setWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1040,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1041,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1042,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 710,
									"character": 15
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 711,
									"character": 15
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 716,
									"character": 15
								}
							]
						},
						{
							"id": 1025,
							"name": "switchToFrame",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1026,
									"name": "switchToFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused frame to a new frame."
									},
									"parameters": [
										{
											"id": 1027,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The frame to switch to. In most environments, a number or\nstring value corresponds to a key in the `window.frames` object of the\ncurrently active frame. If `null`, the topmost (default) frame will be\nused. If an Element is provided, it must correspond to a `<frame>` or\n`<iframe>` element.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Element",
														"id": 1415
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 582,
									"character": 15
								}
							]
						},
						{
							"id": 1031,
							"name": "switchToParentFrame",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1032,
									"name": "switchToParentFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused frame to the parent of the currently\nfocused frame."
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 631,
									"character": 21
								}
							]
						},
						{
							"id": 1028,
							"name": "switchToWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1029,
									"name": "switchToWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Switches the currently focused window to a new window."
									},
									"parameters": [
										{
											"id": 1030,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The handle of the window to switch to. In mobile\nenvironments and environments based on the W3C WebDriver standard, this\nshould be a handle as returned by\n[[Session.Session.getAllWindowHandles]].\n\nIn environments using the JsonWireProtocol, this value corresponds to\nthe `window.name` property of a window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 618,
									"character": 16
								}
							]
						},
						{
							"id": 1012,
							"name": "takeScreenshot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1013,
									"name": "takeScreenshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a screenshot of the focused window and returns it in PNG format.",
										"returns": "A buffer containing a PNG image.\n"
									},
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 523,
									"character": 16
								}
							]
						},
						{
							"id": 1142,
							"name": "tap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 1143,
									"name": "tap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Taps an element on a touch screen device. If the element is outside of\nthe viewport, the remote driver will attempt to scroll it into view\nautomatically."
									},
									"parameters": [
										{
											"id": 1144,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element to tap.\n"
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1690,
									"character": 5
								}
							]
						},
						{
							"id": 1157,
							"name": "touchScroll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"decorators": [
								{
									"name": "forCommand",
									"type": {
										"type": "reference",
										"name": "forCommand",
										"id": 1381
									},
									"arguments": {
										"properties": "{ usesElement: true }",
										"__scrubbed__": true,
										"__lenormalized__": true
									}
								}
							],
							"signatures": [
								{
									"id": 1158,
									"name": "touchScroll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Scrolls the currently focused window on a touch screen device."
									},
									"parameters": [
										{
											"id": 1159,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An optional x-offset, relative to the left edge of the\nelement, in CSS pixels. If no element is specified, the offset is\nrelative to the previous scroll position of the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1160,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An optional y-offset, relative to the top edge of the\nelement, in CSS pixels. If no element is specified, the offset is\nrelative to the previous scroll position of the window.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								},
								{
									"id": 1161,
									"name": "touchScroll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1162,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										},
										{
											"id": 1163,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 1164,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1748,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1749,
									"character": 13
								},
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1755,
									"character": 13
								}
							]
						},
						{
							"id": 1115,
							"name": "typeInPrompt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1116,
									"name": "typeInPrompt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Types into the currently active prompt pop-up."
									},
									"parameters": [
										{
											"id": 1117,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to type into the pop-up’s input box.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 1451,
									"character": 14
								}
							]
						},
						{
							"id": 1231,
							"name": "waitForDeleted",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1232,
									"name": "waitForDeleted",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements in the currently active window/frame to be\ndestroyed."
									},
									"parameters": [
										{
											"id": 1233,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element retrieval strategy to use. See\n[[Session.Session.find]] for options.\n"
											},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 1234,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The strategy-specific value to search for. See\n[[Session.Session.find]] for details.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"overwrites": {
										"type": "reference",
										"name": "Locator.waitForDeleted",
										"id": 814
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2118,
									"character": 16
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Locator.waitForDeleted",
								"id": 814
							}
						},
						{
							"id": 1319,
							"name": "waitForDeletedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1320,
									"name": "waitForDeletedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS class\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 1321,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByClassName",
										"id": 887
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 276,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByClassName",
								"id": 887
							}
						},
						{
							"id": 1322,
							"name": "waitForDeletedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1323,
									"name": "waitForDeletedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 1324,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByCssSelector",
										"id": 890
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 286,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByCssSelector",
								"id": 890
							}
						},
						{
							"id": 1325,
							"name": "waitForDeletedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1326,
									"name": "waitForDeletedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given ID to be\ndestroyed."
									},
									"parameters": [
										{
											"id": 1327,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedById",
										"id": 893
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 296,
									"character": 20
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedById",
								"id": 893
							}
						},
						{
							"id": 1331,
							"name": "waitForDeletedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1332,
									"name": "waitForDeletedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 1333,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByLinkText",
										"id": 899
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 316,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByLinkText",
								"id": 899
							}
						},
						{
							"id": 1328,
							"name": "waitForDeletedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1329,
									"name": "waitForDeletedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given name\nattribute to be destroyed."
									},
									"parameters": [
										{
											"id": 1330,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByName",
										"id": 896
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 306,
									"character": 22
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByName",
								"id": 896
							}
						},
						{
							"id": 1334,
							"name": "waitForDeletedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1335,
									"name": "waitForDeletedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element partially matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 1336,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByPartialLinkText",
										"id": 902
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 326,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByPartialLinkText",
								"id": 902
							}
						},
						{
							"id": 1337,
							"name": "waitForDeletedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1338,
									"name": "waitForDeletedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given HTML tag\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 1339,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByTagName",
										"id": 905
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 336,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByTagName",
								"id": 905
							}
						},
						{
							"id": 1340,
							"name": "waitForDeletedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1341,
									"name": "waitForDeletedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given XPath\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 1342,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Locator.waitForDeletedByXpath",
										"id": 908
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 346,
									"character": 23
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Locator.waitForDeletedByXpath",
								"id": 908
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								951
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								956,
								960,
								958
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1118,
								1022,
								1086,
								1201,
								1217,
								1131,
								1033,
								1020,
								1088,
								1206,
								1222,
								1120,
								1140,
								1165,
								1002,
								1007,
								1095,
								1099,
								1274,
								1277,
								1283,
								1280,
								1286,
								1289,
								1292,
								1250,
								1253,
								1256,
								1262,
								1259,
								1265,
								1268,
								1271,
								1227,
								1295,
								1298,
								1301,
								1307,
								1304,
								1310,
								1313,
								1316,
								1171,
								993,
								1103,
								1016,
								1113,
								989,
								1191,
								1014,
								1189,
								1081,
								991,
								987,
								1235,
								1240,
								1181,
								1203,
								1195,
								1209,
								1186,
								1108,
								1245,
								1091,
								1093,
								1219,
								1211,
								1225,
								980,
								1072,
								1049,
								1043,
								998,
								996,
								1018,
								1168,
								1078,
								1153,
								1122,
								1145,
								1105,
								1134,
								1193,
								1000,
								1149,
								1137,
								974,
								962,
								968,
								1083,
								1237,
								1242,
								1183,
								1197,
								1110,
								1247,
								1213,
								983,
								1064,
								1056,
								1035,
								1025,
								1031,
								1028,
								1012,
								1142,
								1157,
								1115,
								1231,
								1319,
								1322,
								1325,
								1331,
								1328,
								1334,
								1337,
								1340
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 26,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Locator",
							"id": 798,
							"typeArguments": [
								{
									"type": "reference",
									"name": "CancellablePromise",
									"id": 2,
									"typeArguments": [
										{
											"type": "reference",
											"name": "Element",
											"id": 1415
										}
									]
								},
								{
									"type": "reference",
									"name": "CancellablePromise",
									"id": 2,
									"typeArguments": [
										{
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										}
									]
								},
								{
									"type": "reference",
									"name": "CancellablePromise",
									"id": 2,
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "void"
										}
									]
								}
							]
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "ProxiedSession",
							"id": 5173
						}
					]
				},
				{
					"id": 1347,
					"name": "SessionError",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1379,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						},
						{
							"id": 1377,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 1376,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 1378,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 1348,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2178,
									"character": 8
								}
							],
							"type": {
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reflection",
									"declaration": {
										"id": 1349,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 1350,
												"name": "0",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 5,
														"character": 5
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " ['Success', 'The command executed successfully.']"
											},
											{
												"id": 1355,
												"name": "10",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 19,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'StaleElementReference',\n    'An element command failed because the referenced element is no longer attached to the DOM.'\n  ]"
											},
											{
												"id": 1356,
												"name": "11",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 23,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'ElementNotVisible',\n    'An element command could not be completed because the element is not visible on the page.'\n  ]"
											},
											{
												"id": 1357,
												"name": "12",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 27,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'InvalidElementState',\n    'An element command could not be completed because the element is in an invalid state (e.g. attempting to click a disabled element).'\n  ]"
											},
											{
												"id": 1358,
												"name": "13",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 31,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'UnknownError',\n    'An unknown server-side error occurred while processing the command.'\n  ]"
											},
											{
												"id": 1359,
												"name": "15",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 35,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'ElementIsNotSelectable',\n    'An attempt was made to select an element that cannot be selected.'\n  ]"
											},
											{
												"id": 1360,
												"name": "17",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 39,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'JavaScriptError',\n    'An error occurred while executing user supplied JavaScript.'\n  ]"
											},
											{
												"id": 1361,
												"name": "19",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 43,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'XPathLookupError',\n    'An error occurred while searching for an element by XPath.'\n  ]"
											},
											{
												"id": 1362,
												"name": "21",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 47,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'Timeout',\n    'An operation did not complete before its timeout expired.'\n  ]"
											},
											{
												"id": 1363,
												"name": "23",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 51,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'NoSuchWindow',\n    'A request to switch to a different window could not be satisfied because the window could not be found.'\n  ]"
											},
											{
												"id": 1364,
												"name": "24",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 55,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'InvalidCookieDomain',\n    'An illegal attempt was made to set a cookie under a different domain than the current page.'\n  ]"
											},
											{
												"id": 1365,
												"name": "25",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 59,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'UnableToSetCookie',\n    \"A request to set a cookie's value could not be satisfied.\"\n  ]"
											},
											{
												"id": 1366,
												"name": "26",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 63,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'UnexpectedAlertOpen',\n    'A modal dialog was open, blocking this operation'\n  ]"
											},
											{
												"id": 1367,
												"name": "27",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 67,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'NoAlertOpenError',\n    'An attempt was made to operate on a modal dialog when one was not open.'\n  ]"
											},
											{
												"id": 1368,
												"name": "28",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 71,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'ScriptTimeout',\n    'A script did not complete before its timeout expired.'\n  ]"
											},
											{
												"id": 1369,
												"name": "29",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 75,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'InvalidElementCoordinates',\n    'The coordinates provided to an interactions operation are invalid.'\n  ]"
											},
											{
												"id": 1370,
												"name": "30",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 79,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " ['IMENotAvailable', 'IME was not available.']"
											},
											{
												"id": 1371,
												"name": "31",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 80,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " ['IMEEngineActivationFailed', 'An IME engine could not be started.']"
											},
											{
												"id": 1372,
												"name": "32",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 81,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'InvalidSelector',\n    'Argument was an invalid selector (e.g. XPath/CSS).'\n  ]"
											},
											{
												"id": 1373,
												"name": "33",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 85,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " ['SessionNotCreatedException', 'A new session could not be created.']"
											},
											{
												"id": 1374,
												"name": "34",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 86,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'MoveTargetOutOfBounds',\n    'Target provided for a move action is out of bounds.'\n  ]"
											},
											{
												"id": 1351,
												"name": "6",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 6,
														"character": 5
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " ['NoSuchDriver', 'A session is either terminated or not started.']"
											},
											{
												"id": 1375,
												"name": "61",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 90,
														"character": 6
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " ['InvalidArgument', 'Argument was invalid']"
											},
											{
												"id": 1352,
												"name": "7",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 7,
														"character": 5
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'NoSuchElement',\n    'An element could not be located on the page using the given search parameters.'\n  ]"
											},
											{
												"id": 1353,
												"name": "8",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 11,
														"character": 5
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'NoSuchFrame',\n    'A request to switch to a frame could not be satisfied because the frame could not be found.'\n  ]"
											},
											{
												"id": 1354,
												"name": "9",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/webdriver/lib/statusCodes.ts",
														"line": 15,
														"character": 5
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												"defaultValue": " [\n    'UnknownCommand',\n    'The requested resource could not be found, or a request was received using an HTTP method that is not supported by the mapped resource.'\n  ]"
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													1350,
													1355,
													1356,
													1357,
													1358,
													1359,
													1360,
													1361,
													1362,
													1363,
													1364,
													1365,
													1366,
													1367,
													1368,
													1369,
													1370,
													1371,
													1372,
													1373,
													1374,
													1351,
													1375,
													1352,
													1353,
													1354
												]
											}
										],
										"sources": [
											{
												"fileName": "src/webdriver/Session.ts",
												"line": 2178,
												"character": 16
											}
										]
									}
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1379,
								1377,
								1376,
								1378,
								1348
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 2177,
							"character": 22
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 1343,
					"name": "WebDriverTimeouts",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1346,
							"name": "implicit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2174,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1345,
							"name": "pageLoad",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2173,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1344,
							"name": "script",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/Session.ts",
									"line": 2172,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1346,
								1345,
								1344
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 2171,
							"character": 34
						}
					]
				},
				{
					"id": 1380,
					"name": "Timeout",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 2181,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "script"
							},
							{
								"type": "stringLiteral",
								"value": "implicit"
							},
							{
								"type": "stringLiteral",
								"value": "page load"
							}
						]
					}
				},
				{
					"id": 1387,
					"name": "convertToElements",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1388,
							"name": "convertToElements",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Finds and converts serialised DOM element objects into fully-featured typed\nElements.",
								"returns": "The input value, with all serialised DOM element objects converted\nto typed Elements.\n"
							},
							"parameters": [
								{
									"id": 1389,
									"name": "session",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The session from which the Element was retrieved."
									},
									"type": {
										"type": "reference",
										"name": "Session",
										"id": 950
									}
								},
								{
									"id": 1390,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "An object or array that may be, or may contain, serialised DOM\nelement objects."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 2210,
							"character": 26
						}
					]
				},
				{
					"id": 1391,
					"name": "fixExecuteError",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1392,
							"name": "fixExecuteError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "As of Selenium 2.40.0 (March 2014), all drivers incorrectly transmit an\nUnknownError instead of a JavaScriptError when user code fails to execute\ncorrectly. This method corrects this status code, under the assumption that\ndrivers will follow the spec in future."
							},
							"parameters": [
								{
									"id": 1393,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "SessionError",
										"id": 1347
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 2237,
							"character": 24
						}
					]
				},
				{
					"id": 1381,
					"name": "forCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"decorates": [
						{
							"type": "reference",
							"name": "getActiveElement",
							"id": 1103
						},
						{
							"type": "reference",
							"name": "moveMouseTo",
							"id": 1122
						},
						{
							"type": "reference",
							"name": "tap",
							"id": 1142
						},
						{
							"type": "reference",
							"name": "touchScroll",
							"id": 1157
						},
						{
							"type": "reference",
							"name": "doubleTap",
							"id": 1165
						},
						{
							"type": "reference",
							"name": "longTap",
							"id": 1168
						},
						{
							"type": "reference",
							"name": "flickFinger",
							"id": 1171
						},
						{
							"type": "reference",
							"name": "getActiveElement",
							"id": 5338
						},
						{
							"type": "reference",
							"name": "moveMouseTo",
							"id": 5357
						},
						{
							"type": "reference",
							"name": "tap",
							"id": 5377
						},
						{
							"type": "reference",
							"name": "touchScroll",
							"id": 5392
						},
						{
							"type": "reference",
							"name": "doubleTap",
							"id": 5400
						},
						{
							"type": "reference",
							"name": "longTap",
							"id": 5403
						},
						{
							"type": "reference",
							"name": "flickFinger",
							"id": 5406
						}
					],
					"signatures": [
						{
							"id": 1382,
							"name": "forCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Decorator for the [[util.forCommand]] method"
							},
							"parameters": [
								{
									"id": 1383,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1384,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1386,
													"name": "createsContext",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/webdriver/Session.ts",
															"line": 2188,
															"character": 16
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 1385,
													"name": "usesElement",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/webdriver/Session.ts",
															"line": 2187,
															"character": 13
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1386,
														1385
													]
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/Session.ts",
													"line": 2186,
													"character": 31
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous function)"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 2186,
							"character": 19
						}
					]
				},
				{
					"id": 1404,
					"name": "isStringArray",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1405,
							"name": "isStringArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1406,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "value",
								"asserts": false,
								"targetType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 2550,
							"character": 22
						}
					]
				},
				{
					"id": 1394,
					"name": "pushCookieProperties",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1395,
							"name": "pushCookieProperties",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "HTTP cookies are transmitted as semicolon-delimited strings, with a\n`key=value` pair giving the cookie’s name and value, then additional\ninformation about the cookie (expiry, path, domain, etc.) as additional k-v\npairs. This method takes an Array describing the parts of a cookie\n(`target`), and a hash map containing the additional information (`source`),\nand pushes the properties from the source object onto the target array as\nproperly escaped key-value strings."
							},
							"parameters": [
								{
									"id": 1396,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 1397,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 2255,
							"character": 29
						}
					]
				},
				{
					"id": 1398,
					"name": "simulateKeys",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1399,
							"name": "simulateKeys",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Simulates a keyboard event as it would occur on Safari 7."
							},
							"parameters": [
								{
									"id": 1400,
									"name": "keys",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Keys to type.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 2293,
							"character": 21
						}
					]
				},
				{
					"id": 1401,
					"name": "simulateMouse",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1402,
							"name": "simulateMouse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Simulates a mouse event as it would occur on Safari 7."
							},
							"parameters": [
								{
									"id": 1403,
									"name": "kwArgs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Parameters for the mouse event.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/Session.ts",
							"line": 2382,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						950
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1347,
						1343
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1380
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1387,
						1391,
						1381,
						1404,
						1394,
						1398,
						1401
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/Session.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7911,
			"name": "\"webdriver/helpers/pollUntil\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/helpers/pollUntil.ts",
			"children": [
				{
					"id": 7912,
					"name": "pollUntil",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 7913,
							"name": "pollUntil",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A [[Command]] helper that polls for a value within the client environment\nuntil the value exists or a timeout is reached.",
								"text": "```js\nimport Command from 'leadfoot/Command';\nimport pollUntil from 'leadfoot/helpers/pollUntil';\n\nnew Command(session)\n    .get('http://example.com')\n    .then(pollUntil('return document.getElementById(\"a\");', 1000))\n    .then(\n        elementA => {\n            // element was found\n        },\n        error => {\n            // element was not found\n        }\n    );\n```\n\n```js\nimport Command from 'leadfoot/Command';\nimport pollUntil from 'leadfoot/helpers/pollUntil';\n\nnew Command(session)\n    .get('http://example.com')\n    .then(pollUntil(value => {\n        const element = document.getElementById('a');\n        return element && element.value === value ? true : null;\n    }, [ 'foo' ], 1000))\n    .then(\n        () => {\n            // value was set to 'foo'\n        },\n        error => {\n            // value was never set\n        }\n    );\n```\n",
								"returns": "A [[Command]] callback function that, when called, returns a\npromise that resolves to the value returned by the poller function on\nsuccess and rejects on failure.\n"
							},
							"typeParameter": [
								{
									"id": 7914,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 7915,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The poller function to execute on an interval. The function\nshould return `null` or `undefined` if there is not a result. If the poller\nfunction throws, polling will halt.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 7916,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 7917,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/webdriver/helpers/pollUntil.ts",
															"line": 66,
															"character": 9
														}
													]
												}
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 7918,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "The maximum amount of time to wait for a successful result,\nin milliseconds. If not specified, the current `executeAsync` maximum\ntimeout for the session will be used.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 7919,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "The amount of time to wait between calls to the poller\nfunction, in milliseconds. If not specified, defaults to 67ms.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7920,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7921,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntil.ts",
											"line": 69,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 7922,
							"name": "pollUntil",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 7923,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 7924,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 7925,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 7926,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 7927,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7928,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7929,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntil.ts",
											"line": 76,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 7930,
							"name": "pollUntil",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 7931,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 7932,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 7933,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 7934,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntil.ts",
													"line": 79,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 7935,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								},
								{
									"id": 7936,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 7937,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7938,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7939,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntil.ts",
											"line": 83,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 7940,
							"name": "pollUntil",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 7941,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 7942,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 7943,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 7944,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 7945,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 7946,
															"name": "u",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntil.ts",
													"line": 86,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 7947,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "U"
											}
										]
									}
								},
								{
									"id": 7948,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 7949,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7950,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7951,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntil.ts",
											"line": 90,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 7952,
							"name": "pollUntil",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 7953,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 7954,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 7955,
									"name": "V",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 7956,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 7957,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 7958,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 7959,
															"name": "u",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														},
														{
															"id": 7960,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntil.ts",
													"line": 93,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 7961,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "U"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								},
								{
									"id": 7962,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 7963,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7964,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7965,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntil.ts",
											"line": 97,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 7966,
							"name": "pollUntil",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 7967,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 7968,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 7969,
									"name": "V",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 7970,
									"name": "W",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 7971,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 7972,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 7973,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 7974,
															"name": "u",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														},
														{
															"id": 7975,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 7976,
															"name": "w",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "W"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntil.ts",
													"line": 100,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 7977,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "U"
											},
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "typeParameter",
												"name": "W"
											}
										]
									}
								},
								{
									"id": 7978,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 7979,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7980,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7981,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntil.ts",
											"line": 104,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 7982,
							"name": "pollUntil",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 7983,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 7984,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 7985,
									"name": "V",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 7986,
									"name": "W",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 7987,
									"name": "X",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 7988,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 7989,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 7990,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 7991,
															"name": "u",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														},
														{
															"id": 7992,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 7993,
															"name": "w",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "W"
															}
														},
														{
															"id": 7994,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "X"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntil.ts",
													"line": 107,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 7995,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "U"
											},
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "typeParameter",
												"name": "W"
											},
											{
												"type": "typeParameter",
												"name": "X"
											}
										]
									}
								},
								{
									"id": 7996,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 7997,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 7998,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 7999,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntil.ts",
											"line": 111,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 8000,
							"name": "pollUntil",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 8001,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8002,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8003,
									"name": "V",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8004,
									"name": "W",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8005,
									"name": "X",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8006,
									"name": "Y",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 8007,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 8008,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 8009,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 8010,
															"name": "u",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														},
														{
															"id": 8011,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 8012,
															"name": "w",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "W"
															}
														},
														{
															"id": 8013,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "X"
															}
														},
														{
															"id": 8014,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "Y"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntil.ts",
													"line": 114,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 8015,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "U"
											},
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "typeParameter",
												"name": "W"
											},
											{
												"type": "typeParameter",
												"name": "X"
											},
											{
												"type": "typeParameter",
												"name": "Y"
											}
										]
									}
								},
								{
									"id": 8016,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 8017,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 8018,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 8019,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntil.ts",
											"line": 118,
											"character": 2
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/helpers/pollUntil.ts",
							"line": 65,
							"character": 33
						},
						{
							"fileName": "src/webdriver/helpers/pollUntil.ts",
							"line": 71,
							"character": 33
						},
						{
							"fileName": "src/webdriver/helpers/pollUntil.ts",
							"line": 78,
							"character": 33
						},
						{
							"fileName": "src/webdriver/helpers/pollUntil.ts",
							"line": 85,
							"character": 33
						},
						{
							"fileName": "src/webdriver/helpers/pollUntil.ts",
							"line": 92,
							"character": 33
						},
						{
							"fileName": "src/webdriver/helpers/pollUntil.ts",
							"line": 99,
							"character": 33
						},
						{
							"fileName": "src/webdriver/helpers/pollUntil.ts",
							"line": 106,
							"character": 33
						},
						{
							"fileName": "src/webdriver/helpers/pollUntil.ts",
							"line": 113,
							"character": 33
						},
						{
							"fileName": "src/webdriver/helpers/pollUntil.ts",
							"line": 120,
							"character": 33
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						7912
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/helpers/pollUntil.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 8020,
			"name": "\"webdriver/helpers/pollUntilTruthy\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/helpers/pollUntilTruthy.ts",
			"children": [
				{
					"id": 8021,
					"name": "pollUntilTruthy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 8022,
							"name": "pollUntilTruthy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 8023,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 8024,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 8025,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 8026,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
															"line": 6,
															"character": 9
														}
													]
												}
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 8027,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 8028,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 8029,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 8030,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
											"line": 9,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 8031,
							"name": "pollUntilTruthy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 8032,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 8033,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 8034,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 8035,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 8036,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 8037,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 8038,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
											"line": 16,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 8039,
							"name": "pollUntilTruthy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 8040,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 8041,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 8042,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 8043,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
													"line": 19,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 8044,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								},
								{
									"id": 8045,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 8046,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 8047,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 8048,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
											"line": 23,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 8049,
							"name": "pollUntilTruthy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 8050,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8051,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 8052,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 8053,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 8054,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 8055,
															"name": "u",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
													"line": 26,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 8056,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "U"
											}
										]
									}
								},
								{
									"id": 8057,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 8058,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 8059,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 8060,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
											"line": 30,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 8061,
							"name": "pollUntilTruthy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 8062,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8063,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8064,
									"name": "V",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 8065,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 8066,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 8067,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 8068,
															"name": "u",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														},
														{
															"id": 8069,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
													"line": 33,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 8070,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "U"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								},
								{
									"id": 8071,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 8072,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 8073,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 8074,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
											"line": 37,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 8075,
							"name": "pollUntilTruthy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 8076,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8077,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8078,
									"name": "V",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8079,
									"name": "W",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 8080,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 8081,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 8082,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 8083,
															"name": "u",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														},
														{
															"id": 8084,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 8085,
															"name": "w",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "W"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
													"line": 40,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 8086,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "U"
											},
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "typeParameter",
												"name": "W"
											}
										]
									}
								},
								{
									"id": 8087,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 8088,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 8089,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 8090,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
											"line": 44,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 8091,
							"name": "pollUntilTruthy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 8092,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8093,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8094,
									"name": "V",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8095,
									"name": "W",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8096,
									"name": "X",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 8097,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 8098,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 8099,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 8100,
															"name": "u",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														},
														{
															"id": 8101,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 8102,
															"name": "w",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "W"
															}
														},
														{
															"id": 8103,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "X"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
													"line": 47,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 8104,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "U"
											},
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "typeParameter",
												"name": "W"
											},
											{
												"type": "typeParameter",
												"name": "X"
											}
										]
									}
								},
								{
									"id": 8105,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 8106,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 8107,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 8108,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
											"line": 51,
											"character": 2
										}
									]
								}
							}
						},
						{
							"id": 8109,
							"name": "pollUntilTruthy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 8110,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8111,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8112,
									"name": "V",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8113,
									"name": "W",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8114,
									"name": "X",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 8115,
									"name": "Y",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 8116,
									"name": "poller",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 8117,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 8118,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 8119,
															"name": "u",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "U"
															}
														},
														{
															"id": 8120,
															"name": "v",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														},
														{
															"id": 8121,
															"name": "w",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "W"
															}
														},
														{
															"id": 8122,
															"name": "x",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "X"
															}
														},
														{
															"id": 8123,
															"name": "y",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "Y"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
													"line": 54,
													"character": 9
												}
											]
										}
									}
								},
								{
									"id": 8124,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "typeParameter",
												"name": "U"
											},
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "typeParameter",
												"name": "W"
											},
											{
												"type": "typeParameter",
												"name": "X"
											},
											{
												"type": "typeParameter",
												"name": "Y"
											}
										]
									}
								},
								{
									"id": 8125,
									"name": "timeout",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 8126,
									"name": "pollInterval",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 8127,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 8128,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CancellablePromise",
												"id": 2,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
											"line": 58,
											"character": 2
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
							"line": 5,
							"character": 39
						},
						{
							"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
							"line": 11,
							"character": 39
						},
						{
							"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
							"line": 18,
							"character": 39
						},
						{
							"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
							"line": 25,
							"character": 39
						},
						{
							"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
							"line": 32,
							"character": 39
						},
						{
							"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
							"line": 39,
							"character": 39
						},
						{
							"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
							"line": 46,
							"character": 39
						},
						{
							"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
							"line": 53,
							"character": 39
						},
						{
							"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
							"line": 60,
							"character": 39
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						8021
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/helpers/pollUntilTruthy.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 8129,
			"name": "\"webdriver/index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/index.ts",
			"sources": [
				{
					"fileName": "src/webdriver/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 560,
			"name": "\"webdriver/interfaces\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/interfaces.ts",
			"children": [
				{
					"id": 561,
					"name": "Capabilities",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "These interface describes the capabilities that may be implemented by a\nWebDriver server. Many of these are standard\n[[https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities|WebDriver capabilities]],\nbut the interface also includes a number of Leadfoot-specific feature and\ndefect indicators. For example, the [[interfaces.Capabilities.brokenClick]]\ncapability indicates that the remote doesn't properly support the 'click'\naction."
					},
					"indexSignature": [
						{
							"id": 650,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "These interface describes the capabilities that may be implemented by a\nWebDriver server. Many of these are standard\n[[https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities|WebDriver capabilities]],\nbut the interface also includes a number of Leadfoot-specific feature and\ndefect indicators. For example, the [[interfaces.Capabilities.brokenClick]]\ncapability indicates that the remote doesn't properly support the 'click'\naction."
							},
							"parameters": [
								{
									"id": 651,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 562,
							"name": "_filled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 16,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 563,
							"name": "applicationCacheEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the session can interact with the remote browser's application\ncache."
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 22,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 564,
							"name": "brokenActiveElement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The remote doesn't implement element/active"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 25,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 565,
							"name": "brokenClick",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The remote doesn't properly implement native mouse clicks"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 28,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 566,
							"name": "brokenComputedStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The remote may not return correct computed styles"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 31,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 567,
							"name": "brokenCookies",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Native cookie manipulation doesn't work"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 34,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 568,
							"name": "brokenCssTransformedSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Transformed CSS sizes may be reported incorrectly"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 37,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 569,
							"name": "brokenDeleteCookie",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Native cookie deletion doesn't work"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 40,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 570,
							"name": "brokenDeleteWindow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Native window deletion doesn't work"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 43,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 571,
							"name": "brokenDoubleClick",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The double-click event doesn't work"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 46,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 572,
							"name": "brokenElementDisplayedOffscreen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 48,
									"character": 33
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 573,
							"name": "brokenElementDisplayedOpacity",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 49,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 574,
							"name": "brokenElementEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 50,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 575,
							"name": "brokenElementPosition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 51,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 576,
							"name": "brokenElementProperty",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 52,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 577,
							"name": "brokenElementSerialization",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 53,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 578,
							"name": "brokenEmptyPost",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 54,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 579,
							"name": "brokenExecuteElementReturn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 55,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 580,
							"name": "brokenExecuteForNonHttpUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 56,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 581,
							"name": "brokenExecuteUndefinedReturn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 57,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 582,
							"name": "brokenFileSendKeys",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 58,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 583,
							"name": "brokenFlickFinger",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 59,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 584,
							"name": "brokenHtmlMouseMove",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 60,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 585,
							"name": "brokenHtmlTagName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 61,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 586,
							"name": "brokenLinkTextLocator",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 62,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 587,
							"name": "brokenLongTap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 63,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 588,
							"name": "brokenMouseEvents",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 64,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 589,
							"name": "brokenMoveFinger",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 65,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 590,
							"name": "brokenNavigation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 66,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 591,
							"name": "brokenNullGetSpecAttribute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 67,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 592,
							"name": "brokenOptionSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 68,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 593,
							"name": "brokenPageSource",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 69,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 594,
							"name": "brokenParentFrameSwitch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 70,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 595,
							"name": "brokenRefresh",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 71,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 596,
							"name": "brokenSendKeys",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 72,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 597,
							"name": "brokenSessionList",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 73,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 598,
							"name": "brokenSubmitElement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 74,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 599,
							"name": "brokenTouchScroll",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 75,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 600,
							"name": "brokenVisibleText",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "\"Visible\" text includes text that should be hidden"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 78,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 601,
							"name": "brokenWhitespaceNormalization",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 80,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 602,
							"name": "brokenWindowClose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 81,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 603,
							"name": "brokenWindowPosition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 82,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 604,
							"name": "brokenWindowSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 83,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 605,
							"name": "brokenWindowSwitch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 84,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 606,
							"name": "brokenZeroTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 85,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 607,
							"name": "browserName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The name of the remote browser (e.g., 'safari')"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 88,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 608,
							"name": "browserVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The remote browser version. This may or may not correspond to the\npublicly visible version."
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 94,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 609,
							"name": "deviceName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The name of the remote mobile device"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 99,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 610,
							"name": "dynamicViewport",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser can be resized"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 102,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 611,
							"name": "fixSessionCapabilities",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether or not to run capability tests"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 105,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "no-detect"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 612,
							"name": "fixedLogTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The actual log types supported by a remote"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 108,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"type": "reference",
										"name": "CancellablePromise",
										"id": 2,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 613,
							"name": "handlesAlerts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote can handle modal alerts"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 111,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 614,
							"name": "hasTouchScreen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote has a touch screen"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 114,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 615,
							"name": "initialBrowserUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Allows the user to specify the initial URL loaded when IE starts."
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 117,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 616,
							"name": "locationContextEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the session can set and query the browser's location context."
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 120,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 617,
							"name": "mouseEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether mouse actions are enabled"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 123,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 618,
							"name": "nativeEvents",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser supports native events"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 126,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 619,
							"name": "noElementDisplayed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If true, the remote doesn't support the JWP /displayed endpoint"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 129,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 620,
							"name": "noElementEquals",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If true, the remote doesn't support the JWP /equals endpoint"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 132,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 621,
							"name": "noKeysCommand",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If true, the remote doesn't support the JWP /keys endpoint"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 135,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 622,
							"name": "platform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The base platform the remote browser is running on, typically one of\nWINDOWS, XP, VISTA, MAC, LINUX, UNIX, ANDROID."
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 141,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 623,
							"name": "platformName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The platform the remote browser is running on. This is typically more\nspecifc than [[interfaces.Capabilities.platform]]."
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 147,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 624,
							"name": "platformVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The version of the platform the remote browser is runnign no."
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 152,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 625,
							"name": "remoteFiles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser supports file uploads"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 157,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 626,
							"name": "returnsFromClickImmediately",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser returns immediately after a click or waits\nfor the click action to occur"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 163,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 627,
							"name": "rotatable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote viewport is rotatable between portrait and landscape\nviews"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 169,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 628,
							"name": "scriptedParentFrameCrashesBrowser",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "This indicates that trying to return a reference to a parent frame from\na script will crash the remote browser"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 175,
									"character": 35
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 629,
							"name": "shortcutKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The [[keys.keys|key]] used to run shortcuts, typically Cmd (Mac) or Control\n(Windows, Linux)"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 181,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 630,
							"name": "supportsCssTransforms",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser supports CSS transforms"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 184,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 631,
							"name": "supportsExecuteAsync",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether scripts can be executed asynchronously in the remote browser"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 187,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 632,
							"name": "supportsGetTimeouts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the server supports the GET /timeouts endpoint"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 190,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 633,
							"name": "supportsNavigationDataUris",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser allows navigation via data URIs"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 193,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 634,
							"name": "supportsSessionCommands",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote supports session commands"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 196,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 635,
							"name": "takesScreenshot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser can take screenshots"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 199,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 636,
							"name": "touchEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser supports touch events"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 202,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 637,
							"name": "usesFlatKeysArray",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote server requires element keys to be sent as a flat array"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 207,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 638,
							"name": "usesHandleParameter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether window commands use 'handle' instead of 'name'"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 210,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 641,
							"name": "usesWebDriverActiveElement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether getActiveElement uses a POST or GET"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 221,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 639,
							"name": "usesWebDriverElementAttribute",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the Element '/attribute' endpoint uses W3C semantics"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 213,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 640,
							"name": "usesWebDriverElementValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the Element '/value' endpoint uses a 'text' property"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 216,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 642,
							"name": "usesWebDriverExecuteASync",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote uses `/execute/async` rathern than `/execute_async` for\nasynchronous execution"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 227,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 643,
							"name": "usesWebDriverExecuteSync",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote uses `/execute/sync` rathern than `/execute` for\nsynchronous execution"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 233,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 644,
							"name": "usesWebDriverLocators",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether find commands should use WebDriver (vs JsonWireProtocol) locators"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 238,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 645,
							"name": "usesWebDriverTimeouts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser uses WebDriver-style timeouts"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 243,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 647,
							"name": "usesWebDriverWindowCommands",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser uses WebDriver-style window commands (/rect, implicit handles)"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 253,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 646,
							"name": "usesWebDriverWindowHandleCommands",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the remote browser uses WebDriver-style window handle command (/window)"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 248,
									"character": 35
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 648,
							"name": "version",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The remote browser version"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 256,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 649,
							"name": "webStorageEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the session supports interactions with storage objects"
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 259,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								562,
								563,
								564,
								565,
								566,
								567,
								568,
								569,
								570,
								571,
								572,
								573,
								574,
								575,
								576,
								577,
								578,
								579,
								580,
								581,
								582,
								583,
								584,
								585,
								586,
								587,
								588,
								589,
								590,
								591,
								592,
								593,
								594,
								595,
								596,
								597,
								598,
								599,
								600,
								601,
								602,
								603,
								604,
								605,
								606,
								607,
								608,
								609,
								610,
								611,
								612,
								613,
								614,
								615,
								616,
								617,
								618,
								619,
								620,
								621,
								622,
								623,
								624,
								625,
								626,
								627,
								628,
								629,
								630,
								631,
								632,
								633,
								634,
								635,
								636,
								637,
								638,
								641,
								639,
								640,
								642,
								643,
								644,
								645,
								647,
								646,
								648,
								649
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/interfaces.ts",
							"line": 15,
							"character": 29
						}
					]
				},
				{
					"id": 652,
					"name": "Geolocation",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 653,
							"name": "altitude",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 265,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 654,
							"name": "latitude",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 266,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 655,
							"name": "longitude",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 267,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								653,
								654,
								655
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/interfaces.ts",
							"line": 264,
							"character": 28
						}
					]
				},
				{
					"id": 683,
					"name": "LeadfootError",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 690,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						},
						{
							"id": 688,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 687,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 684,
							"name": "response",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 292,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 685,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 686,
													"name": "text",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/webdriver/interfaces.ts",
															"line": 292,
															"character": 19
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														686
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 689,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								690,
								688,
								687,
								684,
								689
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/interfaces.ts",
							"line": 291,
							"character": 30
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 667,
					"name": "LeadfootURL",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 670,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 288,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 671,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 22,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.auth"
							}
						},
						{
							"id": 672,
							"name": "hash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 23,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.hash"
							}
						},
						{
							"id": 673,
							"name": "host",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 24,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.host"
							}
						},
						{
							"id": 674,
							"name": "hostname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 25,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.hostname"
							}
						},
						{
							"id": 675,
							"name": "href",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 26,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.href"
							}
						},
						{
							"id": 669,
							"name": "password",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 287,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 676,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 27,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.path"
							}
						},
						{
							"id": 677,
							"name": "pathname",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 28,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.pathname"
							}
						},
						{
							"id": 681,
							"name": "port",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 32,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.port"
							}
						},
						{
							"id": 678,
							"name": "protocol",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 29,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.protocol"
							}
						},
						{
							"id": 682,
							"name": "query",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 33,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "reference",
										"name": "ParsedUrlQuery"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.query"
							}
						},
						{
							"id": 679,
							"name": "search",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 30,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.search"
							}
						},
						{
							"id": 680,
							"name": "slashes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/url.d.ts",
									"line": 31,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Url.slashes"
							}
						},
						{
							"id": 668,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 286,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								670,
								671,
								672,
								673,
								674,
								675,
								669,
								676,
								677,
								681,
								678,
								682,
								679,
								680,
								668
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/interfaces.ts",
							"line": 285,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Url"
						}
					]
				},
				{
					"id": 656,
					"name": "LogEntry",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 658,
							"name": "level",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 272,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 659,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 273,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 657,
							"name": "timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 271,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								658,
								659,
								657
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/interfaces.ts",
							"line": 270,
							"character": 25
						}
					]
				},
				{
					"id": 660,
					"name": "WebDriverCookie",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 664,
							"name": "domain",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 280,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 666,
							"name": "expiry",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 282,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"name": "Date"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 661,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 277,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 663,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 279,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 665,
							"name": "secure",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 281,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 662,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 278,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								664,
								666,
								661,
								663,
								665,
								662
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/interfaces.ts",
							"line": 276,
							"character": 32
						}
					]
				},
				{
					"id": 691,
					"name": "WebDriverResponse",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 692,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/interfaces.ts",
									"line": 296,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								692
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/interfaces.ts",
							"line": 295,
							"character": 34
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						561,
						652,
						683,
						667,
						656,
						660,
						691
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/interfaces.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 445,
			"name": "\"webdriver/keys\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/keys.ts",
			"children": [
				{
					"id": 446,
					"name": "keys",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "A list of special keys that can be used with the `pressKeys` and `type`\nfunctions.",
						"text": "See [[Session.Session.pressKeys]] for usage details.\n"
					},
					"children": [
						{
							"id": 484,
							"name": "ADD",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad add (+) key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 95,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 457,
							"name": "ALT",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The alt key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 38,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 468,
							"name": "ARROW_DOWN",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The down arrow."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 61,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 465,
							"name": "ARROW_LEFT",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The left arrow."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 55,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 467,
							"name": "ARROW_RIGHT",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The right arrow."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 59,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 466,
							"name": "ARROW_UP",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The up arrow."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 57,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 450,
							"name": "BACKSPACE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The backspace key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 448,
							"name": "CANCEL",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "OS-specific keystroke sequence that performs a cancel action."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 14,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 452,
							"name": "CLEAR",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The clear key. This key only appears on full-size Apple keyboards in\nplace of Num Lock key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 28,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 502,
							"name": "COMMAND",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The command (⌘) key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 132,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 456,
							"name": "CONTROL",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The control key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 36,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 487,
							"name": "DECIMAL",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad decimal (.) key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 101,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 470,
							"name": "DELETE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The delete key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 65,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 488,
							"name": "DIVIDE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad divide (/) key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 103,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 463,
							"name": "END",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The end key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 51,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 454,
							"name": "ENTER",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The enter (numpad) key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 32,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 472,
							"name": "EQUALS",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The equals key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 69,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 459,
							"name": "ESCAPE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The escape key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 42,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 489,
							"name": "F1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F1 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 106,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 498,
							"name": "F10",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F10 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 124,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 499,
							"name": "F11",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F11 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 126,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 500,
							"name": "F12",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F12 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 128,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 490,
							"name": "F2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F2 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 108,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 491,
							"name": "F3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F3 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 110,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 492,
							"name": "F4",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F4 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 112,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 493,
							"name": "F5",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F5 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 114,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 494,
							"name": "F6",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F6 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 116,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 495,
							"name": "F7",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F7 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 118,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 496,
							"name": "F8",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F8 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 120,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 497,
							"name": "F9",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The F9 key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 122,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 449,
							"name": "HELP",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The help key. This key only appears on older Apple keyboards in place of\nthe Insert key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 19,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 464,
							"name": "HOME",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The home key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 53,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 469,
							"name": "INSERT",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The insert key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 63,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 501,
							"name": "META",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The meta (Windows) key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 130,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 483,
							"name": "MULTIPLY",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad multiply (*) key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 93,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 447,
							"name": "NULL",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Releases all held modifier keys."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 12,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 473,
							"name": "NUMPAD0",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad zero key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 72,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 474,
							"name": "NUMPAD1",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad one key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 74,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 475,
							"name": "NUMPAD2",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad two key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 76,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 476,
							"name": "NUMPAD3",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad three key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 78,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 477,
							"name": "NUMPAD4",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad four key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 80,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 478,
							"name": "NUMPAD5",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad five key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 82,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 479,
							"name": "NUMPAD6",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad six key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 84,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 480,
							"name": "NUMPAD7",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad seven key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 86,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 481,
							"name": "NUMPAD8",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad eight key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 88,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 482,
							"name": "NUMPAD9",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad nine key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 90,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 462,
							"name": "PAGE_DOWN",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The page down key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 49,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 461,
							"name": "PAGE_UP",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The page up key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 47,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 458,
							"name": "PAUSE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The pause key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 40,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 453,
							"name": "RETURN",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The return key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 30,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 471,
							"name": "SEMICOLON",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The semicolon key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 67,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 485,
							"name": "SEPARATOR",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad separator (=) key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 97,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 455,
							"name": "SHIFT",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The shift key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 34,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 460,
							"name": "SPACE",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The space bar."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 45,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 486,
							"name": "SUBTRACT",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The numpad subtract (-) key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 99,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 451,
							"name": "TAB",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The tab key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 503,
							"name": "ZENKAKU_HANKAKU",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The zenkaku/hankaku key."
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 134,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 504,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 136,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"NULL\""
						},
						{
							"id": 505,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 137,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Cancel\""
						},
						{
							"id": 506,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 138,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Help\""
						},
						{
							"id": 507,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 139,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Backspace\""
						},
						{
							"id": 508,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 140,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Tab\""
						},
						{
							"id": 509,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 141,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Clear\""
						},
						{
							"id": 510,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 142,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Return\""
						},
						{
							"id": 511,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 143,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Enter\""
						},
						{
							"id": 512,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 144,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Shift\""
						},
						{
							"id": 513,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 145,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Control\""
						},
						{
							"id": 514,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 146,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Alt\""
						},
						{
							"id": 515,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 147,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Pause\""
						},
						{
							"id": 516,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 148,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Escape\""
						},
						{
							"id": 517,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 150,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Space\""
						},
						{
							"id": 518,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 151,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Page up\""
						},
						{
							"id": 519,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 152,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Page down\""
						},
						{
							"id": 520,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 153,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"End\""
						},
						{
							"id": 521,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 154,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Home\""
						},
						{
							"id": 522,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 155,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Left arrow\""
						},
						{
							"id": 523,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 156,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Up arrow\""
						},
						{
							"id": 524,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 157,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Right arrow\""
						},
						{
							"id": 525,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 158,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Down arrow\""
						},
						{
							"id": 526,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 159,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Insert\""
						},
						{
							"id": 527,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 160,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Delete\""
						},
						{
							"id": 528,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 161,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Semicolon\""
						},
						{
							"id": 529,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 162,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Equals\""
						},
						{
							"id": 530,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 164,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Numpad 0\""
						},
						{
							"id": 531,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 165,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Numpad 1\""
						},
						{
							"id": 532,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 166,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Numpad 2\""
						},
						{
							"id": 533,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 167,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Numpad 3\""
						},
						{
							"id": 534,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 168,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Numpad 4\""
						},
						{
							"id": 535,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 169,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Numpad 5\""
						},
						{
							"id": 536,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 170,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Numpad 6\""
						},
						{
							"id": 537,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 171,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Numpad 7\""
						},
						{
							"id": 538,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 172,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Numpad 8\""
						},
						{
							"id": 539,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 173,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Numpad 9\""
						},
						{
							"id": 540,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 175,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Multiply\""
						},
						{
							"id": 541,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 176,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Add\""
						},
						{
							"id": 542,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 177,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Separator\""
						},
						{
							"id": 543,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 178,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Subtract\""
						},
						{
							"id": 544,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 179,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Decimal\""
						},
						{
							"id": 545,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 180,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Divide\""
						},
						{
							"id": 546,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 182,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F1\""
						},
						{
							"id": 547,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 183,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F2\""
						},
						{
							"id": 548,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 184,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F3\""
						},
						{
							"id": 549,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 185,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F4\""
						},
						{
							"id": 550,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 186,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F5\""
						},
						{
							"id": 551,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 187,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F6\""
						},
						{
							"id": 552,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 188,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F7\""
						},
						{
							"id": 553,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 189,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F8\""
						},
						{
							"id": 554,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 190,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F9\""
						},
						{
							"id": 555,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 191,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F10\""
						},
						{
							"id": 556,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 192,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F11\""
						},
						{
							"id": 557,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 193,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"F12\""
						},
						{
							"id": 558,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 194,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Command\""
						},
						{
							"id": 559,
							"name": "",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/keys.ts",
									"line": 195,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Zenkaku/hankaku\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								484,
								457,
								468,
								465,
								467,
								466,
								450,
								448,
								452,
								502,
								456,
								487,
								470,
								488,
								463,
								454,
								472,
								459,
								489,
								498,
								499,
								500,
								490,
								491,
								492,
								493,
								494,
								495,
								496,
								497,
								449,
								464,
								469,
								501,
								483,
								447,
								473,
								474,
								475,
								476,
								477,
								478,
								479,
								480,
								481,
								482,
								462,
								461,
								458,
								453,
								471,
								485,
								455,
								460,
								486,
								451,
								503,
								504,
								505,
								506,
								507,
								508,
								509,
								510,
								511,
								512,
								513,
								514,
								515,
								516,
								517,
								518,
								519,
								520,
								521,
								522,
								523,
								524,
								525,
								526,
								527,
								528,
								529,
								530,
								531,
								532,
								533,
								534,
								535,
								536,
								537,
								538,
								539,
								540,
								541,
								542,
								543,
								544,
								545,
								546,
								547,
								548,
								549,
								550,
								551,
								552,
								553,
								554,
								555,
								556,
								557,
								558,
								559
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/keys.ts",
							"line": 10,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						446
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/keys.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 797,
			"name": "\"webdriver/lib/Locator\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/lib/Locator.ts",
			"children": [
				{
					"id": 798,
					"name": "Locator",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"comment": {
						"shortText": "Locator is a class that supports searching for specific element (E), list\n(L), and void (V) types by various strategies.",
						"text": "Note that this class includes JSONWireProtocol strategies. W3C Webdriver\nonly understands 4 strategies:\n\n1. css selector\n2. link text\n3. partial link text\n4. xpath\n"
					},
					"typeParameter": [
						{
							"id": 799,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 800,
							"name": "L",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 801,
							"name": "V",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 802,
							"name": "find",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isAbstract": true
							},
							"signatures": [
								{
									"id": 803,
									"name": "find",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 804,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 805,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 14,
									"character": 15
								}
							]
						},
						{
							"id": 806,
							"name": "findAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isAbstract": true
							},
							"signatures": [
								{
									"id": 807,
									"name": "findAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 808,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 809,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "L"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 16,
									"character": 18
								}
							]
						},
						{
							"id": 842,
							"name": "findAllByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 843,
									"name": "findAllByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS class name."
									},
									"parameters": [
										{
											"id": 844,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 106,
									"character": 20
								}
							]
						},
						{
							"id": 845,
							"name": "findAllByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 846,
									"name": "findAllByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given CSS selector."
									},
									"parameters": [
										{
											"id": 847,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 115,
									"character": 22
								}
							]
						},
						{
							"id": 851,
							"name": "findAllByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 852,
									"name": "findAllByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 853,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 134,
									"character": 19
								}
							]
						},
						{
							"id": 848,
							"name": "findAllByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 849,
									"name": "findAllByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given name attribute."
									},
									"parameters": [
										{
											"id": 850,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 124,
									"character": 15
								}
							]
						},
						{
							"id": 854,
							"name": "findAllByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 855,
									"name": "findAllByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 856,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 144,
									"character": 26
								}
							]
						},
						{
							"id": 857,
							"name": "findAllByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 858,
									"name": "findAllByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given HTML tag name."
									},
									"parameters": [
										{
											"id": 859,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 153,
									"character": 18
								}
							]
						},
						{
							"id": 860,
							"name": "findAllByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 861,
									"name": "findAllByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all elements inside this element matching the given XPath selector."
									},
									"parameters": [
										{
											"id": 862,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "L"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 162,
									"character": 16
								}
							]
						},
						{
							"id": 818,
							"name": "findByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 819,
									"name": "findByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS class\nname."
									},
									"parameters": [
										{
											"id": 820,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 28,
									"character": 17
								}
							]
						},
						{
							"id": 821,
							"name": "findByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 822,
									"name": "findByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given CSS\nselector."
									},
									"parameters": [
										{
											"id": 823,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 38,
									"character": 19
								}
							]
						},
						{
							"id": 824,
							"name": "findById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 825,
									"name": "findById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given ID."
									},
									"parameters": [
										{
											"id": 826,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 47,
									"character": 10
								}
							]
						},
						{
							"id": 830,
							"name": "findByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 831,
									"name": "findByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 832,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 67,
									"character": 16
								}
							]
						},
						{
							"id": 827,
							"name": "findByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 828,
									"name": "findByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given name\nattribute."
									},
									"parameters": [
										{
											"id": 829,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 57,
									"character": 12
								}
							]
						},
						{
							"id": 833,
							"name": "findByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 834,
									"name": "findByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element partially matching the given\ncase-insensitive link text."
									},
									"parameters": [
										{
											"id": 835,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 77,
									"character": 23
								}
							]
						},
						{
							"id": 836,
							"name": "findByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 837,
									"name": "findByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given HTML tag\nname."
									},
									"parameters": [
										{
											"id": 838,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 87,
									"character": 15
								}
							]
						},
						{
							"id": 839,
							"name": "findByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 840,
									"name": "findByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first element inside this element matching the given XPath\nselector."
									},
									"parameters": [
										{
											"id": 841,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 97,
									"character": 13
								}
							]
						},
						{
							"id": 810,
							"name": "findDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isAbstract": true
							},
							"signatures": [
								{
									"id": 811,
									"name": "findDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 812,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 813,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 18,
									"character": 24
								}
							]
						},
						{
							"id": 863,
							"name": "findDisplayedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 864,
									"name": "findDisplayedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS class name. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 865,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 175,
									"character": 26
								}
							]
						},
						{
							"id": 866,
							"name": "findDisplayedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 867,
									"name": "findDisplayedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given CSS selector. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 868,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 188,
									"character": 28
								}
							]
						},
						{
							"id": 869,
							"name": "findDisplayedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 870,
									"name": "findDisplayedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given ID. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 871,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 201,
									"character": 19
								}
							]
						},
						{
							"id": 875,
							"name": "findDisplayedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 876,
									"name": "findDisplayedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 877,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 227,
									"character": 25
								}
							]
						},
						{
							"id": 872,
							"name": "findDisplayedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 873,
									"name": "findDisplayedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given name attribute. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 874,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 214,
									"character": 21
								}
							]
						},
						{
							"id": 878,
							"name": "findDisplayedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 879,
									"name": "findDisplayedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement partially matching the given case-insensitive link text. This is\ninherently slower than [[Element.find]], so should only be used in cases\nwhere the visibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 880,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 240,
									"character": 32
								}
							]
						},
						{
							"id": 881,
							"name": "findDisplayedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 882,
									"name": "findDisplayedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given HTML tag name. This is inherently slower than\n[[Element.find]], so should only be used in cases where the visibility\nof an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 883,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 253,
									"character": 24
								}
							]
						},
						{
							"id": 884,
							"name": "findDisplayedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 885,
									"name": "findDisplayedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this\nelement matching the given XPath selector. This is inherently slower\nthan [[Element.find]], so should only be used in cases where the\nvisibility of an element cannot be ensured in advance.",
										"tags": [
											{
												"tag": "since",
												"text": "1.6"
											}
										]
									},
									"parameters": [
										{
											"id": 886,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "E"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 266,
									"character": 22
								}
							]
						},
						{
							"id": 814,
							"name": "waitForDeleted",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isAbstract": true
							},
							"signatures": [
								{
									"id": 815,
									"name": "waitForDeleted",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 816,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Strategy",
												"id": 931
											}
										},
										{
											"id": 817,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "V"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 20,
									"character": 25
								}
							]
						},
						{
							"id": 887,
							"name": "waitForDeletedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 888,
									"name": "waitForDeletedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS class\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 889,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS class name to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 276,
									"character": 27
								}
							]
						},
						{
							"id": 890,
							"name": "waitForDeletedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 891,
									"name": "waitForDeletedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given CSS\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 892,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The CSS selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 286,
									"character": 29
								}
							]
						},
						{
							"id": 893,
							"name": "waitForDeletedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 894,
									"name": "waitForDeletedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given ID to be\ndestroyed."
									},
									"parameters": [
										{
											"id": 895,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ID of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 296,
									"character": 20
								}
							]
						},
						{
							"id": 899,
							"name": "waitForDeletedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 900,
									"name": "waitForDeletedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 901,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 316,
									"character": 26
								}
							]
						},
						{
							"id": 896,
							"name": "waitForDeletedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 897,
									"name": "waitForDeletedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given name\nattribute to be destroyed."
									},
									"parameters": [
										{
											"id": 898,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 306,
									"character": 22
								}
							]
						},
						{
							"id": 902,
							"name": "waitForDeletedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 903,
									"name": "waitForDeletedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element partially matching the given\ncase-insensitive link text to be destroyed."
									},
									"parameters": [
										{
											"id": 904,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The partial link text of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 326,
									"character": 33
								}
							]
						},
						{
							"id": 905,
							"name": "waitForDeletedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 906,
									"name": "waitForDeletedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given HTML tag\nname to be destroyed."
									},
									"parameters": [
										{
											"id": 907,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The tag name of the element.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 336,
									"character": 25
								}
							]
						},
						{
							"id": 908,
							"name": "waitForDeletedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 909,
									"name": "waitForDeletedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Waits for all elements inside this element matching the given XPath\nselector to be destroyed."
									},
									"parameters": [
										{
											"id": 910,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The XPath selector to search for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "V"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 346,
									"character": 23
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								802,
								806,
								842,
								845,
								851,
								848,
								854,
								857,
								860,
								818,
								821,
								824,
								830,
								827,
								833,
								836,
								839,
								810,
								863,
								866,
								869,
								875,
								872,
								878,
								881,
								884,
								814,
								887,
								890,
								893,
								899,
								896,
								902,
								905,
								908
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/Locator.ts",
							"line": 13,
							"character": 22
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Session",
							"id": 950
						},
						{
							"type": "reference",
							"name": "Element",
							"id": 1415
						},
						{
							"type": "reference",
							"name": "Command",
							"id": 1591
						}
					]
				},
				{
					"id": 911,
					"name": "W3cLocator",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 912,
							"name": "using",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 363,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "W3cStrategy",
								"id": 919
							}
						},
						{
							"id": 913,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 364,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								912,
								913
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/Locator.ts",
							"line": 362,
							"character": 27
						}
					]
				},
				{
					"id": 931,
					"name": "Strategy",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/webdriver/lib/Locator.ts",
							"line": 376,
							"character": 20
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reflection",
							"declaration": {
								"id": 932,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"children": [
									{
										"id": 933,
										"name": "class name",
										"kind": 32,
										"kindString": "Variable",
										"flags": {},
										"sources": [
											{
												"fileName": "src/webdriver/lib/Locator.ts",
												"line": 369,
												"character": 14
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										},
										"defaultValue": "true"
									},
									{
										"id": 934,
										"name": "id",
										"kind": 32,
										"kindString": "Variable",
										"flags": {},
										"sources": [
											{
												"fileName": "src/webdriver/lib/Locator.ts",
												"line": 370,
												"character": 4
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										},
										"defaultValue": "true"
									},
									{
										"id": 935,
										"name": "name",
										"kind": 32,
										"kindString": "Variable",
										"flags": {},
										"sources": [
											{
												"fileName": "src/webdriver/lib/Locator.ts",
												"line": 371,
												"character": 6
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										},
										"defaultValue": "true"
									},
									{
										"id": 936,
										"name": "partial link text",
										"kind": 32,
										"kindString": "Variable",
										"flags": {},
										"sources": [
											{
												"fileName": "src/webdriver/lib/Locator.ts",
												"line": 372,
												"character": 21
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										},
										"defaultValue": "true"
									},
									{
										"id": 937,
										"name": "tag name",
										"kind": 32,
										"kindString": "Variable",
										"flags": {},
										"sources": [
											{
												"fileName": "src/webdriver/lib/Locator.ts",
												"line": 373,
												"character": 12
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										},
										"defaultValue": "true"
									}
								],
								"groups": [
									{
										"title": "Variables",
										"kind": 32,
										"children": [
											933,
											934,
											935,
											936,
											937
										]
									}
								],
								"sources": [
									{
										"fileName": "src/webdriver/lib/Locator.ts",
										"line": 376,
										"character": 28
									}
								]
							}
						}
					}
				},
				{
					"id": 919,
					"name": "W3cStrategy",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/webdriver/lib/Locator.ts",
							"line": 360,
							"character": 23
						}
					],
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reflection",
							"declaration": {
								"id": 920,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"children": [
									{
										"id": 921,
										"name": "css selector",
										"kind": 32,
										"kindString": "Variable",
										"flags": {},
										"sources": [
											{
												"fileName": "src/webdriver/lib/Locator.ts",
												"line": 354,
												"character": 16
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										},
										"defaultValue": "true"
									},
									{
										"id": 922,
										"name": "link text",
										"kind": 32,
										"kindString": "Variable",
										"flags": {},
										"sources": [
											{
												"fileName": "src/webdriver/lib/Locator.ts",
												"line": 355,
												"character": 13
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										},
										"defaultValue": "true"
									},
									{
										"id": 923,
										"name": "partial link text",
										"kind": 32,
										"kindString": "Variable",
										"flags": {},
										"sources": [
											{
												"fileName": "src/webdriver/lib/Locator.ts",
												"line": 356,
												"character": 21
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										},
										"defaultValue": "true"
									},
									{
										"id": 924,
										"name": "xpath",
										"kind": 32,
										"kindString": "Variable",
										"flags": {},
										"sources": [
											{
												"fileName": "src/webdriver/lib/Locator.ts",
												"line": 357,
												"character": 7
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										},
										"defaultValue": "true"
									}
								],
								"groups": [
									{
										"title": "Variables",
										"kind": 32,
										"children": [
											921,
											922,
											923,
											924
										]
									}
								],
								"sources": [
									{
										"fileName": "src/webdriver/lib/Locator.ts",
										"line": 360,
										"character": 31
									}
								]
							}
						}
					}
				},
				{
					"id": 938,
					"name": "toW3cLocator",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 939,
							"name": "toW3cLocator",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 940,
									"name": "using",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Strategy",
										"id": 931
									}
								},
								{
									"id": 941,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "W3cLocator",
								"id": 911
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/Locator.ts",
							"line": 378,
							"character": 28
						}
					]
				},
				{
					"id": 925,
					"name": "strategies",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 926,
							"name": "class name",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 369,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 927,
							"name": "id",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 370,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 928,
							"name": "name",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 371,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 929,
							"name": "partial link text",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 372,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 930,
							"name": "tag name",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 373,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								926,
								927,
								928,
								929,
								930
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/Locator.ts",
							"line": 367,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 914,
					"name": "w3cStrategies",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"children": [
						{
							"id": 915,
							"name": "css selector",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 354,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 916,
							"name": "link text",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 355,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 917,
							"name": "partial link text",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 356,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 918,
							"name": "xpath",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/Locator.ts",
									"line": 357,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								915,
								916,
								917,
								918
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/Locator.ts",
							"line": 353,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						798
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						911
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						931,
						919
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						938
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						925,
						914
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/lib/Locator.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1407,
			"name": "\"webdriver/lib/findDisplayed\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/lib/findDisplayed.ts",
			"children": [
				{
					"id": 1408,
					"name": "findDisplayed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1409,
							"name": "findDisplayed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the first [[Element.isDisplayed|displayed]] element inside this element\nmatching the given query. This is inherently slower than [[Element.find]],\nso should only be used in cases where the visibility of an element cannot be\nensured in advance."
							},
							"parameters": [
								{
									"id": 1410,
									"name": "session",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Session",
										"id": 950
									}
								},
								{
									"id": 1411,
									"name": "locator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Session",
												"id": 950
											},
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										]
									}
								},
								{
									"id": 1412,
									"name": "strategy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Strategy",
										"id": 931
									}
								},
								{
									"id": 1413,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Element",
										"id": 1415
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/findDisplayed.ts",
							"line": 13,
							"character": 37
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1408
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/lib/findDisplayed.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 417,
			"name": "\"webdriver/lib/statusCodes\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/lib/statusCodes.ts",
			"children": [
				{
					"id": 418,
					"name": "statusCodes",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "Status codes that may be received from a remote WebDriver server"
					},
					"children": [
						{
							"id": 419,
							"name": "0",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 5,
									"character": 5
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " ['Success', 'The command executed successfully.']"
						},
						{
							"id": 424,
							"name": "10",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 19,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'StaleElementReference',\n    'An element command failed because the referenced element is no longer attached to the DOM.'\n  ]"
						},
						{
							"id": 425,
							"name": "11",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 23,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'ElementNotVisible',\n    'An element command could not be completed because the element is not visible on the page.'\n  ]"
						},
						{
							"id": 426,
							"name": "12",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 27,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'InvalidElementState',\n    'An element command could not be completed because the element is in an invalid state (e.g. attempting to click a disabled element).'\n  ]"
						},
						{
							"id": 427,
							"name": "13",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 31,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'UnknownError',\n    'An unknown server-side error occurred while processing the command.'\n  ]"
						},
						{
							"id": 428,
							"name": "15",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 35,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'ElementIsNotSelectable',\n    'An attempt was made to select an element that cannot be selected.'\n  ]"
						},
						{
							"id": 429,
							"name": "17",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 39,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'JavaScriptError',\n    'An error occurred while executing user supplied JavaScript.'\n  ]"
						},
						{
							"id": 430,
							"name": "19",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 43,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'XPathLookupError',\n    'An error occurred while searching for an element by XPath.'\n  ]"
						},
						{
							"id": 431,
							"name": "21",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 47,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'Timeout',\n    'An operation did not complete before its timeout expired.'\n  ]"
						},
						{
							"id": 432,
							"name": "23",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 51,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'NoSuchWindow',\n    'A request to switch to a different window could not be satisfied because the window could not be found.'\n  ]"
						},
						{
							"id": 433,
							"name": "24",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 55,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'InvalidCookieDomain',\n    'An illegal attempt was made to set a cookie under a different domain than the current page.'\n  ]"
						},
						{
							"id": 434,
							"name": "25",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 59,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'UnableToSetCookie',\n    \"A request to set a cookie's value could not be satisfied.\"\n  ]"
						},
						{
							"id": 435,
							"name": "26",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 63,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'UnexpectedAlertOpen',\n    'A modal dialog was open, blocking this operation'\n  ]"
						},
						{
							"id": 436,
							"name": "27",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 67,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'NoAlertOpenError',\n    'An attempt was made to operate on a modal dialog when one was not open.'\n  ]"
						},
						{
							"id": 437,
							"name": "28",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 71,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'ScriptTimeout',\n    'A script did not complete before its timeout expired.'\n  ]"
						},
						{
							"id": 438,
							"name": "29",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 75,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'InvalidElementCoordinates',\n    'The coordinates provided to an interactions operation are invalid.'\n  ]"
						},
						{
							"id": 439,
							"name": "30",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 79,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " ['IMENotAvailable', 'IME was not available.']"
						},
						{
							"id": 440,
							"name": "31",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 80,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " ['IMEEngineActivationFailed', 'An IME engine could not be started.']"
						},
						{
							"id": 441,
							"name": "32",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 81,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'InvalidSelector',\n    'Argument was an invalid selector (e.g. XPath/CSS).'\n  ]"
						},
						{
							"id": 442,
							"name": "33",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 85,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " ['SessionNotCreatedException', 'A new session could not be created.']"
						},
						{
							"id": 443,
							"name": "34",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 86,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'MoveTargetOutOfBounds',\n    'Target provided for a move action is out of bounds.'\n  ]"
						},
						{
							"id": 420,
							"name": "6",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 6,
									"character": 5
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " ['NoSuchDriver', 'A session is either terminated or not started.']"
						},
						{
							"id": 444,
							"name": "61",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 90,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " ['InvalidArgument', 'Argument was invalid']"
						},
						{
							"id": 421,
							"name": "7",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 7,
									"character": 5
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'NoSuchElement',\n    'An element could not be located on the page using the given search parameters.'\n  ]"
						},
						{
							"id": 422,
							"name": "8",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 11,
									"character": 5
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'NoSuchFrame',\n    'A request to switch to a frame could not be satisfied because the frame could not be found.'\n  ]"
						},
						{
							"id": 423,
							"name": "9",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/webdriver/lib/statusCodes.ts",
									"line": 15,
									"character": 5
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": " [\n    'UnknownCommand',\n    'The requested resource could not be found, or a request was received using an HTTP method that is not supported by the mapped resource.'\n  ]"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								419,
								424,
								425,
								426,
								427,
								428,
								429,
								430,
								431,
								432,
								433,
								434,
								435,
								436,
								437,
								438,
								439,
								440,
								441,
								442,
								443,
								420,
								444,
								421,
								422,
								423
							]
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/statusCodes.ts",
							"line": 4,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						418
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/lib/statusCodes.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 388,
			"name": "\"webdriver/lib/util\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/lib/util.ts",
			"children": [
				{
					"id": 392,
					"name": "forCommand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 393,
							"name": "forCommand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Annotates the method with additional properties that provide guidance to\n[[Command]] about how the method interacts with stored context elements."
							},
							"parameters": [
								{
									"id": 394,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 395,
									"name": "properties",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 396,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 398,
													"name": "createsContext",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/webdriver/lib/util.ts",
															"line": 26,
															"character": 53
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 397,
													"name": "usesElement",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/webdriver/lib/util.ts",
															"line": 26,
															"character": 27
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														398,
														397
													]
												}
											],
											"sources": [
												{
													"fileName": "src/webdriver/lib/util.ts",
													"line": 26,
													"character": 13
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/util.ts",
							"line": 24,
							"character": 26
						}
					]
				},
				{
					"id": 399,
					"name": "getMethods",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 400,
							"name": "getMethods",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get method names, including inherited methods, on an object"
							},
							"parameters": [
								{
									"id": 401,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/util.ts",
							"line": 34,
							"character": 26
						}
					]
				},
				{
					"id": 402,
					"name": "getOwnProperties",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 403,
							"name": "getOwnProperties",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get all property names for an object, including non-enumerable properties"
							},
							"parameters": [
								{
									"id": 404,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/util.ts",
							"line": 43,
							"character": 32
						}
					]
				},
				{
					"id": 405,
					"name": "manualFindByLinkText",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 406,
							"name": "manualFindByLinkText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Searches a document or element subtree for links with the given\nnormalized text. This method works for 'link text' and 'partial link\ntext' search strategies.",
								"text": "Note that this method should be passed to an `execute` call, not called\ndirectly. It has an 'istanbul ignore' comment for this reason.\n",
								"returns": "The found element or elements\n"
							},
							"parameters": [
								{
									"id": 407,
									"name": "using",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The strategy in use ('link text' or 'partial link text')"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 408,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The link text to search for"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 409,
									"name": "multiple",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "If true, return all matching links"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 410,
									"name": "element",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "A context element"
									},
									"type": {
										"type": "reference",
										"name": "HTMLElement"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "HTMLAnchorElement"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "HTMLElement"
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/util.ts",
							"line": 70,
							"character": 36
						}
					]
				},
				{
					"id": 389,
					"name": "sleep",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 390,
							"name": "sleep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a promise that resolves itself after `ms` milliseconds."
							},
							"parameters": [
								{
									"id": 391,
									"name": "ms",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Time until resolution in milliseconds.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/util.ts",
							"line": 8,
							"character": 21
						}
					]
				},
				{
					"id": 411,
					"name": "toExecuteString",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 412,
							"name": "toExecuteString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a function to a string representation suitable for use with the\n`execute` API endpoint."
							},
							"parameters": [
								{
									"id": 413,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Function"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/util.ts",
							"line": 115,
							"character": 31
						}
					]
				},
				{
					"id": 414,
					"name": "trimStack",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 415,
							"name": "trimStack",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the first line of a stack trace, which in V8 is the string\nrepresentation of the object holding the stack trace (which is garbage for\ncaptured stack traces)."
							},
							"parameters": [
								{
									"id": 416,
									"name": "stack",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/util.ts",
							"line": 134,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						392,
						399,
						402,
						405,
						389,
						411,
						414
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/lib/util.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 942,
			"name": "\"webdriver/lib/waitForDeleted\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "src/webdriver/lib/waitForDeleted.ts",
			"children": [
				{
					"id": 943,
					"name": "waitForDeleted",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 944,
							"name": "waitForDeleted",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Waits for all elements findable in the currently active window/frame\nusing the given strategy and value to be destroyed.",
								"returns": "a Task that resolves when no matching elements can be found, or\nrejects if matching elements still exist after the find timeout.\n"
							},
							"parameters": [
								{
									"id": 945,
									"name": "session",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The session to consider.\n"
									},
									"type": {
										"type": "reference",
										"name": "Session",
										"id": 950
									}
								},
								{
									"id": 946,
									"name": "locator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The particular instance that will perform the locating.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Session",
												"id": 950
											},
											{
												"type": "reference",
												"name": "Element",
												"id": 1415
											}
										]
									}
								},
								{
									"id": 947,
									"name": "using",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The element retrieval strategy to use. See\n[[Command.Command.find]] for options.\n"
									},
									"type": {
										"type": "reference",
										"name": "Strategy",
										"id": 931
									}
								},
								{
									"id": 948,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The strategy-specific value to search for. See\n[[Command.Command.find]] for details.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CancellablePromise",
								"id": 2,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "src/webdriver/lib/waitForDeleted.ts",
							"line": 25,
							"character": 38
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						943
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webdriver/lib/waitForDeleted.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				387,
				187,
				1,
				242,
				244,
				132,
				7794,
				7790,
				4437,
				3978,
				7875,
				3452,
				5579,
				5172,
				6070,
				6277,
				3565,
				3483,
				5657,
				6225,
				7837,
				7799,
				3668,
				4998,
				4564,
				3707,
				3724,
				5902,
				4574,
				7069,
				3953,
				4527,
				3829,
				3876,
				6271,
				6260,
				6253,
				6267,
				6263,
				6257,
				5137,
				5094,
				5095,
				4892,
				6825,
				5861,
				6331,
				5808,
				5700,
				6922,
				6760,
				6878,
				6975,
				6439,
				4839,
				6594,
				6703,
				7019,
				6386,
				5693,
				5597,
				3472,
				7887,
				7888,
				7889,
				7890,
				7891,
				7892,
				2793,
				3224,
				3352,
				2928,
				2481,
				3090,
				2302,
				7905,
				2293,
				2268,
				2480,
				1590,
				1414,
				693,
				949,
				7911,
				8020,
				8129,
				560,
				445,
				797,
				1407,
				417,
				388,
				942
			]
		}
	]
}